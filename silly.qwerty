
return { AdvancedDragger={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(AdvancedDragger)=>()",
    Clone="(AdvancedDragger)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(AdvancedDragger)=>()",
    FindFirstAncestor="(AdvancedDragger,string)=>(any)",
    FindFirstAncestorOfClass="(AdvancedDragger,string)=>(any)",
    FindFirstAncestorWhichIsA="(AdvancedDragger,string)=>(any)",
    FindFirstChild="(AdvancedDragger,string,boolean)=>(any)",
    FindFirstChildOfClass="(AdvancedDragger,string)=>(any)",
    FindFirstChildWhichIsA="(AdvancedDragger,string,boolean)=>(any)",
    GetAttribute="(AdvancedDragger,string)=>(any)",
    GetAttributeChangedSignal="(AdvancedDragger,string)=>(any)",
    GetAttributes="(AdvancedDragger)=>(any)",
    GetChildren="(AdvancedDragger)=>(any)",
    GetDebugId="(AdvancedDragger,number)=>(string)",
    GetDescendants="(AdvancedDragger)=>(any)",
    GetFullName="(AdvancedDragger)=>(string)",
    GetPropertyChangedSignal="(AdvancedDragger,string)=>(any)",
    IsA="(AdvancedDragger,string)=>(boolean)",
    IsAncestorOf="(AdvancedDragger,any)=>(boolean)",
    IsDescendantOf="(AdvancedDragger,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(AdvancedDragger)=>()",
    RobloxLocked="boolean",
    SetAttribute="(AdvancedDragger,string,any)=>()",
    Tags="any",
    WaitForChild="(AdvancedDragger,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(AdvancedDragger)=>(any)",
    className="string",
    clone="(AdvancedDragger)=>(any)",
    destroy="(AdvancedDragger)=>()",
    findFirstChild="(AdvancedDragger,string,boolean)=>(any)",
    getChildren="(AdvancedDragger)=>(any)",
    isA="(AdvancedDragger,string)=>(boolean)",
    isDescendantOf="(AdvancedDragger,any)=>(boolean)",
    remove="(AdvancedDragger)=>()"}


, BrickColor={
    Black="()=>({Color="Color3,Name="string,Number="number,b="number,g="number,r="number})",
    Blue="<Cycle>",
    DarkGray="<Cycle>",
    Gray="<Cycle>",
    Green="<Cycle>",
    New="(number||,number?,number?)=>(BrickColor)",
    Random="(number||,number?,number?)=>(BrickColor)",
    Red="<Cycle>",
    White="<Cycle>",
    Yellow="<Cycle>",
    new="<Cycle>",
    palette="(number)=>(BrickColor)",
    random="<Cycle>"}


, UnionOperation={
    AncestryChanged="Event",
    Anchored="boolean",
    Archivable="boolean",
    AssetId="any",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BackParamA="number",
    BackParamB="number",
    BackSurface="any",
    BackSurfaceInput="any",
    BottomParamA="number",
    BottomParamB="number",
    BottomSurface="any",
    BottomSurfaceInput="any",
    BreakJoints="(UnionOperation)=>()",
    BrickColor="any",
    CFrame="CFrame",
    CanCollide="boolean",
    CanCollideWith="(UnionOperation,any)=>(boolean)",
    CanSetNetworkOwnership="(UnionOperation)=>(any)",
    CastShadow="boolean",
    CenterOfMass="Vector3",
    Changed="Event",
    ChildAdded="Event",
    ChildData="any",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(UnionOperation)=>()",
    Clone="(UnionOperation)=>(any)",
    CollisionFidelity="any",
    CollisionGroupId="number",
    Color="Color3",
    Color3uint8="any",
    CustomPhysicalProperties="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(UnionOperation)=>()",
    DraggingV1="boolean",
    Elasticity="number",
    FindFirstAncestor="(UnionOperation,string)=>(any)",
    FindFirstAncestorOfClass="(UnionOperation,string)=>(any)",
    FindFirstAncestorWhichIsA="(UnionOperation,string)=>(any)",
    FindFirstChild="(UnionOperation,string,boolean)=>(any)",
    FindFirstChildOfClass="(UnionOperation,string)=>(any)",
    FindFirstChildWhichIsA="(UnionOperation,string,boolean)=>(any)",
    FormFactor="any",
    Friction="number",
    FrontParamA="number",
    FrontParamB="number",
    FrontSurface="any",
    FrontSurfaceInput="any",
    GetAttribute="(UnionOperation,string)=>(any)",
    GetAttributeChangedSignal="(UnionOperation,string)=>(any)",
    GetAttributes="(UnionOperation)=>(any)",
    GetChildren="(UnionOperation)=>(any)",
    GetConnectedParts="(UnionOperation,boolean)=>(any)",
    GetDebugId="(UnionOperation,number)=>(string)",
    GetDescendants="(UnionOperation)=>(any)",
    GetFullName="(UnionOperation)=>(string)",
    GetJoints="(UnionOperation)=>(any)",
    GetMass="(UnionOperation)=>(number)",
    GetNetworkOwner="(UnionOperation)=>(any)",
    GetNetworkOwnershipAuto="(UnionOperation)=>(boolean)",
    GetPropertyChangedSignal="(UnionOperation,string)=>(any)",
    GetRenderCFrame="(UnionOperation)=>(CFrame)",
    GetRootPart="(UnionOperation)=>(any)",
    GetTouchingParts="(UnionOperation)=>(any)",
    InitialSize="Vector3",
    IsA="(UnionOperation,string)=>(boolean)",
    IsAncestorOf="(UnionOperation,any)=>(boolean)",
    IsDescendantOf="(UnionOperation,any)=>(boolean)",
    IsGrounded="(UnionOperation)=>(boolean)",
    LODData="any",
    LeftParamA="number",
    LeftParamB="number",
    LeftSurface="any",
    LeftSurfaceInput="any",
    LocalSimulationTouched="Event",
    LocalTransparencyModifier="number",
    Locked="boolean",
    MakeJoints="(UnionOperation)=>()",
    Massless="boolean",
    Material="any",
    MeshData="any",
    Name="string",
    NetworkIsSleeping="boolean",
    NetworkOwnerChanged="Event",
    NetworkOwnerV3="any",
    NetworkOwnershipRule="any",
    Orientation="Vector3",
    OutfitChanged="Event",
    Parent="any",
    PhysicalConfigData="any",
    PhysicsData="any",
    Position="Vector3",
    ReceiveAge="number",
    Reflectance="number",
    Remove="(UnionOperation)=>()",
    RenderFidelity="any",
    Resize="(UnionOperation,any,number)=>(boolean)",
    ResizeIncrement="number",
    ResizeableFaces="any",
    RightParamA="number",
    RightParamB="number",
    RightSurface="any",
    RightSurfaceInput="any",
    RobloxLocked="boolean",
    RootPriority="number",
    RotVelocity="Vector3",
    Rotation="Vector3",
    SetAttribute="(UnionOperation,string,any)=>()",
    SetNetworkOwner="(UnionOperation,any)=>()",
    SetNetworkOwnershipAuto="(UnionOperation)=>()",
    Size="Vector3",
    SpecificGravity="number",
    StoppedTouching="Event",
    SubtractAsync="(UnionOperation,any,any,any)=>(any)",
    Tags="any",
    TopParamA="number",
    TopParamB="number",
    TopSurface="any",
    TopSurfaceInput="any",
    TouchEnded="Event",
    Touched="Event",
    Transparency="number",
    TriangleCount="number",
    UnionAsync="(UnionOperation,any,any,any)=>(any)",
    UsePartColor="boolean",
    Velocity="Vector3",
    WaitForChild="(UnionOperation,string,number)=>(any)",
    archivable="boolean",
    breakJoints="(UnionOperation)=>()",
    brickColor="any",
    childAdded="Event",
    children="(UnionOperation)=>(any)",
    className="string",
    clone="(UnionOperation)=>(any)",
    destroy="(UnionOperation)=>()",
    findFirstChild="(UnionOperation,string,boolean)=>(any)",
    getChildren="(UnionOperation)=>(any)",
    getMass="(UnionOperation)=>(number)",
    isA="(UnionOperation,string)=>(boolean)",
    isDescendantOf="(UnionOperation,any)=>(boolean)",
    makeJoints="(UnionOperation)=>()",
    remove="(UnionOperation)=>()",
    resize="(UnionOperation,any,number)=>(boolean)",
    siz="Vector3",
    size="Vector3",
    touched="Event"}


, any=any

, DraftsService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(DraftsService)=>()",
    Clone="(DraftsService)=>(any)",
    CommitEdits="(DraftsService,any)=>()",
    CommitStatusChanged="Event",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(DraftsService)=>()",
    DiscardEdits="(DraftsService,any)=>()",
    DraftAdded="Event",
    DraftRemoved="Event",
    DraftStatusChanged="Event",
    EditorsListChanged="Event",
    FindFirstAncestor="(DraftsService,string)=>(any)",
    FindFirstAncestorOfClass="(DraftsService,string)=>(any)",
    FindFirstAncestorWhichIsA="(DraftsService,string)=>(any)",
    FindFirstChild="(DraftsService,string,boolean)=>(any)",
    FindFirstChildOfClass="(DraftsService,string)=>(any)",
    FindFirstChildWhichIsA="(DraftsService,string,boolean)=>(any)",
    GetAttribute="(DraftsService,string)=>(any)",
    GetAttributeChangedSignal="(DraftsService,string)=>(any)",
    GetAttributes="(DraftsService)=>(any)",
    GetChildren="(DraftsService)=>(any)",
    GetDebugId="(DraftsService,number)=>(string)",
    GetDescendants="(DraftsService)=>(any)",
    GetDraftStatus="(DraftsService,any)=>(any)",
    GetDrafts="(DraftsService)=>(any)",
    GetEditors="(DraftsService,any)=>(any)",
    GetFullName="(DraftsService)=>(string)",
    GetPropertyChangedSignal="(DraftsService,string)=>(any)",
    IsA="(DraftsService,string)=>(boolean)",
    IsAncestorOf="(DraftsService,any)=>(boolean)",
    IsDescendantOf="(DraftsService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(DraftsService)=>()",
    RestoreScripts="(DraftsService,any)=>()",
    RobloxLocked="boolean",
    SetAttribute="(DraftsService,string,any)=>()",
    ShowDiffsAgainstBase="(DraftsService,any)=>()",
    ShowDiffsAgainstServer="(DraftsService,any)=>()",
    Tags="any",
    UpdateStatusChanged="Event",
    UpdateToLatestVersion="(DraftsService,any)=>()",
    WaitForChild="(DraftsService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(DraftsService)=>(any)",
    className="string",
    clone="(DraftsService)=>(any)",
    destroy="(DraftsService)=>()",
    findFirstChild="(DraftsService,string,boolean)=>(any)",
    getChildren="(DraftsService)=>(any)",
    isA="(DraftsService,string)=>(boolean)",
    isDescendantOf="(DraftsService,any)=>(boolean)",
    remove="(DraftsService)=>()"}


, nil=nil

, StandardPages={
    AdvanceToNextPageAsync="(StandardPages)=>()",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(StandardPages)=>()",
    Clone="(StandardPages)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(StandardPages)=>()",
    FindFirstAncestor="(StandardPages,string)=>(any)",
    FindFirstAncestorOfClass="(StandardPages,string)=>(any)",
    FindFirstAncestorWhichIsA="(StandardPages,string)=>(any)",
    FindFirstChild="(StandardPages,string,boolean)=>(any)",
    FindFirstChildOfClass="(StandardPages,string)=>(any)",
    FindFirstChildWhichIsA="(StandardPages,string,boolean)=>(any)",
    GetAttribute="(StandardPages,string)=>(any)",
    GetAttributeChangedSignal="(StandardPages,string)=>(any)",
    GetAttributes="(StandardPages)=>(any)",
    GetChildren="(StandardPages)=>(any)",
    GetCurrentPage="(StandardPages)=>(any)",
    GetDebugId="(StandardPages,number)=>(string)",
    GetDescendants="(StandardPages)=>(any)",
    GetFullName="(StandardPages)=>(string)",
    GetPropertyChangedSignal="(StandardPages,string)=>(any)",
    IsA="(StandardPages,string)=>(boolean)",
    IsAncestorOf="(StandardPages,any)=>(boolean)",
    IsDescendantOf="(StandardPages,any)=>(boolean)",
    IsFinished="boolean",
    Name="string",
    Parent="any",
    Remove="(StandardPages)=>()",
    RobloxLocked="boolean",
    SetAttribute="(StandardPages,string,any)=>()",
    Tags="any",
    WaitForChild="(StandardPages,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(StandardPages)=>(any)",
    className="string",
    clone="(StandardPages)=>(any)",
    destroy="(StandardPages)=>()",
    findFirstChild="(StandardPages,string,boolean)=>(any)",
    getChildren="(StandardPages)=>(any)",
    isA="(StandardPages,string)=>(boolean)",
    isDescendantOf="(StandardPages,any)=>(boolean)",
    remove="(StandardPages)=>()"}


, Handles={
    Adornee="any",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Handles)=>()",
    Clone="(Handles)=>(any)",
    Color="any",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Handles)=>()",
    Faces="any",
    FindFirstAncestor="(Handles,string)=>(any)",
    FindFirstAncestorOfClass="(Handles,string)=>(any)",
    FindFirstAncestorWhichIsA="(Handles,string)=>(any)",
    FindFirstChild="(Handles,string,boolean)=>(any)",
    FindFirstChildOfClass="(Handles,string)=>(any)",
    FindFirstChildWhichIsA="(Handles,string,boolean)=>(any)",
    GetAttribute="(Handles,string)=>(any)",
    GetAttributeChangedSignal="(Handles,string)=>(any)",
    GetAttributes="(Handles)=>(any)",
    GetChildren="(Handles)=>(any)",
    GetDebugId="(Handles,number)=>(string)",
    GetDescendants="(Handles)=>(any)",
    GetFullName="(Handles)=>(string)",
    GetPropertyChangedSignal="(Handles,string)=>(any)",
    IsA="(Handles,string)=>(boolean)",
    IsAncestorOf="(Handles,any)=>(boolean)",
    IsDescendantOf="(Handles,any)=>(boolean)",
    MouseButton1Down="Event",
    MouseButton1DownConnectionCount="number",
    MouseButton1Up="Event",
    MouseButton1UpConnectionCount="number",
    MouseDrag="Event",
    MouseDragConnectionCount="number",
    MouseEnter="Event",
    MouseEnterConnectionCount="number",
    MouseLeave="Event",
    MouseLeaveConnectionCount="number",
    Name="string",
    Parent="any",
    Remove="(Handles)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Handles,string,any)=>()",
    Style="any",
    Tags="any",
    Transparency="number",
    Visible="boolean",
    WaitForChild="(Handles,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Handles)=>(any)",
    className="string",
    clone="(Handles)=>(any)",
    destroy="(Handles)=>()",
    findFirstChild="(Handles,string,boolean)=>(any)",
    getChildren="(Handles)=>(any)",
    isA="(Handles,string)=>(boolean)",
    isDescendantOf="(Handles,any)=>(boolean)",
    remove="(Handles)=>()"}


, AlignOrientation={
    Active="boolean",
    Align,="any",
    AncestryChanged="Event",
    Archivable="boolean",
    Attachment0="any",
    Attachment1="any",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(AlignOrientation)=>()",
    Clone="(AlignOrientation)=>(any)",
    Color="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(AlignOrientation)=>()",
    Enabled="boolean",
    FindFirstAncestor="(AlignOrientation,string)=>(any)",
    FindFirstAncestorOfClass="(AlignOrientation,string)=>(any)",
    FindFirstAncestorWhichIsA="(AlignOrientation,string)=>(any)",
    FindFirstChild="(AlignOrientation,string,boolean)=>(any)",
    FindFirstChildOfClass="(AlignOrientation,string)=>(any)",
    FindFirstChildWhichIsA="(AlignOrientation,string,boolean)=>(any)",
    GetAttribute="(AlignOrientation,string)=>(any)",
    GetAttributeChangedSignal="(AlignOrientation,string)=>(any)",
    GetAttributes="(AlignOrientation)=>(any)",
    GetChildren="(AlignOrientation)=>(any)",
    GetDebugId="(AlignOrientation,number)=>(string)",
    GetDescendants="(AlignOrientation)=>(any)",
    GetFullName="(AlignOrientation)=>(string)",
    GetPropertyChangedSignal="(AlignOrientation,string)=>(any)",
    IsA="(AlignOrientation,string)=>(boolean)",
    IsAncestorOf="(AlignOrientation,any)=>(boolean)",
    IsDescendantOf="(AlignOrientation,any)=>(boolean)",
    MaxAngularVelocity="number",
    MaxTorque="number",
    Name="string",
    Parent="any",
    PrimaryAxisOnly="boolean",
    ReactionTorqueEnabled="boolean",
    Remove="(AlignOrientation)=>()",
    Responsiveness="number",
    RigidityEnabled="boolean",
    RobloxLocked="boolean",
    SetAttribute="(AlignOrientation,string,any)=>()",
    Tags="any",
    Visible="boolean",
    WaitForChild="(AlignOrientation,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(AlignOrientation)=>(any)",
    className="string",
    clone="(AlignOrientation)=>(any)",
    destroy="(AlignOrientation)=>()",
    findFirstChild="(AlignOrientation,string,boolean)=>(any)",
    getChildren="(AlignOrientation)=>(any)",
    isA="(AlignOrientation,string)=>(boolean)",
    isDescendantOf="(AlignOrientation,any)=>(boolean)",
    remove="(AlignOrientation)=>()"}


, number=number

, FloorWire={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(FloorWire)=>()",
    Clone="(FloorWire)=>(any)",
    Color="any",
    Color3="Color3",
    CycleOffset="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(FloorWire)=>()",
    FindFirstAncestor="(FloorWire,string)=>(any)",
    FindFirstAncestorOfClass="(FloorWire,string)=>(any)",
    FindFirstAncestorWhichIsA="(FloorWire,string)=>(any)",
    FindFirstChild="(FloorWire,string,boolean)=>(any)",
    FindFirstChildOfClass="(FloorWire,string)=>(any)",
    FindFirstChildWhichIsA="(FloorWire,string,boolean)=>(any)",
    From="any",
    GetAttribute="(FloorWire,string)=>(any)",
    GetAttributeChangedSignal="(FloorWire,string)=>(any)",
    GetAttributes="(FloorWire)=>(any)",
    GetChildren="(FloorWire)=>(any)",
    GetDebugId="(FloorWire,number)=>(string)",
    GetDescendants="(FloorWire)=>(any)",
    GetFullName="(FloorWire)=>(string)",
    GetPropertyChangedSignal="(FloorWire,string)=>(any)",
    IsA="(FloorWire,string)=>(boolean)",
    IsAncestorOf="(FloorWire,any)=>(boolean)",
    IsDescendantOf="(FloorWire,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(FloorWire)=>()",
    RobloxLocked="boolean",
    SetAttribute="(FloorWire,string,any)=>()",
    StudsBetweenTextures="number",
    Tags="any",
    Texture="any",
    TextureSize="Vector2",
    To="any",
    Transparency="number",
    Velocity="number",
    Visible="boolean",
    WaitForChild="(FloorWire,string,number)=>(any)",
    WireRadius="number",
    archivable="boolean",
    childAdded="Event",
    children="(FloorWire)=>(any)",
    className="string",
    clone="(FloorWire)=>(any)",
    destroy="(FloorWire)=>()",
    findFirstChild="(FloorWire,string,boolean)=>(any)",
    getChildren="(FloorWire)=>(any)",
    isA="(FloorWire,string)=>(boolean)",
    isDescendantOf="(FloorWire,any)=>(boolean)",
    remove="(FloorWire)=>()"}


, Enum={"}


, string=string

, EnumItem={
    Name="string",
    Value="number"}


, ParticleEmitter={
    Acceleration="Vector3",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    Clear="(ParticleEmitter)=>()",
    ClearAllChildren="(ParticleEmitter)=>()",
    Clone="(ParticleEmitter)=>(any)",
    Color="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ParticleEmitter)=>()",
    Drag="number",
    EmissionDirection="any",
    Emit="(ParticleEmitter,number)=>()",
    Enabled="boolean",
    FindFirstAncestor="(ParticleEmitter,string)=>(any)",
    FindFirstAncestorOfClass="(ParticleEmitter,string)=>(any)",
    FindFirstAncestorWhichIsA="(ParticleEmitter,string)=>(any)",
    FindFirstChild="(ParticleEmitter,string,boolean)=>(any)",
    FindFirstChildOfClass="(ParticleEmitter,string)=>(any)",
    FindFirstChildWhichIsA="(ParticleEmitter,string,boolean)=>(any)",
    GetAttribute="(ParticleEmitter,string)=>(any)",
    GetAttributeChangedSignal="(ParticleEmitter,string)=>(any)",
    GetAttributes="(ParticleEmitter)=>(any)",
    GetChildren="(ParticleEmitter)=>(any)",
    GetDebugId="(ParticleEmitter,number)=>(string)",
    GetDescendants="(ParticleEmitter)=>(any)",
    GetFullName="(ParticleEmitter)=>(string)",
    GetPropertyChangedSignal="(ParticleEmitter,string)=>(any)",
    IsA="(ParticleEmitter,string)=>(boolean)",
    IsAncestorOf="(ParticleEmitter,any)=>(boolean)",
    IsDescendantOf="(ParticleEmitter,any)=>(boolean)",
    Lifetime="any",
    LightEmission="number",
    LightInfluence="number",
    LockedToPart="boolean",
    Name="string",
    OnClearRequested="Event",
    OnEmitRequested="Event",
    Parent="any",
    Rate="number",
    Remove="(ParticleEmitter)=>()",
    RobloxLocked="boolean",
    RotSpeed="any",
    Rotation="any",
    SetAttribute="(ParticleEmitter,string,any)=>()",
    Size="any",
    Speed="any",
    SpreadAngle="Vector2",
    Tags="any",
    Texture="any",
    Transparency="any",
    VelocityInheritance="number",
    VelocitySpread="number",
    WaitForChild="(ParticleEmitter,string,number)=>(any)",
    ZOffset="number",
    archivable="boolean",
    childAdded="Event",
    children="(ParticleEmitter)=>(any)",
    className="string",
    clone="(ParticleEmitter)=>(any)",
    destroy="(ParticleEmitter)=>()",
    findFirstChild="(ParticleEmitter,string,boolean)=>(any)",
    getChildren="(ParticleEmitter)=>(any)",
    isA="(ParticleEmitter,string)=>(boolean)",
    isDescendantOf="(ParticleEmitter,any)=>(boolean)",
    remove="(ParticleEmitter)=>()"}


, Ray={
    ClosestPoint="(Ray,Vector3)=>(Vector3)",
    Distance="(Ray,Vector3)=>(number)"}


, VirtualUser={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Button1Down="(VirtualUser,Vector2,CFrame)=>()",
    Button1Up="(VirtualUser,Vector2,CFrame)=>()",
    Button2Down="(VirtualUser,Vector2,CFrame)=>()",
    Button2Up="(VirtualUser,Vector2,CFrame)=>()",
    CaptureController="(VirtualUser)=>()",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(VirtualUser)=>()",
    ClickButton1="(VirtualUser,Vector2,CFrame)=>()",
    ClickButton2="(VirtualUser,Vector2,CFrame)=>()",
    Clone="(VirtualUser)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(VirtualUser)=>()",
    FindFirstAncestor="(VirtualUser,string)=>(any)",
    FindFirstAncestorOfClass="(VirtualUser,string)=>(any)",
    FindFirstAncestorWhichIsA="(VirtualUser,string)=>(any)",
    FindFirstChild="(VirtualUser,string,boolean)=>(any)",
    FindFirstChildOfClass="(VirtualUser,string)=>(any)",
    FindFirstChildWhichIsA="(VirtualUser,string,boolean)=>(any)",
    GetAttribute="(VirtualUser,string)=>(any)",
    GetAttributeChangedSignal="(VirtualUser,string)=>(any)",
    GetAttributes="(VirtualUser)=>(any)",
    GetChildren="(VirtualUser)=>(any)",
    GetDebugId="(VirtualUser,number)=>(string)",
    GetDescendants="(VirtualUser)=>(any)",
    GetFullName="(VirtualUser)=>(string)",
    GetPropertyChangedSignal="(VirtualUser,string)=>(any)",
    IsA="(VirtualUser,string)=>(boolean)",
    IsAncestorOf="(VirtualUser,any)=>(boolean)",
    IsDescendantOf="(VirtualUser,any)=>(boolean)",
    MoveMouse="(VirtualUser,Vector2,CFrame)=>()",
    Name="string",
    Parent="any",
    Remove="(VirtualUser)=>()",
    RobloxLocked="boolean",
    SetAttribute="(VirtualUser,string,any)=>()",
    SetKeyDown="(VirtualUser,string)=>()",
    SetKeyUp="(VirtualUser,string)=>()",
    StartRecording="(VirtualUser)=>()",
    StopRecording="(VirtualUser)=>(string)",
    Tags="any",
    ,Key="(VirtualUser,string)=>()",
    WaitForChild="(VirtualUser,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(VirtualUser)=>(any)",
    className="string",
    clone="(VirtualUser)=>(any)",
    destroy="(VirtualUser)=>()",
    findFirstChild="(VirtualUser,string,boolean)=>(any)",
    getChildren="(VirtualUser)=>(any)",
    isA="(VirtualUser,string)=>(boolean)",
    isDescendantOf="(VirtualUser,any)=>(boolean)",
    remove="(VirtualUser)=>()"}


, boolean=boolean

, Keyframe={
    AddMarker="(Keyframe,any)=>()",
    AddPose="(Keyframe,any)=>()",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Keyframe)=>()",
    Clone="(Keyframe)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Keyframe)=>()",
    FindFirstAncestor="(Keyframe,string)=>(any)",
    FindFirstAncestorOfClass="(Keyframe,string)=>(any)",
    FindFirstAncestorWhichIsA="(Keyframe,string)=>(any)",
    FindFirstChild="(Keyframe,string,boolean)=>(any)",
    FindFirstChildOfClass="(Keyframe,string)=>(any)",
    FindFirstChildWhichIsA="(Keyframe,string,boolean)=>(any)",
    GetAttribute="(Keyframe,string)=>(any)",
    GetAttributeChangedSignal="(Keyframe,string)=>(any)",
    GetAttributes="(Keyframe)=>(any)",
    GetChildren="(Keyframe)=>(any)",
    GetDebugId="(Keyframe,number)=>(string)",
    GetDescendants="(Keyframe)=>(any)",
    GetFullName="(Keyframe)=>(string)",
    GetMarkers="(Keyframe)=>(any)",
    GetPoses="(Keyframe)=>(any)",
    GetPropertyChangedSignal="(Keyframe,string)=>(any)",
    IsA="(Keyframe,string)=>(boolean)",
    IsAncestorOf="(Keyframe,any)=>(boolean)",
    IsDescendantOf="(Keyframe,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Keyframe)=>()",
    RemoveMarker="(Keyframe,any)=>()",
    RemovePose="(Keyframe,any)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Keyframe,string,any)=>()",
    Tags="any",
    Time="number",
    WaitForChild="(Keyframe,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Keyframe)=>(any)",
    className="string",
    clone="(Keyframe)=>(any)",
    destroy="(Keyframe)=>()",
    findFirstChild="(Keyframe,string,boolean)=>(any)",
    getChildren="(Keyframe)=>(any)",
    isA="(Keyframe,string)=>(boolean)",
    isDescendantOf="(Keyframe,any)=>(boolean)",
    remove="(Keyframe)=>()"}


, BlurEffect={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BlurEffect)=>()",
    Clone="(BlurEffect)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BlurEffect)=>()",
    Enabled="boolean",
    FindFirstAncestor="(BlurEffect,string)=>(any)",
    FindFirstAncestorOfClass="(BlurEffect,string)=>(any)",
    FindFirstAncestorWhichIsA="(BlurEffect,string)=>(any)",
    FindFirstChild="(BlurEffect,string,boolean)=>(any)",
    FindFirstChildOfClass="(BlurEffect,string)=>(any)",
    FindFirstChildWhichIsA="(BlurEffect,string,boolean)=>(any)",
    GetAttribute="(BlurEffect,string)=>(any)",
    GetAttributeChangedSignal="(BlurEffect,string)=>(any)",
    GetAttributes="(BlurEffect)=>(any)",
    GetChildren="(BlurEffect)=>(any)",
    GetDebugId="(BlurEffect,number)=>(string)",
    GetDescendants="(BlurEffect)=>(any)",
    GetFullName="(BlurEffect)=>(string)",
    GetPropertyChangedSignal="(BlurEffect,string)=>(any)",
    IsA="(BlurEffect,string)=>(boolean)",
    IsAncestorOf="(BlurEffect,any)=>(boolean)",
    IsDescendantOf="(BlurEffect,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(BlurEffect)=>()",
    RobloxLocked="boolean",
    SetAttribute="(BlurEffect,string,any)=>()",
    Size="number",
    Tags="any",
    WaitForChild="(BlurEffect,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(BlurEffect)=>(any)",
    className="string",
    clone="(BlurEffect)=>(any)",
    destroy="(BlurEffect)=>()",
    findFirstChild="(BlurEffect,string,boolean)=>(any)",
    getChildren="(BlurEffect)=>(any)",
    isA="(BlurEffect,string)=>(boolean)",
    isDescendantOf="(BlurEffect,any)=>(boolean)",
    remove="(BlurEffect)=>()"}


, VideoFrame={
    AbsolutePosition="Vector2",
    AbsoluteRotation="number",
    AbsoluteSize="Vector2",
    Active="boolean",
    AncestryChanged="Event",
    AnchorPoint="Vector2",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoLocalize="boolean",
    BackgroundColor="any",
    BackgroundColor3="Color3",
    BackgroundTransparency="number",
    BorderColor="any",
    BorderColor3="Color3",
    BorderMode="any",
    BorderSizePixel="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(VideoFrame)=>()",
    ClipsDescendants="boolean",
    Clone="(VideoFrame)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(VideoFrame)=>()",
    DidLoop="Event",
    DragBegin="Event",
    DragBeginConnectionCount="number",
    DragStopped="Event",
    DragStoppedConnectionCount="number",
    Draggable="boolean",
    Ended="Event",
    FindFirstAncestor="(VideoFrame,string)=>(any)",
    FindFirstAncestorOfClass="(VideoFrame,string)=>(any)",
    FindFirstAncestorWhichIsA="(VideoFrame,string)=>(any)",
    FindFirstChild="(VideoFrame,string,boolean)=>(any)",
    FindFirstChildOfClass="(VideoFrame,string)=>(any)",
    FindFirstChildWhichIsA="(VideoFrame,string,boolean)=>(any)",
    GetAttribute="(VideoFrame,string)=>(any)",
    GetAttributeChangedSignal="(VideoFrame,string)=>(any)",
    GetAttributes="(VideoFrame)=>(any)",
    GetChildren="(VideoFrame)=>(any)",
    GetDebugId="(VideoFrame,number)=>(string)",
    GetDescendants="(VideoFrame)=>(any)",
    GetFullName="(VideoFrame)=>(string)",
    GetPropertyChangedSignal="(VideoFrame,string)=>(any)",
    InputBegan="Event",
    InputChanged="Event",
    InputEnded="Event",
    IsA="(VideoFrame,string)=>(boolean)",
    IsAncestorOf="(VideoFrame,any)=>(boolean)",
    IsDescendantOf="(VideoFrame,any)=>(boolean)",
    IsLoaded="boolean",
    IsNotOccluded="boolean",
    LayoutOrder="number",
    Loaded="Event",
    Localize="boolean",
    Looped="boolean",
    MouseEnter="Event",
    MouseEnterConnectionCount="number",
    MouseLeave="Event",
    MouseLeaveConnectionCount="number",
    MouseMoved="Event",
    MouseMovedConnectionCount="number",
    MouseWheelBackward="Event",
    MouseWheelBackwardConnectionCount="number",
    MouseWheelForward="Event",
    MouseWheelForwardConnectionCount="number",
    Name="string",
    NextSelectionDown="any",
    NextSelectionLeft="any",
    NextSelectionRight="any",
    NextSelectionUp="any",
    Parent="any",
    Pause="(VideoFrame)=>()",
    Paused="Event",
    Play="(VideoFrame)=>()",
    Played="Event",
    Playing="boolean",
    PlayingReplicating="boolean",
    PlayingUpdatedFromServer="Event",
    Position="UDim2",
    Remove="(VideoFrame)=>()",
    RobloxLocked="boolean",
    RootLocalizationTable="any",
    Rotation="number",
    Selectable="boolean",
    SelectionGained="Event",
    SelectionImageObject="any",
    SelectionLost="Event",
    SetAttribute="(VideoFrame,string,any)=>()",
    Size="UDim2",
    SizeConstraint="any",
    Tags="any",
    TimeLength="number",
    TimePosition="number",
    TimePositionReplicating="number",
    TimePositionUpdatedFromServer="Event",
    TouchLongPress="Event",
    TouchPan="Event",
    TouchPinch="Event",
    TouchRotate="Event",
    TouchSwipe="Event",
    TouchTap="Event",
    Transparency="number",
    TweenPosition="(VideoFrame,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSize="(VideoFrame,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSizeAndPosition="(VideoFrame,UDim2,UDim2,any,any,number,boolean,any)=>(boolean)",
    Video="any",
    Visible="boolean",
    Volume="number",
    WaitForChild="(VideoFrame,string,number)=>(any)",
    ZIndex="number",
    archivable="boolean",
    childAdded="Event",
    children="(VideoFrame)=>(any)",
    className="string",
    clone="(VideoFrame)=>(any)",
    destroy="(VideoFrame)=>()",
    findFirstChild="(VideoFrame,string,boolean)=>(any)",
    getChildren="(VideoFrame)=>(any)",
    isA="(VideoFrame,string)=>(boolean)",
    isDescendantOf="(VideoFrame,any)=>(boolean)",
    remove="(VideoFrame)=>()"}


, VectorForce={
    Active="boolean",
    AncestryChanged="Event",
    ApplyAtCenterOfMass="boolean",
    Archivable="boolean",
    Attachment0="any",
    Attachment1="any",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(VectorForce)=>()",
    Clone="(VectorForce)=>(any)",
    Color="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(VectorForce)=>()",
    Enabled="boolean",
    FindFirstAncestor="(VectorForce,string)=>(any)",
    FindFirstAncestorOfClass="(VectorForce,string)=>(any)",
    FindFirstAncestorWhichIsA="(VectorForce,string)=>(any)",
    FindFirstChild="(VectorForce,string,boolean)=>(any)",
    FindFirstChildOfClass="(VectorForce,string)=>(any)",
    FindFirstChildWhichIsA="(VectorForce,string,boolean)=>(any)",
    Force="Vector3",
    GetAttribute="(VectorForce,string)=>(any)",
    GetAttributeChangedSignal="(VectorForce,string)=>(any)",
    GetAttributes="(VectorForce)=>(any)",
    GetChildren="(VectorForce)=>(any)",
    GetDebugId="(VectorForce,number)=>(string)",
    GetDescendants="(VectorForce)=>(any)",
    GetFullName="(VectorForce)=>(string)",
    GetPropertyChangedSignal="(VectorForce,string)=>(any)",
    IsA="(VectorForce,string)=>(boolean)",
    IsAncestorOf="(VectorForce,any)=>(boolean)",
    IsDescendantOf="(VectorForce,any)=>(boolean)",
    Name="string",
    Parent="any",
    RelativeTo="any",
    Remove="(VectorForce)=>()",
    RobloxLocked="boolean",
    SetAttribute="(VectorForce,string,any)=>()",
    Tags="any",
    Visible="boolean",
    WaitForChild="(VectorForce,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(VectorForce)=>(any)",
    className="string",
    clone="(VectorForce)=>(any)",
    destroy="(VectorForce)=>()",
    findFirstChild="(VectorForce,string,boolean)=>(any)",
    getChildren="(VectorForce)=>(any)",
    isA="(VectorForce,string)=>(boolean)",
    isDescendantOf="(VectorForce,any)=>(boolean)",
    remove="(VectorForce)=>()"}


, StarterPlayer={
    AllowCustomAnimations="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoJumpEnabled="boolean",
    CameraMaxZoomDistance="number",
    CameraMinZoomDistance="number",
    CameraMode="any",
    Changed="Event",
    CharacterJumpHeight="number",
    CharacterJumpPower="number",
    CharacterMaxSlopeAngle="number",
    CharacterUseJumpPower="boolean",
    CharacterWalkSpeed="number",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(StarterPlayer)=>()",
    ClearDefaults="(StarterPlayer)=>()",
    Clone="(StarterPlayer)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(StarterPlayer)=>()",
    DevCameraOcclusionMode="any",
    DevComputerCameraMovementMode="any",
    DevComputerMovementMode="any",
    DevTouchCameraMovementMode="any",
    DevTouchMovementMode="any",
    EnableMouseLockOption="boolean",
    FindFirstAncestor="(StarterPlayer,string)=>(any)",
    FindFirstAncestorOfClass="(StarterPlayer,string)=>(any)",
    FindFirstAncestorWhichIsA="(StarterPlayer,string)=>(any)",
    FindFirstChild="(StarterPlayer,string,boolean)=>(any)",
    FindFirstChildOfClass="(StarterPlayer,string)=>(any)",
    FindFirstChildWhichIsA="(StarterPlayer,string,boolean)=>(any)",
    GameSettingsAssetIDFace="number",
    GameSettingsAssetIDHead="number",
    GameSettingsAssetIDLeftArm="number",
    GameSettingsAssetIDLeftLeg="number",
    GameSettingsAssetIDPants="number",
    GameSettingsAssetIDRightArm="number",
    GameSettingsAssetIDRightLeg="number",
    GameSettingsAssetIDShirt="number",
    GameSettingsAssetIDTeeShirt="number",
    GameSettingsAssetIDTorso="number",
    GameSettingsAvatar="any",
    GameSettingsR15Collision="any",
    GameSettingsScaleRangeBody,="any",
    GameSettingsScaleRangeHead="any",
    GameSettingsScaleRangeHeight="any",
    GameSettingsScaleRangeProportion="any",
    GameSettingsScaleRangeWidth="any",
    GetAttribute="(StarterPlayer,string)=>(any)",
    GetAttributeChangedSignal="(StarterPlayer,string)=>(any)",
    GetAttributes="(StarterPlayer)=>(any)",
    GetChildren="(StarterPlayer)=>(any)",
    GetDebugId="(StarterPlayer,number)=>(string)",
    GetDescendants="(StarterPlayer)=>(any)",
    GetFullName="(StarterPlayer)=>(string)",
    GetPropertyChangedSignal="(StarterPlayer,string)=>(any)",
    HealthDisplayDistance="number",
    IsA="(StarterPlayer,string)=>(boolean)",
    IsAncestorOf="(StarterPlayer,any)=>(boolean)",
    IsDescendantOf="(StarterPlayer,any)=>(boolean)",
    LoadCharacterAppearance="boolean",
    Name="string",
    NameDisplayDistance="number",
    Parent="any",
    Remove="(StarterPlayer)=>()",
    RobloxLocked="boolean",
    SetAttribute="(StarterPlayer,string,any)=>()",
    Tags="any",
    UserEmotesEnabled="boolean",
    WaitForChild="(StarterPlayer,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(StarterPlayer)=>(any)",
    className="string",
    clone="(StarterPlayer)=>(any)",
    destroy="(StarterPlayer)=>()",
    findFirstChild="(StarterPlayer,string,boolean)=>(any)",
    getChildren="(StarterPlayer)=>(any)",
    isA="(StarterPlayer,string)=>(boolean)",
    isDescendantOf="(StarterPlayer,any)=>(boolean)",
    remove="(StarterPlayer)=>()"}


, AnimationController={
    AncestryChanged="Event",
    AnimationPlayed="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(AnimationController)=>()",
    Clone="(AnimationController)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(AnimationController)=>()",
    FindFirstAncestor="(AnimationController,string)=>(any)",
    FindFirstAncestorOfClass="(AnimationController,string)=>(any)",
    FindFirstAncestorWhichIsA="(AnimationController,string)=>(any)",
    FindFirstChild="(AnimationController,string,boolean)=>(any)",
    FindFirstChildOfClass="(AnimationController,string)=>(any)",
    FindFirstChildWhichIsA="(AnimationController,string,boolean)=>(any)",
    GetAttribute="(AnimationController,string)=>(any)",
    GetAttributeChangedSignal="(AnimationController,string)=>(any)",
    GetAttributes="(AnimationController)=>(any)",
    GetChildren="(AnimationController)=>(any)",
    GetDebugId="(AnimationController,number)=>(string)",
    GetDescendants="(AnimationController)=>(any)",
    GetFullName="(AnimationController)=>(string)",
    GetPlayingAnimationTracks="(AnimationController)=>(any)",
    GetPropertyChangedSignal="(AnimationController,string)=>(any)",
    IsA="(AnimationController,string)=>(boolean)",
    IsAncestorOf="(AnimationController,any)=>(boolean)",
    IsDescendantOf="(AnimationController,any)=>(boolean)",
    LoadAnimation="(AnimationController,any)=>(any)",
    Name="string",
    Parent="any",
    Remove="(AnimationController)=>()",
    RobloxLocked="boolean",
    SetAttribute="(AnimationController,string,any)=>()",
    Tags="any",
    WaitForChild="(AnimationController,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(AnimationController)=>(any)",
    className="string",
    clone="(AnimationController)=>(any)",
    destroy="(AnimationController)=>()",
    findFirstChild="(AnimationController,string,boolean)=>(any)",
    getChildren="(AnimationController)=>(any)",
    isA="(AnimationController,string)=>(boolean)",
    isDescendantOf="(AnimationController,any)=>(boolean)",
    remove="(AnimationController)=>()"}


, UITableLayout={
    AbsoluteContentSize="Vector2",
    AncestryChanged="Event",
    ApplyLayout="(UITableLayout)=>()",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(UITableLayout)=>()",
    Clone="(UITableLayout)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(UITableLayout)=>()",
    FillDirection="any",
    FillEmptySpaceColumns="boolean",
    FillEmptySpaceRows="boolean",
    FindFirstAncestor="(UITableLayout,string)=>(any)",
    FindFirstAncestorOfClass="(UITableLayout,string)=>(any)",
    FindFirstAncestorWhichIsA="(UITableLayout,string)=>(any)",
    FindFirstChild="(UITableLayout,string,boolean)=>(any)",
    FindFirstChildOfClass="(UITableLayout,string)=>(any)",
    FindFirstChildWhichIsA="(UITableLayout,string,boolean)=>(any)",
    GetAttribute="(UITableLayout,string)=>(any)",
    GetAttributeChangedSignal="(UITableLayout,string)=>(any)",
    GetAttributes="(UITableLayout)=>(any)",
    GetChildren="(UITableLayout)=>(any)",
    GetDebugId="(UITableLayout,number)=>(string)",
    GetDescendants="(UITableLayout)=>(any)",
    GetFullName="(UITableLayout)=>(string)",
    GetPropertyChangedSignal="(UITableLayout,string)=>(any)",
    HorizontalAlignment="any",
    IsA="(UITableLayout,string)=>(boolean)",
    IsAncestorOf="(UITableLayout,any)=>(boolean)",
    IsDescendantOf="(UITableLayout,any)=>(boolean)",
    MajorAxis="any",
    Name="string",
    Padding="UDim2",
    Parent="any",
    Remove="(UITableLayout)=>()",
    RobloxLocked="boolean",
    SetAttribute="(UITableLayout,string,any)=>()",
    SetCustomSortFunction="(UITableLayout,any)=>()",
    SortOrder="any",
    Tags="any",
    VerticalAlignment="any",
    WaitForChild="(UITableLayout,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(UITableLayout)=>(any)",
    className="string",
    clone="(UITableLayout)=>(any)",
    destroy="(UITableLayout)=>()",
    findFirstChild="(UITableLayout,string,boolean)=>(any)",
    getChildren="(UITableLayout)=>(any)",
    isA="(UITableLayout,string)=>(boolean)",
    isDescendantOf="(UITableLayout,any)=>(boolean)",
    remove="(UITableLayout)=>()"}


, Accoutrement={
    AncestryChanged="Event",
    Archivable="boolean",
    AttachmentForward="Vector3",
    AttachmentPoint="CFrame",
    AttachmentPos="Vector3",
    AttachmentRight="Vector3",
    AttachmentUp="Vector3",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BackendAccoutrementState="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Accoutrement)=>()",
    Clone="(Accoutrement)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Accoutrement)=>()",
    FindFirstAncestor="(Accoutrement,string)=>(any)",
    FindFirstAncestorOfClass="(Accoutrement,string)=>(any)",
    FindFirstAncestorWhichIsA="(Accoutrement,string)=>(any)",
    FindFirstChild="(Accoutrement,string,boolean)=>(any)",
    FindFirstChildOfClass="(Accoutrement,string)=>(any)",
    FindFirstChildWhichIsA="(Accoutrement,string,boolean)=>(any)",
    GetAttribute="(Accoutrement,string)=>(any)",
    GetAttributeChangedSignal="(Accoutrement,string)=>(any)",
    GetAttributes="(Accoutrement)=>(any)",
    GetChildren="(Accoutrement)=>(any)",
    GetDebugId="(Accoutrement,number)=>(string)",
    GetDescendants="(Accoutrement)=>(any)",
    GetFullName="(Accoutrement)=>(string)",
    GetPropertyChangedSignal="(Accoutrement,string)=>(any)",
    IsA="(Accoutrement,string)=>(boolean)",
    IsAncestorOf="(Accoutrement,any)=>(boolean)",
    IsDescendantOf="(Accoutrement,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Accoutrement)=>()",
    RobloxLocked="boolean",
    ServerEquipAccoutrement="Event",
    ServerUnequipAccoutrement="Event",
    SetAttribute="(Accoutrement,string,any)=>()",
    Tags="any",
    WaitForChild="(Accoutrement,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Accoutrement)=>(any)",
    className="string",
    clone="(Accoutrement)=>(any)",
    destroy="(Accoutrement)=>()",
    findFirstChild="(Accoutrement,string,boolean)=>(any)",
    getChildren="(Accoutrement)=>(any)",
    isA="(Accoutrement,string)=>(boolean)",
    isDescendantOf="(Accoutrement,any)=>(boolean)",
    remove="(Accoutrement)=>()"}


, SlidingBallConstraint={
    Active="boolean",
    Actuator,="any",
    AncestryChanged="Event",
    Archivable="boolean",
    Attachment0="any",
    Attachment1="any",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SlidingBallConstraint)=>()",
    Clone="(SlidingBallConstraint)=>(any)",
    Color="any",
    CurrentPosition="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SlidingBallConstraint)=>()",
    Enabled="boolean",
    FindFirstAncestor="(SlidingBallConstraint,string)=>(any)",
    FindFirstAncestorOfClass="(SlidingBallConstraint,string)=>(any)",
    FindFirstAncestorWhichIsA="(SlidingBallConstraint,string)=>(any)",
    FindFirstChild="(SlidingBallConstraint,string,boolean)=>(any)",
    FindFirstChildOfClass="(SlidingBallConstraint,string)=>(any)",
    FindFirstChildWhichIsA="(SlidingBallConstraint,string,boolean)=>(any)",
    GetAttribute="(SlidingBallConstraint,string)=>(any)",
    GetAttributeChangedSignal="(SlidingBallConstraint,string)=>(any)",
    GetAttributes="(SlidingBallConstraint)=>(any)",
    GetChildren="(SlidingBallConstraint)=>(any)",
    GetDebugId="(SlidingBallConstraint,number)=>(string)",
    GetDescendants="(SlidingBallConstraint)=>(any)",
    GetFullName="(SlidingBallConstraint)=>(string)",
    GetPropertyChangedSignal="(SlidingBallConstraint,string)=>(any)",
    IsA="(SlidingBallConstraint,string)=>(boolean)",
    IsAncestorOf="(SlidingBallConstraint,any)=>(boolean)",
    IsDescendantOf="(SlidingBallConstraint,any)=>(boolean)",
    LimitsEnabled="boolean",
    LowerLimit="number",
    MotorMaxAcceleration="number",
    MotorMaxForce="number",
    Name="string",
    Parent="any",
    Remove="(SlidingBallConstraint)=>()",
    Restitution="number",
    RobloxLocked="boolean",
    ServoMaxForce="number",
    SetAttribute="(SlidingBallConstraint,string,any)=>()",
    Size="number",
    Speed="number",
    Tags="any",
    TargetPosition="number",
    UpperLimit="number",
    Velocity="number",
    Visible="boolean",
    WaitForChild="(SlidingBallConstraint,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(SlidingBallConstraint)=>(any)",
    className="string",
    clone="(SlidingBallConstraint)=>(any)",
    destroy="(SlidingBallConstraint)=>()",
    findFirstChild="(SlidingBallConstraint,string,boolean)=>(any)",
    getChildren="(SlidingBallConstraint)=>(any)",
    isA="(SlidingBallConstraint,string)=>(boolean)",
    isDescendantOf="(SlidingBallConstraint,any)=>(boolean)",
    remove="(SlidingBallConstraint)=>()"}


, PhysicsSettings={
    AllowSleep="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AreAnchorsShown="boolean",
    AreAssembliesShown="boolean",
    AreAwakePartsHighlighted="boolean",
    AreBody,sShown="boolean",
    AreContactIslandsShown="boolean",
    AreContactPointsShown="boolean",
    AreJointCoordinatesShown="boolean",
    AreMechanismsShown="boolean",
    AreModelCoordsShown="boolean",
    AreOwnersShown="boolean",
    ArePartCoordsShown="boolean",
    AreRegionsShown="boolean",
    AreTerrainReplicationRegionsShown="boolean",
    AreUnalignedPartsShown="boolean",
    AreWorldCoordsShown="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PhysicsSettings)=>()",
    Clone="(PhysicsSettings)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PhysicsSettings)=>()",
    DisableCSGv2="boolean",
    FindFirstAncestor="(PhysicsSettings,string)=>(any)",
    FindFirstAncestorOfClass="(PhysicsSettings,string)=>(any)",
    FindFirstAncestorWhichIsA="(PhysicsSettings,string)=>(any)",
    FindFirstChild="(PhysicsSettings,string,boolean)=>(any)",
    FindFirstChildOfClass="(PhysicsSettings,string)=>(any)",
    FindFirstChildWhichIsA="(PhysicsSettings,string,boolean)=>(any)",
    GetAttribute="(PhysicsSettings,string)=>(any)",
    GetAttributeChangedSignal="(PhysicsSettings,string)=>(any)",
    GetAttributes="(PhysicsSettings)=>(any)",
    GetChildren="(PhysicsSettings)=>(any)",
    GetDebugId="(PhysicsSettings,number)=>(string)",
    GetDescendants="(PhysicsSettings)=>(any)",
    GetFullName="(PhysicsSettings)=>(string)",
    GetPropertyChangedSignal="(PhysicsSettings,string)=>(any)",
    IsA="(PhysicsSettings,string)=>(boolean)",
    IsAncestorOf="(PhysicsSettings,any)=>(boolean)",
    IsDescendantOf="(PhysicsSettings,any)=>(boolean)",
    IsReceiveAgeShown="boolean",
    IsTreeShown="boolean",
    Name="string",
    Parent="any",
    PhysicsEnvironmentalThrottle="any",
    Remove="(PhysicsSettings)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PhysicsSettings,string,any)=>()",
    ShowDecompositionGeometry="boolean",
    Tags="any",
    ThrottleAdjustTime="number",
    UseCSGv2="boolean",
    WaitForChild="(PhysicsSettings,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PhysicsSettings)=>(any)",
    className="string",
    clone="(PhysicsSettings)=>(any)",
    destroy="(PhysicsSettings)=>()",
    findFirstChild="(PhysicsSettings,string,boolean)=>(any)",
    getChildren="(PhysicsSettings)=>(any)",
    isA="(PhysicsSettings,string)=>(boolean)",
    isDescendantOf="(PhysicsSettings,any)=>(boolean)",
    remove="(PhysicsSettings)=>()"}


, Rect={
    Height="number",
    Max="Vector2",
    Min="Vector2",
    Width="number"}


, Vector3Value={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Vector3Value)=>()",
    Clone="(Vector3Value)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Vector3Value)=>()",
    FindFirstAncestor="(Vector3Value,string)=>(any)",
    FindFirstAncestorOfClass="(Vector3Value,string)=>(any)",
    FindFirstAncestorWhichIsA="(Vector3Value,string)=>(any)",
    FindFirstChild="(Vector3Value,string,boolean)=>(any)",
    FindFirstChildOfClass="(Vector3Value,string)=>(any)",
    FindFirstChildWhichIsA="(Vector3Value,string,boolean)=>(any)",
    GetAttribute="(Vector3Value,string)=>(any)",
    GetAttributeChangedSignal="(Vector3Value,string)=>(any)",
    GetAttributes="(Vector3Value)=>(any)",
    GetChildren="(Vector3Value)=>(any)",
    GetDebugId="(Vector3Value,number)=>(string)",
    GetDescendants="(Vector3Value)=>(any)",
    GetFullName="(Vector3Value)=>(string)",
    GetPropertyChangedSignal="(Vector3Value,string)=>(any)",
    IsA="(Vector3Value,string)=>(boolean)",
    IsAncestorOf="(Vector3Value,any)=>(boolean)",
    IsDescendantOf="(Vector3Value,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Vector3Value)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Vector3Value,string,any)=>()",
    Tags="any",
    Value="Vector3",
    WaitForChild="(Vector3Value,string,number)=>(any)",
    archivable="boolean",
    changed="Event",
    childAdded="Event",
    children="(Vector3Value)=>(any)",
    className="string",
    clone="(Vector3Value)=>(any)",
    destroy="(Vector3Value)=>()",
    findFirstChild="(Vector3Value,string,boolean)=>(any)",
    getChildren="(Vector3Value)=>(any)",
    isA="(Vector3Value,string)=>(boolean)",
    isDescendantOf="(Vector3Value,any)=>(boolean)",
    remove="(Vector3Value)=>()"}


, NetworkReplicator={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(NetworkReplicator)=>()",
    Clone="(NetworkReplicator)=>(any)",
    CloseConnection="(NetworkReplicator)=>()",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(NetworkReplicator)=>()",
    FindFirstAncestor="(NetworkReplicator,string)=>(any)",
    FindFirstAncestorOfClass="(NetworkReplicator,string)=>(any)",
    FindFirstAncestorWhichIsA="(NetworkReplicator,string)=>(any)",
    FindFirstChild="(NetworkReplicator,string,boolean)=>(any)",
    FindFirstChildOfClass="(NetworkReplicator,string)=>(any)",
    FindFirstChildWhichIsA="(NetworkReplicator,string,boolean)=>(any)",
    GetAttribute="(NetworkReplicator,string)=>(any)",
    GetAttributeChangedSignal="(NetworkReplicator,string)=>(any)",
    GetAttributes="(NetworkReplicator)=>(any)",
    GetChildren="(NetworkReplicator)=>(any)",
    GetDebugId="(NetworkReplicator,number)=>(string)",
    GetDescendants="(NetworkReplicator)=>(any)",
    GetFullName="(NetworkReplicator)=>(string)",
    GetPlayer="(NetworkReplicator)=>(any)",
    GetPropertyChangedSignal="(NetworkReplicator,string)=>(any)",
    GetRakStatsString="(NetworkReplicator,number)=>(string)",
    IsA="(NetworkReplicator,string)=>(boolean)",
    IsAncestorOf="(NetworkReplicator,any)=>(boolean)",
    IsDescendantOf="(NetworkReplicator,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(NetworkReplicator)=>()",
    RobloxLocked="boolean",
    SetAttribute="(NetworkReplicator,string,any)=>()",
    Tags="any",
    WaitForChild="(NetworkReplicator,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(NetworkReplicator)=>(any)",
    className="string",
    clone="(NetworkReplicator)=>(any)",
    destroy="(NetworkReplicator)=>()",
    findFirstChild="(NetworkReplicator,string,boolean)=>(any)",
    getChildren="(NetworkReplicator)=>(any)",
    isA="(NetworkReplicator,string)=>(boolean)",
    isDescendantOf="(NetworkReplicator,any)=>(boolean)",
    remove="(NetworkReplicator)=>()"}


, TweenInfo={
    new="(number?,EnumItem?,EnumItem?,number?,boolean?,number?)=>({DelayTime="number,EasingDirection="number,EasingStyle="number,RepeatCount="number,Reverses="boolean,Time="number})"}


, BallSocketConstraint={
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    Attachment0="any",
    Attachment1="any",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BallSocketConstraint)=>()",
    Clone="(BallSocketConstraint)=>(any)",
    Color="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BallSocketConstraint)=>()",
    Enabled="boolean",
    FindFirstAncestor="(BallSocketConstraint,string)=>(any)",
    FindFirstAncestorOfClass="(BallSocketConstraint,string)=>(any)",
    FindFirstAncestorWhichIsA="(BallSocketConstraint,string)=>(any)",
    FindFirstChild="(BallSocketConstraint,string,boolean)=>(any)",
    FindFirstChildOfClass="(BallSocketConstraint,string)=>(any)",
    FindFirstChildWhichIsA="(BallSocketConstraint,string,boolean)=>(any)",
    GetAttribute="(BallSocketConstraint,string)=>(any)",
    GetAttributeChangedSignal="(BallSocketConstraint,string)=>(any)",
    GetAttributes="(BallSocketConstraint)=>(any)",
    GetChildren="(BallSocketConstraint)=>(any)",
    GetDebugId="(BallSocketConstraint,number)=>(string)",
    GetDescendants="(BallSocketConstraint)=>(any)",
    GetFullName="(BallSocketConstraint)=>(string)",
    GetPropertyChangedSignal="(BallSocketConstraint,string)=>(any)",
    IsA="(BallSocketConstraint,string)=>(boolean)",
    IsAncestorOf="(BallSocketConstraint,any)=>(boolean)",
    IsDescendantOf="(BallSocketConstraint,any)=>(boolean)",
    LimitsEnabled="boolean",
    Name="string",
    Parent="any",
    Radius="number",
    Remove="(BallSocketConstraint)=>()",
    Restitution="number",
    RobloxLocked="boolean",
    SetAttribute="(BallSocketConstraint,string,any)=>()",
    Tags="any",
    TwistLimitsEnabled="boolean",
    TwistLowerAngle="number",
    TwistUpperAngle="number",
    UpperAngle="number",
    Visible="boolean",
    WaitForChild="(BallSocketConstraint,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(BallSocketConstraint)=>(any)",
    className="string",
    clone="(BallSocketConstraint)=>(any)",
    destroy="(BallSocketConstraint)=>()",
    findFirstChild="(BallSocketConstraint,string,boolean)=>(any)",
    getChildren="(BallSocketConstraint)=>(any)",
    isA="(BallSocketConstraint,string)=>(boolean)",
    isDescendantOf="(BallSocketConstraint,any)=>(boolean)",
    remove="(BallSocketConstraint)=>()"}


, Region3={
    ExpandToGrid="({CFrame="CFrame,Size="Vector3},number)=>(Region3)",
    new="(Vector3,Vector3)=>(Region3)"}


, Faces={
    Back="boolean",
    Bottom="boolean",
    Front="boolean",
    Left="boolean",
    Right="boolean",
    Top="boolean"}


, Geometry={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Geometry)=>()",
    Clone="(Geometry)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Geometry)=>()",
    FindFirstAncestor="(Geometry,string)=>(any)",
    FindFirstAncestorOfClass="(Geometry,string)=>(any)",
    FindFirstAncestorWhichIsA="(Geometry,string)=>(any)",
    FindFirstChild="(Geometry,string,boolean)=>(any)",
    FindFirstChildOfClass="(Geometry,string)=>(any)",
    FindFirstChildWhichIsA="(Geometry,string,boolean)=>(any)",
    GetAttribute="(Geometry,string)=>(any)",
    GetAttributeChangedSignal="(Geometry,string)=>(any)",
    GetAttributes="(Geometry)=>(any)",
    GetChildren="(Geometry)=>(any)",
    GetDebugId="(Geometry,number)=>(string)",
    GetDescendants="(Geometry)=>(any)",
    GetFullName="(Geometry)=>(string)",
    GetPropertyChangedSignal="(Geometry,string)=>(any)",
    IsA="(Geometry,string)=>(boolean)",
    IsAncestorOf="(Geometry,any)=>(boolean)",
    IsDescendantOf="(Geometry,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Geometry)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Geometry,string,any)=>()",
    Tags="any",
    WaitForChild="(Geometry,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Geometry)=>(any)",
    className="string",
    clone="(Geometry)=>(any)",
    destroy="(Geometry)=>()",
    findFirstChild="(Geometry,string,boolean)=>(any)",
    getChildren="(Geometry)=>(any)",
    isA="(Geometry,string)=>(boolean)",
    isDescendantOf="(Geometry,any)=>(boolean)",
    remove="(Geometry)=>()"}


, GamePassService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(GamePassService)=>()",
    Clone="(GamePassService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(GamePassService)=>()",
    FindFirstAncestor="(GamePassService,string)=>(any)",
    FindFirstAncestorOfClass="(GamePassService,string)=>(any)",
    FindFirstAncestorWhichIsA="(GamePassService,string)=>(any)",
    FindFirstChild="(GamePassService,string,boolean)=>(any)",
    FindFirstChildOfClass="(GamePassService,string)=>(any)",
    FindFirstChildWhichIsA="(GamePassService,string,boolean)=>(any)",
    GetAttribute="(GamePassService,string)=>(any)",
    GetAttributeChangedSignal="(GamePassService,string)=>(any)",
    GetAttributes="(GamePassService)=>(any)",
    GetChildren="(GamePassService)=>(any)",
    GetDebugId="(GamePassService,number)=>(string)",
    GetDescendants="(GamePassService)=>(any)",
    GetFullName="(GamePassService)=>(string)",
    GetPropertyChangedSignal="(GamePassService,string)=>(any)",
    IsA="(GamePassService,string)=>(boolean)",
    IsAncestorOf="(GamePassService,any)=>(boolean)",
    IsDescendantOf="(GamePassService,any)=>(boolean)",
    Name="string",
    Parent="any",
    PlayerHasPass="(GamePassService,any,number)=>(boolean)",
    Remove="(GamePassService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(GamePassService,string,any)=>()",
    Tags="any",
    WaitForChild="(GamePassService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(GamePassService)=>(any)",
    className="string",
    clone="(GamePassService)=>(any)",
    destroy="(GamePassService)=>()",
    findFirstChild="(GamePassService,string,boolean)=>(any)",
    getChildren="(GamePassService)=>(any)",
    isA="(GamePassService,string)=>(boolean)",
    isDescendantOf="(GamePassService,any)=>(boolean)",
    remove="(GamePassService)=>()"}


, ABTestService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ABTestService)=>()",
    ClearUserVariations="(ABTestService)=>()",
    Clone="(ABTestService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ABTestService)=>()",
    FindFirstAncestor="(ABTestService,string)=>(any)",
    FindFirstAncestorOfClass="(ABTestService,string)=>(any)",
    FindFirstAncestorWhichIsA="(ABTestService,string)=>(any)",
    FindFirstChild="(ABTestService,string,boolean)=>(any)",
    FindFirstChildOfClass="(ABTestService,string)=>(any)",
    FindFirstChildWhichIsA="(ABTestService,string,boolean)=>(any)",
    GetAttribute="(ABTestService,string)=>(any)",
    GetAttributeChangedSignal="(ABTestService,string)=>(any)",
    GetAttributes="(ABTestService)=>(any)",
    GetChildren="(ABTestService)=>(any)",
    GetDebugId="(ABTestService,number)=>(string)",
    GetDescendants="(ABTestService)=>(any)",
    GetFullName="(ABTestService)=>(string)",
    GetPropertyChangedSignal="(ABTestService,string)=>(any)",
    GetVariant="(ABTestService,string)=>(string)",
    InitializeForUserId="(ABTestService,number)=>()",
    IsA="(ABTestService,string)=>(boolean)",
    IsAncestorOf="(ABTestService,any)=>(boolean)",
    IsDescendantOf="(ABTestService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(ABTestService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ABTestService,string,any)=>()",
    Tags="any",
    WaitForChild="(ABTestService,string,number)=>(any)",
    WaitUntilBrowserTrackerABTestsInitialized="(ABTestService)=>()",
    WaitUntilUserABTestsInitialized="(ABTestService)=>()",
    archivable="boolean",
    childAdded="Event",
    children="(ABTestService)=>(any)",
    className="string",
    clone="(ABTestService)=>(any)",
    destroy="(ABTestService)=>()",
    findFirstChild="(ABTestService,string,boolean)=>(any)",
    getChildren="(ABTestService)=>(any)",
    isA="(ABTestService,string)=>(boolean)",
    isDescendantOf="(ABTestService,any)=>(boolean)",
    remove="(ABTestService)=>()"}


, AlignPosition={
    Active="boolean",
    AncestryChanged="Event",
    ApplyAtCenterOfMass="boolean",
    Archivable="boolean",
    Attachment0="any",
    Attachment1="any",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(AlignPosition)=>()",
    Clone="(AlignPosition)=>(any)",
    Color="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(AlignPosition)=>()",
    Enabled="boolean",
    FindFirstAncestor="(AlignPosition,string)=>(any)",
    FindFirstAncestorOfClass="(AlignPosition,string)=>(any)",
    FindFirstAncestorWhichIsA="(AlignPosition,string)=>(any)",
    FindFirstChild="(AlignPosition,string,boolean)=>(any)",
    FindFirstChildOfClass="(AlignPosition,string)=>(any)",
    FindFirstChildWhichIsA="(AlignPosition,string,boolean)=>(any)",
    GetAttribute="(AlignPosition,string)=>(any)",
    GetAttributeChangedSignal="(AlignPosition,string)=>(any)",
    GetAttributes="(AlignPosition)=>(any)",
    GetChildren="(AlignPosition)=>(any)",
    GetDebugId="(AlignPosition,number)=>(string)",
    GetDescendants="(AlignPosition)=>(any)",
    GetFullName="(AlignPosition)=>(string)",
    GetPropertyChangedSignal="(AlignPosition,string)=>(any)",
    IsA="(AlignPosition,string)=>(boolean)",
    IsAncestorOf="(AlignPosition,any)=>(boolean)",
    IsDescendantOf="(AlignPosition,any)=>(boolean)",
    MaxForce="number",
    MaxVelocity="number",
    Name="string",
    Parent="any",
    ReactionForceEnabled="boolean",
    Remove="(AlignPosition)=>()",
    Responsiveness="number",
    RigidityEnabled="boolean",
    RobloxLocked="boolean",
    SetAttribute="(AlignPosition,string,any)=>()",
    Tags="any",
    Visible="boolean",
    WaitForChild="(AlignPosition,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(AlignPosition)=>(any)",
    className="string",
    clone="(AlignPosition)=>(any)",
    destroy="(AlignPosition)=>()",
    findFirstChild="(AlignPosition,string,boolean)=>(any)",
    getChildren="(AlignPosition)=>(any)",
    isA="(AlignPosition,string)=>(boolean)",
    isDescendantOf="(AlignPosition,any)=>(boolean)",
    remove="(AlignPosition)=>()"}


, SocialService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CanSendGameInviteAsync="(SocialService,any)=>(boolean)",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SocialService)=>()",
    Clone="(SocialService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SocialService)=>()",
    FindFirstAncestor="(SocialService,string)=>(any)",
    FindFirstAncestorOfClass="(SocialService,string)=>(any)",
    FindFirstAncestorWhichIsA="(SocialService,string)=>(any)",
    FindFirstChild="(SocialService,string,boolean)=>(any)",
    FindFirstChildOfClass="(SocialService,string)=>(any)",
    FindFirstChildWhichIsA="(SocialService,string,boolean)=>(any)",
    GameInvitePromptClosed="Event",
    GetAttribute="(SocialService,string)=>(any)",
    GetAttributeChangedSignal="(SocialService,string)=>(any)",
    GetAttributes="(SocialService)=>(any)",
    GetChildren="(SocialService)=>(any)",
    GetDebugId="(SocialService,number)=>(string)",
    GetDescendants="(SocialService)=>(any)",
    GetFullName="(SocialService)=>(string)",
    GetPropertyChangedSignal="(SocialService,string)=>(any)",
    InvokeGameInvitePromptClosed="(SocialService,any,any)=>()",
    IsA="(SocialService,string)=>(boolean)",
    IsAncestorOf="(SocialService,any)=>(boolean)",
    IsDescendantOf="(SocialService,any)=>(boolean)",
    Name="string",
    Parent="any",
    PromptGameInvite="(SocialService,any)=>()",
    PromptInviteRequested="Event",
    Remove="(SocialService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(SocialService,string,any)=>()",
    Tags="any",
    WaitForChild="(SocialService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(SocialService)=>(any)",
    className="string",
    clone="(SocialService)=>(any)",
    destroy="(SocialService)=>()",
    findFirstChild="(SocialService,string,boolean)=>(any)",
    getChildren="(SocialService)=>(any)",
    isA="(SocialService,string)=>(boolean)",
    isDescendantOf="(SocialService,any)=>(boolean)",
    remove="(SocialService)=>()"}


, NoCollisionConstraint={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(NoCollisionConstraint)=>()",
    Clone="(NoCollisionConstraint)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(NoCollisionConstraint)=>()",
    Enabled="boolean",
    FindFirstAncestor="(NoCollisionConstraint,string)=>(any)",
    FindFirstAncestorOfClass="(NoCollisionConstraint,string)=>(any)",
    FindFirstAncestorWhichIsA="(NoCollisionConstraint,string)=>(any)",
    FindFirstChild="(NoCollisionConstraint,string,boolean)=>(any)",
    FindFirstChildOfClass="(NoCollisionConstraint,string)=>(any)",
    FindFirstChildWhichIsA="(NoCollisionConstraint,string,boolean)=>(any)",
    GetAttribute="(NoCollisionConstraint,string)=>(any)",
    GetAttributeChangedSignal="(NoCollisionConstraint,string)=>(any)",
    GetAttributes="(NoCollisionConstraint)=>(any)",
    GetChildren="(NoCollisionConstraint)=>(any)",
    GetDebugId="(NoCollisionConstraint,number)=>(string)",
    GetDescendants="(NoCollisionConstraint)=>(any)",
    GetFullName="(NoCollisionConstraint)=>(string)",
    GetPropertyChangedSignal="(NoCollisionConstraint,string)=>(any)",
    IsA="(NoCollisionConstraint,string)=>(boolean)",
    IsAncestorOf="(NoCollisionConstraint,any)=>(boolean)",
    IsDescendantOf="(NoCollisionConstraint,any)=>(boolean)",
    Name="string",
    Parent="any",
    Part0="any",
    Part1="any",
    Remove="(NoCollisionConstraint)=>()",
    RobloxLocked="boolean",
    SetAttribute="(NoCollisionConstraint,string,any)=>()",
    Tags="any",
    WaitForChild="(NoCollisionConstraint,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(NoCollisionConstraint)=>(any)",
    className="string",
    clone="(NoCollisionConstraint)=>(any)",
    destroy="(NoCollisionConstraint)=>()",
    findFirstChild="(NoCollisionConstraint,string,boolean)=>(any)",
    getChildren="(NoCollisionConstraint)=>(any)",
    isA="(NoCollisionConstraint,string)=>(boolean)",
    isDescendantOf="(NoCollisionConstraint,any)=>(boolean)",
    remove="(NoCollisionConstraint)=>()"}


, Accessory={
    AncestryChanged="Event",
    Archivable="boolean",
    AttachmentForward="Vector3",
    AttachmentPoint="CFrame",
    AttachmentPos="Vector3",
    AttachmentRight="Vector3",
    AttachmentUp="Vector3",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BackendAccoutrementState="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Accessory)=>()",
    Clone="(Accessory)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Accessory)=>()",
    FindFirstAncestor="(Accessory,string)=>(any)",
    FindFirstAncestorOfClass="(Accessory,string)=>(any)",
    FindFirstAncestorWhichIsA="(Accessory,string)=>(any)",
    FindFirstChild="(Accessory,string,boolean)=>(any)",
    FindFirstChildOfClass="(Accessory,string)=>(any)",
    FindFirstChildWhichIsA="(Accessory,string,boolean)=>(any)",
    GetAttribute="(Accessory,string)=>(any)",
    GetAttributeChangedSignal="(Accessory,string)=>(any)",
    GetAttributes="(Accessory)=>(any)",
    GetChildren="(Accessory)=>(any)",
    GetDebugId="(Accessory,number)=>(string)",
    GetDescendants="(Accessory)=>(any)",
    GetFullName="(Accessory)=>(string)",
    GetPropertyChangedSignal="(Accessory,string)=>(any)",
    IsA="(Accessory,string)=>(boolean)",
    IsAncestorOf="(Accessory,any)=>(boolean)",
    IsDescendantOf="(Accessory,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Accessory)=>()",
    RobloxLocked="boolean",
    ServerEquipAccoutrement="Event",
    ServerUnequipAccoutrement="Event",
    SetAttribute="(Accessory,string,any)=>()",
    Tags="any",
    WaitForChild="(Accessory,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Accessory)=>(any)",
    className="string",
    clone="(Accessory)=>(any)",
    destroy="(Accessory)=>()",
    findFirstChild="(Accessory,string,boolean)=>(any)",
    getChildren="(Accessory)=>(any)",
    isA="(Accessory,string)=>(boolean)",
    isDescendantOf="(Accessory,any)=>(boolean)",
    remove="(Accessory)=>()"}


, BaseScript={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CachedRemoteSource="any",
    CachedRemoteSourceLoadState="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BaseScript)=>()",
    Clone="(BaseScript)=>(any)",
    CurrentEditor="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BaseScript)=>()",
    Disabled="boolean",
    FindFirstAncestor="(BaseScript,string)=>(any)",
    FindFirstAncestorOfClass="(BaseScript,string)=>(any)",
    FindFirstAncestorWhichIsA="(BaseScript,string)=>(any)",
    FindFirstChild="(BaseScript,string,boolean)=>(any)",
    FindFirstChildOfClass="(BaseScript,string)=>(any)",
    FindFirstChildWhichIsA="(BaseScript,string,boolean)=>(any)",
    GetAttribute="(BaseScript,string)=>(any)",
    GetAttributeChangedSignal="(BaseScript,string)=>(any)",
    GetAttributes="(BaseScript)=>(any)",
    GetChildren="(BaseScript)=>(any)",
    GetDebugId="(BaseScript,number)=>(string)",
    GetDescendants="(BaseScript)=>(any)",
    GetFullName="(BaseScript)=>(string)",
    GetPropertyChangedSignal="(BaseScript,string)=>(any)",
    HasAssociatedDrafts="boolean",
    IsA="(BaseScript,string)=>(boolean)",
    IsAncestorOf="(BaseScript,any)=>(boolean)",
    IsDescendantOf="(BaseScript,any)=>(boolean)",
    LinkedSource="any",
    LockGrantedOrNot="Event",
    LostLock="Event",
    Name="string",
    Parent="any",
    Remove="(BaseScript)=>()",
    RequestLock="Event",
    RequestScriptHash="Event",
    RobloxLocked="boolean",
    SandboxedSource="any",
    ScriptGuid="string",
    SetAttribute="(BaseScript,string,any)=>()",
    Tags="any",
    VerifyScriptHash="Event",
    WaitForChild="(BaseScript,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(BaseScript)=>(any)",
    className="string",
    clone="(BaseScript)=>(any)",
    destroy="(BaseScript)=>()",
    findFirstChild="(BaseScript,string,boolean)=>(any)",
    getChildren="(BaseScript)=>(any)",
    isA="(BaseScript,string)=>(boolean)",
    isDescendantOf="(BaseScript,any)=>(boolean)",
    remove="(BaseScript)=>()"}


, Backpack={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Backpack)=>()",
    Clone="(Backpack)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Backpack)=>()",
    FindFirstAncestor="(Backpack,string)=>(any)",
    FindFirstAncestorOfClass="(Backpack,string)=>(any)",
    FindFirstAncestorWhichIsA="(Backpack,string)=>(any)",
    FindFirstChild="(Backpack,string,boolean)=>(any)",
    FindFirstChildOfClass="(Backpack,string)=>(any)",
    FindFirstChildWhichIsA="(Backpack,string,boolean)=>(any)",
    GetAttribute="(Backpack,string)=>(any)",
    GetAttributeChangedSignal="(Backpack,string)=>(any)",
    GetAttributes="(Backpack)=>(any)",
    GetChildren="(Backpack)=>(any)",
    GetDebugId="(Backpack,number)=>(string)",
    GetDescendants="(Backpack)=>(any)",
    GetFullName="(Backpack)=>(string)",
    GetPropertyChangedSignal="(Backpack,string)=>(any)",
    IsA="(Backpack,string)=>(boolean)",
    IsAncestorOf="(Backpack,any)=>(boolean)",
    IsDescendantOf="(Backpack,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Backpack)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Backpack,string,any)=>()",
    Tags="any",
    WaitForChild="(Backpack,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Backpack)=>(any)",
    className="string",
    clone="(Backpack)=>(any)",
    destroy="(Backpack)=>()",
    findFirstChild="(Backpack,string,boolean)=>(any)",
    getChildren="(Backpack)=>(any)",
    isA="(Backpack,string)=>(boolean)",
    isDescendantOf="(Backpack,any)=>(boolean)",
    remove="(Backpack)=>()"}


, SpringConstraint={
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    Attachment0="any",
    Attachment1="any",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SpringConstraint)=>()",
    Clone="(SpringConstraint)=>(any)",
    Coils="number",
    Color="any",
    CurrentLength="number",
    Damping="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SpringConstraint)=>()",
    Enabled="boolean",
    FindFirstAncestor="(SpringConstraint,string)=>(any)",
    FindFirstAncestorOfClass="(SpringConstraint,string)=>(any)",
    FindFirstAncestorWhichIsA="(SpringConstraint,string)=>(any)",
    FindFirstChild="(SpringConstraint,string,boolean)=>(any)",
    FindFirstChildOfClass="(SpringConstraint,string)=>(any)",
    FindFirstChildWhichIsA="(SpringConstraint,string,boolean)=>(any)",
    FreeLength="number",
    GetAttribute="(SpringConstraint,string)=>(any)",
    GetAttributeChangedSignal="(SpringConstraint,string)=>(any)",
    GetAttributes="(SpringConstraint)=>(any)",
    GetChildren="(SpringConstraint)=>(any)",
    GetDebugId="(SpringConstraint,number)=>(string)",
    GetDescendants="(SpringConstraint)=>(any)",
    GetFullName="(SpringConstraint)=>(string)",
    GetPropertyChangedSignal="(SpringConstraint,string)=>(any)",
    IsA="(SpringConstraint,string)=>(boolean)",
    IsAncestorOf="(SpringConstraint,any)=>(boolean)",
    IsDescendantOf="(SpringConstraint,any)=>(boolean)",
    LimitsEnabled="boolean",
    MaxForce="number",
    MaxLength="number",
    MinLength="number",
    Name="string",
    Parent="any",
    Radius="number",
    Remove="(SpringConstraint)=>()",
    RobloxLocked="boolean",
    SetAttribute="(SpringConstraint,string,any)=>()",
    Stiffness="number",
    Tags="any",
    Thickness="number",
    Visible="boolean",
    WaitForChild="(SpringConstraint,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(SpringConstraint)=>(any)",
    className="string",
    clone="(SpringConstraint)=>(any)",
    destroy="(SpringConstraint)=>()",
    findFirstChild="(SpringConstraint,string,boolean)=>(any)",
    getChildren="(SpringConstraint)=>(any)",
    isA="(SpringConstraint,string)=>(boolean)",
    isDescendantOf="(SpringConstraint,any)=>(boolean)",
    remove="(SpringConstraint)=>()"}


, AdService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(AdService)=>()",
    Clone="(AdService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(AdService)=>()",
    FindFirstAncestor="(AdService,string)=>(any)",
    FindFirstAncestorOfClass="(AdService,string)=>(any)",
    FindFirstAncestorWhichIsA="(AdService,string)=>(any)",
    FindFirstChild="(AdService,string,boolean)=>(any)",
    FindFirstChildOfClass="(AdService,string)=>(any)",
    FindFirstChildWhichIsA="(AdService,string,boolean)=>(any)",
    GetAttribute="(AdService,string)=>(any)",
    GetAttributeChangedSignal="(AdService,string)=>(any)",
    GetAttributes="(AdService)=>(any)",
    GetChildren="(AdService)=>(any)",
    GetDebugId="(AdService,number)=>(string)",
    GetDescendants="(AdService)=>(any)",
    GetFullName="(AdService)=>(string)",
    GetPropertyChangedSignal="(AdService,string)=>(any)",
    IsA="(AdService,string)=>(boolean)",
    IsAncestorOf="(AdService,any)=>(boolean)",
    IsDescendantOf="(AdService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(AdService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(AdService,string,any)=>()",
    ShowVideoAd="(AdService)=>()",
    Tags="any",
    VideoAdClosed="Event",
    WaitForChild="(AdService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(AdService)=>(any)",
    className="string",
    clone="(AdService)=>(any)",
    destroy="(AdService)=>()",
    findFirstChild="(AdService,string,boolean)=>(any)",
    getChildren="(AdService)=>(any)",
    isA="(AdService,string)=>(boolean)",
    isDescendantOf="(AdService,any)=>(boolean)",
    remove="(AdService)=>()"}


, AnalysticsSettings={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(AnalysticsSettings)=>()",
    Clone="(AnalysticsSettings)=>(any)",
    Close="Event",
    CloseLate="Event",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(AnalysticsSettings)=>()",
    FindFirstAncestor="(AnalysticsSettings,string)=>(any)",
    FindFirstAncestorOfClass="(AnalysticsSettings,string)=>(any)",
    FindFirstAncestorWhichIsA="(AnalysticsSettings,string)=>(any)",
    FindFirstChild="(AnalysticsSettings,string,boolean)=>(any)",
    FindFirstChildOfClass="(AnalysticsSettings,string)=>(any)",
    FindFirstChildWhichIsA="(AnalysticsSettings,string,boolean)=>(any)",
    FindService="(AnalysticsSettings,string)=>(any)",
    GetAttribute="(AnalysticsSettings,string)=>(any)",
    GetAttributeChangedSignal="(AnalysticsSettings,string)=>(any)",
    GetAttributes="(AnalysticsSettings)=>(any)",
    GetChildren="(AnalysticsSettings)=>(any)",
    GetDebugId="(AnalysticsSettings,number)=>(string)",
    GetDescendants="(AnalysticsSettings)=>(any)",
    GetFullName="(AnalysticsSettings)=>(string)",
    GetPropertyChangedSignal="(AnalysticsSettings,string)=>(any)",
    GetService="(AnalysticsSettings,string)=>(any)",
    IsA="(AnalysticsSettings,string)=>(boolean)",
    IsAncestorOf="(AnalysticsSettings,any)=>(boolean)",
    IsDescendantOf="(AnalysticsSettings,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(AnalysticsSettings)=>()",
    RobloxLocked="boolean",
    ServiceAdded="Event",
    ServiceRemoving="Event",
    SetAttribute="(AnalysticsSettings,string,any)=>()",
    Tags="any",
    WaitForChild="(AnalysticsSettings,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(AnalysticsSettings)=>(any)",
    className="string",
    clone="(AnalysticsSettings)=>(any)",
    destroy="(AnalysticsSettings)=>()",
    findFirstChild="(AnalysticsSettings,string,boolean)=>(any)",
    getChildren="(AnalysticsSettings)=>(any)",
    getService="(AnalysticsSettings,string)=>(any)",
    isA="(AnalysticsSettings,string)=>(boolean)",
    isDescendantOf="(AnalysticsSettings,any)=>(boolean)",
    remove="(AnalysticsSettings)=>()",
    service="(AnalysticsSettings,string)=>(any)"}


, RotateP={
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BaseAngle="number",
    C0="CFrame",
    C1="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(RotateP)=>()",
    Clone="(RotateP)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(RotateP)=>()",
    Enabled="boolean",
    FindFirstAncestor="(RotateP,string)=>(any)",
    FindFirstAncestorOfClass="(RotateP,string)=>(any)",
    FindFirstAncestorWhichIsA="(RotateP,string)=>(any)",
    FindFirstChild="(RotateP,string,boolean)=>(any)",
    FindFirstChildOfClass="(RotateP,string)=>(any)",
    FindFirstChildWhichIsA="(RotateP,string,boolean)=>(any)",
    GetAttribute="(RotateP,string)=>(any)",
    GetAttributeChangedSignal="(RotateP,string)=>(any)",
    GetAttributes="(RotateP)=>(any)",
    GetChildren="(RotateP)=>(any)",
    GetDebugId="(RotateP,number)=>(string)",
    GetDescendants="(RotateP)=>(any)",
    GetFullName="(RotateP)=>(string)",
    GetPropertyChangedSignal="(RotateP,string)=>(any)",
    IsA="(RotateP,string)=>(boolean)",
    IsAncestorOf="(RotateP,any)=>(boolean)",
    IsAutoJoint="boolean",
    IsDescendantOf="(RotateP,any)=>(boolean)",
    Name="string",
    Parent="any",
    Part0="any",
    Part1="any",
    Remove="(RotateP)=>()",
    RobloxLocked="boolean",
    SetAttribute="(RotateP,string,any)=>()",
    Tags="any",
    WaitForChild="(RotateP,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(RotateP)=>(any)",
    className="string",
    clone="(RotateP)=>(any)",
    destroy="(RotateP)=>()",
    findFirstChild="(RotateP,string,boolean)=>(any)",
    getChildren="(RotateP)=>(any)",
    isA="(RotateP,string)=>(boolean)",
    isDescendantOf="(RotateP,any)=>(boolean)",
    part1="any",
    remove="(RotateP)=>()"}


, BevelMesh={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Bevel="number",
    Bevel Roundness="number",
    Bulge="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BevelMesh)=>()",
    Clone="(BevelMesh)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BevelMesh)=>()",
    FindFirstAncestor="(BevelMesh,string)=>(any)",
    FindFirstAncestorOfClass="(BevelMesh,string)=>(any)",
    FindFirstAncestorWhichIsA="(BevelMesh,string)=>(any)",
    FindFirstChild="(BevelMesh,string,boolean)=>(any)",
    FindFirstChildOfClass="(BevelMesh,string)=>(any)",
    FindFirstChildWhichIsA="(BevelMesh,string,boolean)=>(any)",
    GetAttribute="(BevelMesh,string)=>(any)",
    GetAttributeChangedSignal="(BevelMesh,string)=>(any)",
    GetAttributes="(BevelMesh)=>(any)",
    GetChildren="(BevelMesh)=>(any)",
    GetDebugId="(BevelMesh,number)=>(string)",
    GetDescendants="(BevelMesh)=>(any)",
    GetFullName="(BevelMesh)=>(string)",
    GetPropertyChangedSignal="(BevelMesh,string)=>(any)",
    IsA="(BevelMesh,string)=>(boolean)",
    IsAncestorOf="(BevelMesh,any)=>(boolean)",
    IsDescendantOf="(BevelMesh,any)=>(boolean)",
    LODX="any",
    LODY="any",
    Name="string",
    Offset="Vector3",
    Parent="any",
    Remove="(BevelMesh)=>()",
    RobloxLocked="boolean",
    Scale="Vector3",
    SetAttribute="(BevelMesh,string,any)=>()",
    Tags="any",
    VertexColor="Vector3",
    WaitForChild="(BevelMesh,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(BevelMesh)=>(any)",
    className="string",
    clone="(BevelMesh)=>(any)",
    destroy="(BevelMesh)=>()",
    findFirstChild="(BevelMesh,string,boolean)=>(any)",
    getChildren="(BevelMesh)=>(any)",
    isA="(BevelMesh,string)=>(boolean)",
    isDescendantOf="(BevelMesh,any)=>(boolean)",
    remove="(BevelMesh)=>()"}


, Terrain={
    AncestryChanged="Event",
    Anchored="boolean",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutowedgeCell="(Terrain,number,number,number)=>(boolean)",
    AutowedgeCells="(Terrain,any)=>()",
    BackParamA="number",
    BackParamB="number",
    BackSurface="any",
    BackSurfaceInput="any",
    BottomParamA="number",
    BottomParamB="number",
    BottomSurface="any",
    BottomSurfaceInput="any",
    BreakJoints="(Terrain)=>()",
    BrickColor="any",
    CFrame="CFrame",
    CanCollide="boolean",
    CanCollideWith="(Terrain,any)=>(boolean)",
    CanSetNetworkOwnership="(Terrain)=>(any)",
    CastShadow="boolean",
    CellCenterToWorld="(Terrain,number,number,number)=>(Vector3)",
    CellCornerToWorld="(Terrain,number,number,number)=>(Vector3)",
    CenterOfMass="Vector3",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    Clear="(Terrain)=>()",
    ClearAllChildren="(Terrain)=>()",
    Clone="(Terrain)=>(any)",
    ClusterGrid="string",
    ClusterGridV2="string",
    ClusterGridV3="any",
    CollisionGroupId="number",
    Color="Color3",
    Color3uint8="any",
    ConvertToSmooth="(Terrain)=>()",
    CopyRegion="(Terrain,any)=>(any)",
    CountCells="(Terrain)=>(number)",
    CustomPhysicalProperties="any",
    DataCost="number",
    Decoration="boolean",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Terrain)=>()",
    DraggingV1="boolean",
    Elasticity="number",
    FillBall="(Terrain,Vector3,number,any)=>()",
    FillBlock="(Terrain,CFrame,Vector3,any)=>()",
    FillCylinder="(Terrain,CFrame,number,number,any)=>()",
    FillRegion="(Terrain,any,number,any)=>()",
    FindFirstAncestor="(Terrain,string)=>(any)",
    FindFirstAncestorOfClass="(Terrain,string)=>(any)",
    FindFirstAncestorWhichIsA="(Terrain,string)=>(any)",
    FindFirstChild="(Terrain,string,boolean)=>(any)",
    FindFirstChildOfClass="(Terrain,string)=>(any)",
    FindFirstChildWhichIsA="(Terrain,string,boolean)=>(any)",
    Friction="number",
    FrontParamA="number",
    FrontParamB="number",
    FrontSurface="any",
    FrontSurfaceInput="any",
    GetAttribute="(Terrain,string)=>(any)",
    GetAttributeChangedSignal="(Terrain,string)=>(any)",
    GetAttributes="(Terrain)=>(any)",
    GetCell="(Terrain,number,number,number)=>(any)",
    GetChildren="(Terrain)=>(any)",
    GetConnectedParts="(Terrain,boolean)=>(any)",
    GetDebugId="(Terrain,number)=>(string)",
    GetDescendants="(Terrain)=>(any)",
    GetFullName="(Terrain)=>(string)",
    GetJoints="(Terrain)=>(any)",
    GetMass="(Terrain)=>(number)",
    GetMaterialColor="(Terrain,any)=>(Color3)",
    GetNetworkOwner="(Terrain)=>(any)",
    GetNetworkOwnershipAuto="(Terrain)=>(boolean)",
    GetPropertyChangedSignal="(Terrain,string)=>(any)",
    GetRenderCFrame="(Terrain)=>(CFrame)",
    GetRootPart="(Terrain)=>(any)",
    GetTouchingParts="(Terrain)=>(any)",
    GetWaterCell="(Terrain,number,number,number)=>(any)",
    ImportHeightMap="(Terrain,string,string,any)=>()",
    IsA="(Terrain,string)=>(boolean)",
    IsAncestorOf="(Terrain,any)=>(boolean)",
    IsDescendantOf="(Terrain,any)=>(boolean)",
    IsGrounded="(Terrain)=>(boolean)",
    IsSmooth="boolean",
    LeftParamA="number",
    LeftParamB="number",
    LeftSurface="any",
    LeftSurfaceInput="any",
    LocalSimulationTouched="Event",
    LocalTransparencyModifier="number",
    Locked="boolean",
    MakeJoints="(Terrain)=>()",
    Massless="boolean",
    Material="any",
    MaterialColors="any",
    MaxExtents="any",
    Name="string",
    NetworkIsSleeping="boolean",
    NetworkOwnerChanged="Event",
    NetworkOwnerV3="any",
    NetworkOwnershipRule="any",
    Orientation="Vector3",
    OutfitChanged="Event",
    Parent="any",
    PasteRegion="(Terrain,any,any,boolean)=>()",
    PhysicsGrid="any",
    Position="Vector3",
    ReadVoxels="(Terrain,any,number)=>(any)",
    ReceiveAge="number",
    Reflectance="number",
    Remove="(Terrain)=>()",
    ReplaceMaterial="(Terrain,any,number,any,any)=>()",
    Resize="(Terrain,any,number)=>(boolean)",
    ResizeIncrement="number",
    ResizeableFaces="any",
    RightParamA="number",
    RightParamB="number",
    RightSurface="any",
    RightSurfaceInput="any",
    RobloxLocked="boolean",
    RootPriority="number",
    RotVelocity="Vector3",
    Rotation="Vector3",
    SetAttribute="(Terrain,string,any)=>()",
    SetCell="(Terrain,number,number,number,any,any,any)=>()",
    SetCells="(Terrain,any,any,any,any)=>()",
    SetMaterialColor="(Terrain,any,Color3)=>()",
    SetNetworkOwner="(Terrain,any)=>()",
    SetNetworkOwnershipAuto="(Terrain)=>()",
    SetWaterCell="(Terrain,number,number,number,any,any)=>()",
    Size="Vector3",
    SmoothGrid="any",
    SpecificGravity="number",
    StoppedTouching="Event",
    SubtractAsync="(Terrain,any,any,any)=>(any)",
    Tags="any",
    TerrainProgressUpdate="Event",
    TopParamA="number",
    TopParamB="number",
    TopSurface="any",
    TopSurfaceInput="any",
    TouchEnded="Event",
    Touched="Event",
    Transparency="number",
    UnionAsync="(Terrain,any,any,any)=>(any)",
    Velocity="Vector3",
    WaitForChild="(Terrain,string,number)=>(any)",
    WaterColor="Color3",
    WaterReflectance="number",
    WaterTransparency="number",
    WaterWaveSize="number",
    WaterWaveSpeed="number",
    WorldToCell="(Terrain,Vector3)=>(Vector3)",
    WorldToCellPreferEmpty="(Terrain,Vector3)=>(Vector3)",
    WorldToCellPreferSolid="(Terrain,Vector3)=>(Vector3)",
    WriteVoxels="(Terrain,any,number,any,any)=>()",
    archivable="boolean",
    breakJoints="(Terrain)=>()",
    brickColor="any",
    childAdded="Event",
    children="(Terrain)=>(any)",
    className="string",
    clone="(Terrain)=>(any)",
    destroy="(Terrain)=>()",
    findFirstChild="(Terrain,string,boolean)=>(any)",
    getChildren="(Terrain)=>(any)",
    getMass="(Terrain)=>(number)",
    isA="(Terrain,string)=>(boolean)",
    isDescendantOf="(Terrain,any)=>(boolean)",
    makeJoints="(Terrain)=>()",
    remove="(Terrain)=>()",
    resize="(Terrain,any,number)=>(boolean)",
    siz="Vector3",
    size="Vector3",
    touched="Event"}


, AnalyticsService={
    AncestryChanged="Event",
    ApiKey="string",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(AnalyticsService)=>()",
    Clone="(AnalyticsService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(AnalyticsService)=>()",
    FindFirstAncestor="(AnalyticsService,string)=>(any)",
    FindFirstAncestorOfClass="(AnalyticsService,string)=>(any)",
    FindFirstAncestorWhichIsA="(AnalyticsService,string)=>(any)",
    FindFirstChild="(AnalyticsService,string,boolean)=>(any)",
    FindFirstChildOfClass="(AnalyticsService,string)=>(any)",
    FindFirstChildWhichIsA="(AnalyticsService,string,boolean)=>(any)",
    FireEvent="(AnalyticsService,string,any)=>()",
    GetAttribute="(AnalyticsService,string)=>(any)",
    GetAttributeChangedSignal="(AnalyticsService,string)=>(any)",
    GetAttributes="(AnalyticsService)=>(any)",
    GetChildren="(AnalyticsService)=>(any)",
    GetDebugId="(AnalyticsService,number)=>(string)",
    GetDescendants="(AnalyticsService)=>(any)",
    GetFullName="(AnalyticsService)=>(string)",
    GetPropertyChangedSignal="(AnalyticsService,string)=>(any)",
    IsA="(AnalyticsService,string)=>(boolean)",
    IsAncestorOf="(AnalyticsService,any)=>(boolean)",
    IsDescendantOf="(AnalyticsService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(AnalyticsService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(AnalyticsService,string,any)=>()",
    Tags="any",
    WaitForChild="(AnalyticsService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(AnalyticsService)=>(any)",
    className="string",
    clone="(AnalyticsService)=>(any)",
    destroy="(AnalyticsService)=>()",
    findFirstChild="(AnalyticsService,string,boolean)=>(any)",
    getChildren="(AnalyticsService)=>(any)",
    isA="(AnalyticsService,string)=>(boolean)",
    isDescendantOf="(AnalyticsService,any)=>(boolean)",
    remove="(AnalyticsService)=>()"}


, BindableEvent={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BindableEvent)=>()",
    Clone="(BindableEvent)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BindableEvent)=>()",
    Event="Event",
    FindFirstAncestor="(BindableEvent,string)=>(any)",
    FindFirstAncestorOfClass="(BindableEvent,string)=>(any)",
    FindFirstAncestorWhichIsA="(BindableEvent,string)=>(any)",
    FindFirstChild="(BindableEvent,string,boolean)=>(any)",
    FindFirstChildOfClass="(BindableEvent,string)=>(any)",
    FindFirstChildWhichIsA="(BindableEvent,string,boolean)=>(any)",
    Fire="(BindableEvent,any)=>()",
    GetAttribute="(BindableEvent,string)=>(any)",
    GetAttributeChangedSignal="(BindableEvent,string)=>(any)",
    GetAttributes="(BindableEvent)=>(any)",
    GetChildren="(BindableEvent)=>(any)",
    GetDebugId="(BindableEvent,number)=>(string)",
    GetDescendants="(BindableEvent)=>(any)",
    GetFullName="(BindableEvent)=>(string)",
    GetPropertyChangedSignal="(BindableEvent,string)=>(any)",
    IsA="(BindableEvent,string)=>(boolean)",
    IsAncestorOf="(BindableEvent,any)=>(boolean)",
    IsDescendantOf="(BindableEvent,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(BindableEvent)=>()",
    RobloxLocked="boolean",
    SetAttribute="(BindableEvent,string,any)=>()",
    Tags="any",
    WaitForChild="(BindableEvent,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(BindableEvent)=>(any)",
    className="string",
    clone="(BindableEvent)=>(any)",
    destroy="(BindableEvent)=>()",
    findFirstChild="(BindableEvent,string,boolean)=>(any)",
    getChildren="(BindableEvent)=>(any)",
    isA="(BindableEvent,string)=>(boolean)",
    isDescendantOf="(BindableEvent,any)=>(boolean)",
    remove="(BindableEvent)=>()"}


, AngularVelocity={
    Active="boolean",
    AncestryChanged="Event",
    AngularVelocity="Vector3",
    Archivable="boolean",
    Attachment0="any",
    Attachment1="any",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(AngularVelocity)=>()",
    Clone="(AngularVelocity)=>(any)",
    Color="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(AngularVelocity)=>()",
    Enabled="boolean",
    FindFirstAncestor="(AngularVelocity,string)=>(any)",
    FindFirstAncestorOfClass="(AngularVelocity,string)=>(any)",
    FindFirstAncestorWhichIsA="(AngularVelocity,string)=>(any)",
    FindFirstChild="(AngularVelocity,string,boolean)=>(any)",
    FindFirstChildOfClass="(AngularVelocity,string)=>(any)",
    FindFirstChildWhichIsA="(AngularVelocity,string,boolean)=>(any)",
    GetAttribute="(AngularVelocity,string)=>(any)",
    GetAttributeChangedSignal="(AngularVelocity,string)=>(any)",
    GetAttributes="(AngularVelocity)=>(any)",
    GetChildren="(AngularVelocity)=>(any)",
    GetDebugId="(AngularVelocity,number)=>(string)",
    GetDescendants="(AngularVelocity)=>(any)",
    GetFullName="(AngularVelocity)=>(string)",
    GetPropertyChangedSignal="(AngularVelocity,string)=>(any)",
    IsA="(AngularVelocity,string)=>(boolean)",
    IsAncestorOf="(AngularVelocity,any)=>(boolean)",
    IsDescendantOf="(AngularVelocity,any)=>(boolean)",
    MaxTorque="number",
    Name="string",
    Parent="any",
    RelativeTo="any",
    Remove="(AngularVelocity)=>()",
    RobloxLocked="boolean",
    SetAttribute="(AngularVelocity,string,any)=>()",
    Tags="any",
    Visible="boolean",
    WaitForChild="(AngularVelocity,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(AngularVelocity)=>(any)",
    className="string",
    clone="(AngularVelocity)=>(any)",
    destroy="(AngularVelocity)=>()",
    findFirstChild="(AngularVelocity,string,boolean)=>(any)",
    getChildren="(AngularVelocity)=>(any)",
    isA="(AngularVelocity,string)=>(boolean)",
    isDescendantOf="(AngularVelocity,any)=>(boolean)",
    remove="(AngularVelocity)=>()"}


, Animation={
    AncestryChanged="Event",
    AnimationId="any",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Animation)=>()",
    Clone="(Animation)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Animation)=>()",
    FindFirstAncestor="(Animation,string)=>(any)",
    FindFirstAncestorOfClass="(Animation,string)=>(any)",
    FindFirstAncestorWhichIsA="(Animation,string)=>(any)",
    FindFirstChild="(Animation,string,boolean)=>(any)",
    FindFirstChildOfClass="(Animation,string)=>(any)",
    FindFirstChildWhichIsA="(Animation,string,boolean)=>(any)",
    GetAttribute="(Animation,string)=>(any)",
    GetAttributeChangedSignal="(Animation,string)=>(any)",
    GetAttributes="(Animation)=>(any)",
    GetChildren="(Animation)=>(any)",
    GetDebugId="(Animation,number)=>(string)",
    GetDescendants="(Animation)=>(any)",
    GetFullName="(Animation)=>(string)",
    GetPropertyChangedSignal="(Animation,string)=>(any)",
    IsA="(Animation,string)=>(boolean)",
    IsAncestorOf="(Animation,any)=>(boolean)",
    IsDescendantOf="(Animation,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Animation)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Animation,string,any)=>()",
    Tags="any",
    WaitForChild="(Animation,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Animation)=>(any)",
    className="string",
    clone="(Animation)=>(any)",
    destroy="(Animation)=>()",
    findFirstChild="(Animation,string,boolean)=>(any)",
    getChildren="(Animation)=>(any)",
    isA="(Animation,string)=>(boolean)",
    isDescendantOf="(Animation,any)=>(boolean)",
    remove="(Animation)=>()"}


, ScreenGui={
    AbsolutePosition="Vector2",
    AbsoluteRotation="number",
    AbsoluteSize="Vector2",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoLocalize="boolean",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ScreenGui)=>()",
    Clone="(ScreenGui)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ScreenGui)=>()",
    DisplayOrder="number",
    Enabled="boolean",
    FindFirstAncestor="(ScreenGui,string)=>(any)",
    FindFirstAncestorOfClass="(ScreenGui,string)=>(any)",
    FindFirstAncestorWhichIsA="(ScreenGui,string)=>(any)",
    FindFirstChild="(ScreenGui,string,boolean)=>(any)",
    FindFirstChildOfClass="(ScreenGui,string)=>(any)",
    FindFirstChildWhichIsA="(ScreenGui,string,boolean)=>(any)",
    GetAttribute="(ScreenGui,string)=>(any)",
    GetAttributeChangedSignal="(ScreenGui,string)=>(any)",
    GetAttributes="(ScreenGui)=>(any)",
    GetChildren="(ScreenGui)=>(any)",
    GetDebugId="(ScreenGui,number)=>(string)",
    GetDescendants="(ScreenGui)=>(any)",
    GetFullName="(ScreenGui)=>(string)",
    GetPropertyChangedSignal="(ScreenGui,string)=>(any)",
    IgnoreGuiInset="boolean",
    IsA="(ScreenGui,string)=>(boolean)",
    IsAncestorOf="(ScreenGui,any)=>(boolean)",
    IsDescendantOf="(ScreenGui,any)=>(boolean)",
    IsNotOccluded="boolean",
    Localize="boolean",
    Name="string",
    OnTopOfCoreBlur="boolean",
    Parent="any",
    Remove="(ScreenGui)=>()",
    ResetOnSpawn="boolean",
    RobloxLocked="boolean",
    RootLocalizationTable="any",
    SetAttribute="(ScreenGui,string,any)=>()",
    Tags="any",
    WaitForChild="(ScreenGui,string,number)=>(any)",
    ZIndexBehavior="any",
    archivable="boolean",
    childAdded="Event",
    children="(ScreenGui)=>(any)",
    className="string",
    clone="(ScreenGui)=>(any)",
    destroy="(ScreenGui)=>()",
    findFirstChild="(ScreenGui,string,boolean)=>(any)",
    getChildren="(ScreenGui)=>(any)",
    isA="(ScreenGui,string)=>(boolean)",
    isDescendantOf="(ScreenGui,any)=>(boolean)",
    remove="(ScreenGui)=>()"}


, Animator={
    AncestryChanged="Event",
    AnimationPlayed="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Animator)=>()",
    Clone="(Animator)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Animator)=>()",
    FindFirstAncestor="(Animator,string)=>(any)",
    FindFirstAncestorOfClass="(Animator,string)=>(any)",
    FindFirstAncestorWhichIsA="(Animator,string)=>(any)",
    FindFirstChild="(Animator,string,boolean)=>(any)",
    FindFirstChildOfClass="(Animator,string)=>(any)",
    FindFirstChildWhichIsA="(Animator,string,boolean)=>(any)",
    GetAttribute="(Animator,string)=>(any)",
    GetAttributeChangedSignal="(Animator,string)=>(any)",
    GetAttributes="(Animator)=>(any)",
    GetChildren="(Animator)=>(any)",
    GetDebugId="(Animator,number)=>(string)",
    GetDescendants="(Animator)=>(any)",
    GetFullName="(Animator)=>(string)",
    GetPlayingAnimationTracks="(Animator)=>(any)",
    GetPropertyChangedSignal="(Animator,string)=>(any)",
    IsA="(Animator,string)=>(boolean)",
    IsAncestorOf="(Animator,any)=>(boolean)",
    IsDescendantOf="(Animator,any)=>(boolean)",
    LoadAnimation="(Animator,any)=>(any)",
    Name="string",
    OnCombinedUpdate="Event",
    Parent="any",
    Remove="(Animator)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Animator,string,any)=>()",
    StepAnimations="(Animator,number)=>()",
    Tags="any",
    WaitForChild="(Animator,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Animator)=>(any)",
    className="string",
    clone="(Animator)=>(any)",
    destroy="(Animator)=>()",
    findFirstChild="(Animator,string,boolean)=>(any)",
    getChildren="(Animator)=>(any)",
    isA="(Animator,string)=>(boolean)",
    isDescendantOf="(Animator,any)=>(boolean)",
    remove="(Animator)=>()"}


, TextLabel={
    AbsolutePosition="Vector2",
    AbsoluteRotation="number",
    AbsoluteSize="Vector2",
    Active="boolean",
    AncestryChanged="Event",
    AnchorPoint="Vector2",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoLocalize="boolean",
    BackgroundColor="any",
    BackgroundColor3="Color3",
    BackgroundTransparency="number",
    BorderColor="any",
    BorderColor3="Color3",
    BorderMode="any",
    BorderSizePixel="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(TextLabel)=>()",
    ClipsDescendants="boolean",
    Clone="(TextLabel)=>(any)",
    Confidential="boolean",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(TextLabel)=>()",
    DragBegin="Event",
    DragBeginConnectionCount="number",
    DragStopped="Event",
    DragStoppedConnectionCount="number",
    Draggable="boolean",
    FindFirstAncestor="(TextLabel,string)=>(any)",
    FindFirstAncestorOfClass="(TextLabel,string)=>(any)",
    FindFirstAncestorWhichIsA="(TextLabel,string)=>(any)",
    FindFirstChild="(TextLabel,string,boolean)=>(any)",
    FindFirstChildOfClass="(TextLabel,string)=>(any)",
    FindFirstChildWhichIsA="(TextLabel,string,boolean)=>(any)",
    Font="any",
    FontSize="any",
    GetAttribute="(TextLabel,string)=>(any)",
    GetAttributeChangedSignal="(TextLabel,string)=>(any)",
    GetAttributes="(TextLabel)=>(any)",
    GetChildren="(TextLabel)=>(any)",
    GetDebugId="(TextLabel,number)=>(string)",
    GetDescendants="(TextLabel)=>(any)",
    GetFullName="(TextLabel)=>(string)",
    GetPropertyChangedSignal="(TextLabel,string)=>(any)",
    InputBegan="Event",
    InputChanged="Event",
    InputEnded="Event",
    IsA="(TextLabel,string)=>(boolean)",
    IsAncestorOf="(TextLabel,any)=>(boolean)",
    IsDescendantOf="(TextLabel,any)=>(boolean)",
    IsNotOccluded="boolean",
    LayoutOrder="number",
    LineHeight="number",
    Localize="boolean",
    LocalizedText="string",
    MouseEnter="Event",
    MouseEnterConnectionCount="number",
    MouseLeave="Event",
    MouseLeaveConnectionCount="number",
    MouseMoved="Event",
    MouseMovedConnectionCount="number",
    MouseWheelBackward="Event",
    MouseWheelBackwardConnectionCount="number",
    MouseWheelForward="Event",
    MouseWheelForwardConnectionCount="number",
    Name="string",
    NextSelectionDown="any",
    NextSelectionLeft="any",
    NextSelectionRight="any",
    NextSelectionUp="any",
    Parent="any",
    Position="UDim2",
    Remove="(TextLabel)=>()",
    RobloxLocked="boolean",
    RootLocalizationTable="any",
    Rotation="number",
    Selectable="boolean",
    SelectionGained="Event",
    SelectionImageObject="any",
    SelectionLost="Event",
    SetAttribute="(TextLabel,string,any)=>()",
    SetTextFromInput="(TextLabel,string)=>()",
    Size="UDim2",
    SizeConstraint="any",
    Tags="any",
    Text="string",
    TextBounds="Vector2",
    TextColor="any",
    TextColor3="Color3",
    TextFits="boolean",
    TextScaled="boolean",
    TextSize="number",
    TextStrokeColor3="Color3",
    TextStrokeTransparency="number",
    TextTransparency="number",
    TextTruncate="any",
    TextWrap="boolean",
    TextWrapped="boolean",
    TextXAlignment="any",
    TextYAlignment="any",
    TouchLongPress="Event",
    TouchPan="Event",
    TouchPinch="Event",
    TouchRotate="Event",
    TouchSwipe="Event",
    TouchTap="Event",
    Transparency="number",
    TweenPosition="(TextLabel,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSize="(TextLabel,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSizeAndPosition="(TextLabel,UDim2,UDim2,any,any,number,boolean,any)=>(boolean)",
    Visible="boolean",
    WaitForChild="(TextLabel,string,number)=>(any)",
    ZIndex="number",
    archivable="boolean",
    childAdded="Event",
    children="(TextLabel)=>(any)",
    className="string",
    clone="(TextLabel)=>(any)",
    destroy="(TextLabel)=>()",
    findFirstChild="(TextLabel,string,boolean)=>(any)",
    getChildren="(TextLabel)=>(any)",
    isA="(TextLabel,string)=>(boolean)",
    isDescendantOf="(TextLabel,any)=>(boolean)",
    remove="(TextLabel)=>()"}


, AnimationTrack={
    AdjustSpeed="(AnimationTrack,number)=>()",
    AdjustWeight="(AnimationTrack,number,number)=>()",
    AncestryChanged="Event",
    Animation="any",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(AnimationTrack)=>()",
    Clone="(AnimationTrack)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(AnimationTrack)=>()",
    DidLoop="Event",
    FindFirstAncestor="(AnimationTrack,string)=>(any)",
    FindFirstAncestorOfClass="(AnimationTrack,string)=>(any)",
    FindFirstAncestorWhichIsA="(AnimationTrack,string)=>(any)",
    FindFirstChild="(AnimationTrack,string,boolean)=>(any)",
    FindFirstChildOfClass="(AnimationTrack,string)=>(any)",
    FindFirstChildWhichIsA="(AnimationTrack,string,boolean)=>(any)",
    GetAttribute="(AnimationTrack,string)=>(any)",
    GetAttributeChangedSignal="(AnimationTrack,string)=>(any)",
    GetAttributes="(AnimationTrack)=>(any)",
    GetChildren="(AnimationTrack)=>(any)",
    GetDebugId="(AnimationTrack,number)=>(string)",
    GetDescendants="(AnimationTrack)=>(any)",
    GetFullName="(AnimationTrack)=>(string)",
    GetMarkerReachedSignal="(AnimationTrack,string)=>(any)",
    GetPropertyChangedSignal="(AnimationTrack,string)=>(any)",
    GetTimeOfKeyframe="(AnimationTrack,string)=>(number)",
    IsA="(AnimationTrack,string)=>(boolean)",
    IsAncestorOf="(AnimationTrack,any)=>(boolean)",
    IsDescendantOf="(AnimationTrack,any)=>(boolean)",
    IsPlaying="boolean",
    KeyframeReached="Event",
    Length="number",
    Looped="boolean",
    Name="string",
    Parent="any",
    Play="(AnimationTrack,number,number,number)=>()",
    Priority="any",
    Remove="(AnimationTrack)=>()",
    RobloxLocked="boolean",
    SetAttribute="(AnimationTrack,string,any)=>()",
    Speed="number",
    Stop="(AnimationTrack,number)=>()",
    Stopped="Event",
    Tags="any",
    TimePosition="number",
    WaitForChild="(AnimationTrack,string,number)=>(any)",
    WeightCurrent="number",
    WeightTarget="number",
    archivable="boolean",
    childAdded="Event",
    children="(AnimationTrack)=>(any)",
    className="string",
    clone="(AnimationTrack)=>(any)",
    destroy="(AnimationTrack)=>()",
    findFirstChild="(AnimationTrack,string,boolean)=>(any)",
    getChildren="(AnimationTrack)=>(any)",
    isA="(AnimationTrack,string)=>(boolean)",
    isDescendantOf="(AnimationTrack,any)=>(boolean)",
    remove="(AnimationTrack)=>()"}


, AppStorageService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(AppStorageService)=>()",
    Clone="(AppStorageService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(AppStorageService)=>()",
    FindFirstAncestor="(AppStorageService,string)=>(any)",
    FindFirstAncestorOfClass="(AppStorageService,string)=>(any)",
    FindFirstAncestorWhichIsA="(AppStorageService,string)=>(any)",
    FindFirstChild="(AppStorageService,string,boolean)=>(any)",
    FindFirstChildOfClass="(AppStorageService,string)=>(any)",
    FindFirstChildWhichIsA="(AppStorageService,string,boolean)=>(any)",
    Flush="(AppStorageService)=>()",
    GetAttribute="(AppStorageService,string)=>(any)",
    GetAttributeChangedSignal="(AppStorageService,string)=>(any)",
    GetAttributes="(AppStorageService)=>(any)",
    GetChildren="(AppStorageService)=>(any)",
    GetDebugId="(AppStorageService,number)=>(string)",
    GetDescendants="(AppStorageService)=>(any)",
    GetFullName="(AppStorageService)=>(string)",
    GetItem="(AppStorageService,string)=>(string)",
    GetPropertyChangedSignal="(AppStorageService,string)=>(any)",
    IsA="(AppStorageService,string)=>(boolean)",
    IsAncestorOf="(AppStorageService,any)=>(boolean)",
    IsDescendantOf="(AppStorageService,any)=>(boolean)",
    ItemWasSet="Event",
    Name="string",
    Parent="any",
    Remove="(AppStorageService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(AppStorageService,string,any)=>()",
    SetItem="(AppStorageService,string,string)=>()",
    StoreWasCleared="Event",
    Tags="any",
    WaitForChild="(AppStorageService,string,number)=>(any)",
    WhenLoaded="(AppStorageService,any)=>()",
    archivable="boolean",
    childAdded="Event",
    children="(AppStorageService)=>(any)",
    className="string",
    clone="(AppStorageService)=>(any)",
    destroy="(AppStorageService)=>()",
    findFirstChild="(AppStorageService,string,boolean)=>(any)",
    getChildren="(AppStorageService)=>(any)",
    isA="(AppStorageService,string)=>(boolean)",
    isDescendantOf="(AppStorageService,any)=>(boolean)",
    remove="(AppStorageService)=>()"}


, BodyPosition={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BodyPosition)=>()",
    Clone="(BodyPosition)=>(any)",
    D="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BodyPosition)=>()",
    FindFirstAncestor="(BodyPosition,string)=>(any)",
    FindFirstAncestorOfClass="(BodyPosition,string)=>(any)",
    FindFirstAncestorWhichIsA="(BodyPosition,string)=>(any)",
    FindFirstChild="(BodyPosition,string,boolean)=>(any)",
    FindFirstChildOfClass="(BodyPosition,string)=>(any)",
    FindFirstChildWhichIsA="(BodyPosition,string,boolean)=>(any)",
    GetAttribute="(BodyPosition,string)=>(any)",
    GetAttributeChangedSignal="(BodyPosition,string)=>(any)",
    GetAttributes="(BodyPosition)=>(any)",
    GetChildren="(BodyPosition)=>(any)",
    GetDebugId="(BodyPosition,number)=>(string)",
    GetDescendants="(BodyPosition)=>(any)",
    GetFullName="(BodyPosition)=>(string)",
    GetLastForce="(BodyPosition)=>(Vector3)",
    GetPropertyChangedSignal="(BodyPosition,string)=>(any)",
    IsA="(BodyPosition,string)=>(boolean)",
    IsAncestorOf="(BodyPosition,any)=>(boolean)",
    IsDescendantOf="(BodyPosition,any)=>(boolean)",
    MaxForce="Vector3",
    Name="string",
    P="number",
    Parent="any",
    Position="Vector3",
    ReachedTarget="Event",
    Remove="(BodyPosition)=>()",
    RobloxLocked="boolean",
    SetAttribute="(BodyPosition,string,any)=>()",
    Tags="any",
    WaitForChild="(BodyPosition,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(BodyPosition)=>(any)",
    className="string",
    clone="(BodyPosition)=>(any)",
    destroy="(BodyPosition)=>()",
    findFirstChild="(BodyPosition,string,boolean)=>(any)",
    getChildren="(BodyPosition)=>(any)",
    isA="(BodyPosition,string)=>(boolean)",
    isDescendantOf="(BodyPosition,any)=>(boolean)",
    lastForce="(BodyPosition)=>(Vector3)",
    maxForce="Vector3",
    position="Vector3",
    remove="(BodyPosition)=>()"}


, UITextSizeConstraint={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(UITextSizeConstraint)=>()",
    Clone="(UITextSizeConstraint)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(UITextSizeConstraint)=>()",
    FindFirstAncestor="(UITextSizeConstraint,string)=>(any)",
    FindFirstAncestorOfClass="(UITextSizeConstraint,string)=>(any)",
    FindFirstAncestorWhichIsA="(UITextSizeConstraint,string)=>(any)",
    FindFirstChild="(UITextSizeConstraint,string,boolean)=>(any)",
    FindFirstChildOfClass="(UITextSizeConstraint,string)=>(any)",
    FindFirstChildWhichIsA="(UITextSizeConstraint,string,boolean)=>(any)",
    GetAttribute="(UITextSizeConstraint,string)=>(any)",
    GetAttributeChangedSignal="(UITextSizeConstraint,string)=>(any)",
    GetAttributes="(UITextSizeConstraint)=>(any)",
    GetChildren="(UITextSizeConstraint)=>(any)",
    GetDebugId="(UITextSizeConstraint,number)=>(string)",
    GetDescendants="(UITextSizeConstraint)=>(any)",
    GetFullName="(UITextSizeConstraint)=>(string)",
    GetPropertyChangedSignal="(UITextSizeConstraint,string)=>(any)",
    IsA="(UITextSizeConstraint,string)=>(boolean)",
    IsAncestorOf="(UITextSizeConstraint,any)=>(boolean)",
    IsDescendantOf="(UITextSizeConstraint,any)=>(boolean)",
    MaxTextSize="number",
    MinTextSize="number",
    Name="string",
    Parent="any",
    Remove="(UITextSizeConstraint)=>()",
    RobloxLocked="boolean",
    SetAttribute="(UITextSizeConstraint,string,any)=>()",
    Tags="any",
    WaitForChild="(UITextSizeConstraint,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(UITextSizeConstraint)=>(any)",
    className="string",
    clone="(UITextSizeConstraint)=>(any)",
    destroy="(UITextSizeConstraint)=>()",
    findFirstChild="(UITextSizeConstraint,string,boolean)=>(any)",
    getChildren="(UITextSizeConstraint)=>(any)",
    isA="(UITextSizeConstraint,string)=>(boolean)",
    isDescendantOf="(UITextSizeConstraint,any)=>(boolean)",
    remove="(UITextSizeConstraint)=>()"}


, DataModel={
    AllowedGear,Changed="Event",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AvatarJointPosition,="any",
    BindToClose="(DataModel,any)=>()",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(DataModel)=>()",
    Clone="(DataModel)=>(any)",
    Close="Event",
    CloseLate="Event",
    CreatorId="number",
    Creator,="any",
    DataCost="number",
    DefineFastFlag="(DataModel,string,boolean)=>(boolean)",
    DefineFastInt="(DataModel,string,number)=>(number)",
    DefineFastString="(DataModel,string,string)=>(string)",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(DataModel)=>()",
    FindFirstAncestor="(DataModel,string)=>(any)",
    FindFirstAncestorOfClass="(DataModel,string)=>(any)",
    FindFirstAncestorWhichIsA="(DataModel,string)=>(any)",
    FindFirstChild="(DataModel,string,boolean)=>(any)",
    FindFirstChildOfClass="(DataModel,string)=>(any)",
    FindFirstChildWhichIsA="(DataModel,string,boolean)=>(any)",
    FindService="(DataModel,string)=>(any)",
    ForceR15="boolean",
    GameAvatar,="any",
    GameId="number",
    GearGenreSetting="any",
    Genre="any",
    GetAttribute="(DataModel,string)=>(any)",
    GetAttributeChangedSignal="(DataModel,string)=>(any)",
    GetAttributes="(DataModel)=>(any)",
    GetChildren="(DataModel)=>(any)",
    GetDebugId="(DataModel,number)=>(string)",
    GetDescendants="(DataModel)=>(any)",
    GetFastFlag="(DataModel,string)=>(boolean)",
    GetFastInt="(DataModel,string)=>(number)",
    GetFastString="(DataModel,string)=>(string)",
    GetFullName="(DataModel)=>(string)",
    GetJobIntervalPeakFraction="(DataModel,string,number)=>(number)",
    GetJobTimePeakFraction="(DataModel,string,number)=>(number)",
    GetJobsExtendedStats="(DataModel)=>(any)",
    GetJobsInfo="(DataModel)=>(any)",
    GetMessage="(DataModel)=>(string)",
    GetObjects="(DataModel,any)=>(any)",
    GetObjectsAsync="(DataModel,any)=>(any)",
    GetObjectsList="(DataModel,any)=>(any)",
    GetPropertyChangedSignal="(DataModel,string)=>(any)",
    GetRemoteBuildMode="(DataModel)=>(boolean)",
    GetService="(DataModel,string)=>(any)",
    GraphicsQualityChangeRequest="Event",
    HttpGetAsync="(DataModel,string,any)=>(string)",
    HttpPostAsync="(DataModel,string,string,string,any)=>(string)",
    InsertObjectsAndJoinIfLegacyAsync="(DataModel,any)=>(any)",
    IsA="(DataModel,string)=>(boolean)",
    IsAncestorOf="(DataModel,any)=>(boolean)",
    IsDescendantOf="(DataModel,any)=>(boolean)",
    IsGear,Allowed="(DataModel,any)=>(boolean)",
    IsLoaded="(DataModel)=>(boolean)",
    IsSFFlagsLoaded="boolean",
    ItemChanged="Event",
    JobId="string",
    Load="(DataModel,any)=>()",
    Loaded="Event",
    Name="string",
    OpenScreenshotsFolder="(DataModel)=>()",
    OpenVideosFolder="(DataModel)=>()",
    Parent="any",
    PlaceId="number",
    PlaceVersion="number",
    PrivateServerId="string",
    PrivateServerOwnerId="number",
    R15Collision,="any",
    Remove="(DataModel)=>()",
    ReportInGoogleAnalytics="(DataModel,string,string,string,number)=>()",
    RobloxLocked="boolean",
    SavePlace="(DataModel,any)=>(boolean)",
    ScreenshotReady="Event",
    ServiceAdded="Event",
    ServiceRemoving="Event",
    SetAttribute="(DataModel,string,any)=>()",
    SetFastFlagForTesting="(DataModel,string,boolean)=>(boolean)",
    SetFastIntForTesting="(DataModel,string,number)=>(number)",
    SetFastStringForTesting="(DataModel,string,string)=>(string)",
    SetPlaceId="(DataModel,number)=>()",
    SetUniverseId="(DataModel,number)=>()",
    Shutdown="(DataModel)=>()",
    Tags="any",
    VIPServerId="string",
    VIPServerOwnerId="number",
    WaitForChild="(DataModel,string,number)=>(any)",
    Workspace="any",
    archivable="boolean",
    childAdded="Event",
    children="(DataModel)=>(any)",
    className="string",
    clone="(DataModel)=>(any)",
    destroy="(DataModel)=>()",
    findFirstChild="(DataModel,string,boolean)=>(any)",
    getChildren="(DataModel)=>(any)",
    getService="(DataModel,string)=>(any)",
    isA="(DataModel,string)=>(boolean)",
    isDescendantOf="(DataModel,any)=>(boolean)",
    lighting="any",
    remove="(DataModel)=>()",
    service="(DataModel,string)=>(any)",
    workspace="any"}


, CustomEvent={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(CustomEvent)=>()",
    Clone="(CustomEvent)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(CustomEvent)=>()",
    FindFirstAncestor="(CustomEvent,string)=>(any)",
    FindFirstAncestorOfClass="(CustomEvent,string)=>(any)",
    FindFirstAncestorWhichIsA="(CustomEvent,string)=>(any)",
    FindFirstChild="(CustomEvent,string,boolean)=>(any)",
    FindFirstChildOfClass="(CustomEvent,string)=>(any)",
    FindFirstChildWhichIsA="(CustomEvent,string,boolean)=>(any)",
    GetAttachedReceivers="(CustomEvent)=>(any)",
    GetAttribute="(CustomEvent,string)=>(any)",
    GetAttributeChangedSignal="(CustomEvent,string)=>(any)",
    GetAttributes="(CustomEvent)=>(any)",
    GetChildren="(CustomEvent)=>(any)",
    GetDebugId="(CustomEvent,number)=>(string)",
    GetDescendants="(CustomEvent)=>(any)",
    GetFullName="(CustomEvent)=>(string)",
    GetPropertyChangedSignal="(CustomEvent,string)=>(any)",
    IsA="(CustomEvent,string)=>(boolean)",
    IsAncestorOf="(CustomEvent,any)=>(boolean)",
    IsDescendantOf="(CustomEvent,any)=>(boolean)",
    Name="string",
    Parent="any",
    PersistedCurrentValue="number",
    ReceiverConnected="Event",
    ReceiverDisconnected="Event",
    Remove="(CustomEvent)=>()",
    RobloxLocked="boolean",
    SetAttribute="(CustomEvent,string,any)=>()",
    SetValue="(CustomEvent,number)=>()",
    Tags="any",
    WaitForChild="(CustomEvent,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(CustomEvent)=>(any)",
    className="string",
    clone="(CustomEvent)=>(any)",
    destroy="(CustomEvent)=>()",
    findFirstChild="(CustomEvent,string,boolean)=>(any)",
    getChildren="(CustomEvent)=>(any)",
    isA="(CustomEvent,string)=>(boolean)",
    isDescendantOf="(CustomEvent,any)=>(boolean)",
    remove="(CustomEvent)=>()"}


, ArcHandles={
    Adornee="any",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Axes="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ArcHandles)=>()",
    Clone="(ArcHandles)=>(any)",
    Color="any",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ArcHandles)=>()",
    FindFirstAncestor="(ArcHandles,string)=>(any)",
    FindFirstAncestorOfClass="(ArcHandles,string)=>(any)",
    FindFirstAncestorWhichIsA="(ArcHandles,string)=>(any)",
    FindFirstChild="(ArcHandles,string,boolean)=>(any)",
    FindFirstChildOfClass="(ArcHandles,string)=>(any)",
    FindFirstChildWhichIsA="(ArcHandles,string,boolean)=>(any)",
    GetAttribute="(ArcHandles,string)=>(any)",
    GetAttributeChangedSignal="(ArcHandles,string)=>(any)",
    GetAttributes="(ArcHandles)=>(any)",
    GetChildren="(ArcHandles)=>(any)",
    GetDebugId="(ArcHandles,number)=>(string)",
    GetDescendants="(ArcHandles)=>(any)",
    GetFullName="(ArcHandles)=>(string)",
    GetPropertyChangedSignal="(ArcHandles,string)=>(any)",
    IsA="(ArcHandles,string)=>(boolean)",
    IsAncestorOf="(ArcHandles,any)=>(boolean)",
    IsDescendantOf="(ArcHandles,any)=>(boolean)",
    MouseButton1Down="Event",
    MouseButton1DownConnectionCount="number",
    MouseButton1Up="Event",
    MouseButton1UpConnectionCount="number",
    MouseDrag="Event",
    MouseDragConnectionCount="number",
    MouseEnter="Event",
    MouseEnterConnectionCount="number",
    MouseLeave="Event",
    MouseLeaveConnectionCount="number",
    Name="string",
    Parent="any",
    Remove="(ArcHandles)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ArcHandles,string,any)=>()",
    Tags="any",
    Transparency="number",
    Visible="boolean",
    WaitForChild="(ArcHandles,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ArcHandles)=>(any)",
    className="string",
    clone="(ArcHandles)=>(any)",
    destroy="(ArcHandles)=>()",
    findFirstChild="(ArcHandles,string,boolean)=>(any)",
    getChildren="(ArcHandles)=>(any)",
    isA="(ArcHandles,string)=>(boolean)",
    isDescendantOf="(ArcHandles,any)=>(boolean)",
    remove="(ArcHandles)=>()"}


, AssetService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(AssetService)=>()",
    Clone="(AssetService)=>(any)",
    CreatePlaceAsync="(AssetService,string,number,string)=>(number)",
    CreatePlaceInPlayerInventoryAsync="(AssetService,any,string,number,string)=>(number)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(AssetService)=>()",
    FindFirstAncestor="(AssetService,string)=>(any)",
    FindFirstAncestorOfClass="(AssetService,string)=>(any)",
    FindFirstAncestorWhichIsA="(AssetService,string)=>(any)",
    FindFirstChild="(AssetService,string,boolean)=>(any)",
    FindFirstChildOfClass="(AssetService,string)=>(any)",
    FindFirstChildWhichIsA="(AssetService,string,boolean)=>(any)",
    GetAssetIdsForPackage="(AssetService,number)=>(any)",
    GetAssetThumbnailAsync="(AssetService,number,Vector2,number)=>(any)",
    GetAttribute="(AssetService,string)=>(any)",
    GetAttributeChangedSignal="(AssetService,string)=>(any)",
    GetAttributes="(AssetService)=>(any)",
    GetBundleDetailsAsync="(AssetService,number)=>(any)",
    GetBundleDetailsSync="(AssetService,number)=>(any)",
    GetChildren="(AssetService)=>(any)",
    GetCreatorAssetID="(AssetService,number)=>(number)",
    GetDebugId="(AssetService,number)=>(string)",
    GetDescendants="(AssetService)=>(any)",
    GetFullName="(AssetService)=>(string)",
    GetGamePlacesAsync="(AssetService)=>(any)",
    GetPropertyChangedSignal="(AssetService,string)=>(any)",
    IsA="(AssetService,string)=>(boolean)",
    IsAncestorOf="(AssetService,any)=>(boolean)",
    IsDescendantOf="(AssetService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(AssetService)=>()",
    RobloxLocked="boolean",
    SavePlaceAsync="(AssetService)=>()",
    SetAttribute="(AssetService,string,any)=>()",
    Tags="any",
    WaitForChild="(AssetService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(AssetService)=>(any)",
    className="string",
    clone="(AssetService)=>(any)",
    destroy="(AssetService)=>()",
    findFirstChild="(AssetService,string,boolean)=>(any)",
    getChildren="(AssetService)=>(any)",
    isA="(AssetService,string)=>(boolean)",
    isDescendantOf="(AssetService,any)=>(boolean)",
    remove="(AssetService)=>()"}


, BasePlayerGui={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BasePlayerGui)=>()",
    Clone="(BasePlayerGui)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BasePlayerGui)=>()",
    FindFirstAncestor="(BasePlayerGui,string)=>(any)",
    FindFirstAncestorOfClass="(BasePlayerGui,string)=>(any)",
    FindFirstAncestorWhichIsA="(BasePlayerGui,string)=>(any)",
    FindFirstChild="(BasePlayerGui,string,boolean)=>(any)",
    FindFirstChildOfClass="(BasePlayerGui,string)=>(any)",
    FindFirstChildWhichIsA="(BasePlayerGui,string,boolean)=>(any)",
    GetAttribute="(BasePlayerGui,string)=>(any)",
    GetAttributeChangedSignal="(BasePlayerGui,string)=>(any)",
    GetAttributes="(BasePlayerGui)=>(any)",
    GetChildren="(BasePlayerGui)=>(any)",
    GetDebugId="(BasePlayerGui,number)=>(string)",
    GetDescendants="(BasePlayerGui)=>(any)",
    GetFullName="(BasePlayerGui)=>(string)",
    GetGuiObjectsAtPosition="(BasePlayerGui,number,number)=>(any)",
    GetPropertyChangedSignal="(BasePlayerGui,string)=>(any)",
    IsA="(BasePlayerGui,string)=>(boolean)",
    IsAncestorOf="(BasePlayerGui,any)=>(boolean)",
    IsDescendantOf="(BasePlayerGui,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(BasePlayerGui)=>()",
    RobloxLocked="boolean",
    SetAttribute="(BasePlayerGui,string,any)=>()",
    Tags="any",
    WaitForChild="(BasePlayerGui,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(BasePlayerGui)=>(any)",
    className="string",
    clone="(BasePlayerGui)=>(any)",
    destroy="(BasePlayerGui)=>()",
    findFirstChild="(BasePlayerGui,string,boolean)=>(any)",
    getChildren="(BasePlayerGui)=>(any)",
    isA="(BasePlayerGui,string)=>(boolean)",
    isDescendantOf="(BasePlayerGui,any)=>(boolean)",
    remove="(BasePlayerGui)=>()"}


, Attachment={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Axis="Vector3",
    CFrame="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Attachment)=>()",
    Clone="(Attachment)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Attachment)=>()",
    FindFirstAncestor="(Attachment,string)=>(any)",
    FindFirstAncestorOfClass="(Attachment,string)=>(any)",
    FindFirstAncestorWhichIsA="(Attachment,string)=>(any)",
    FindFirstChild="(Attachment,string,boolean)=>(any)",
    FindFirstChildOfClass="(Attachment,string)=>(any)",
    FindFirstChildWhichIsA="(Attachment,string,boolean)=>(any)",
    GetAttribute="(Attachment,string)=>(any)",
    GetAttributeChangedSignal="(Attachment,string)=>(any)",
    GetAttributes="(Attachment)=>(any)",
    GetAxis="(Attachment)=>(Vector3)",
    GetChildren="(Attachment)=>(any)",
    GetDebugId="(Attachment,number)=>(string)",
    GetDescendants="(Attachment)=>(any)",
    GetFullName="(Attachment)=>(string)",
    GetPropertyChangedSignal="(Attachment,string)=>(any)",
    GetSecondaryAxis="(Attachment)=>(Vector3)",
    IsA="(Attachment,string)=>(boolean)",
    IsAncestorOf="(Attachment,any)=>(boolean)",
    IsDescendantOf="(Attachment,any)=>(boolean)",
    Name="string",
    Orientation="Vector3",
    Parent="any",
    Position="Vector3",
    Remove="(Attachment)=>()",
    RobloxLocked="boolean",
    Rotation="Vector3",
    SecondaryAxis="Vector3",
    SetAttribute="(Attachment,string,any)=>()",
    SetAxis="(Attachment,Vector3)=>()",
    SetSecondaryAxis="(Attachment,Vector3)=>()",
    Tags="any",
    Visible="boolean",
    WaitForChild="(Attachment,string,number)=>(any)",
    WorldAxis="Vector3",
    WorldCFrame="CFrame",
    WorldOrientation="Vector3",
    WorldPosition="Vector3",
    WorldRotation="Vector3",
    WorldSecondaryAxis="Vector3",
    archivable="boolean",
    childAdded="Event",
    children="(Attachment)=>(any)",
    className="string",
    clone="(Attachment)=>(any)",
    destroy="(Attachment)=>()",
    findFirstChild="(Attachment,string,boolean)=>(any)",
    getChildren="(Attachment)=>(any)",
    isA="(Attachment,string)=>(boolean)",
    isDescendantOf="(Attachment,any)=>(boolean)",
    remove="(Attachment)=>()"}


, Team={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoAssignable="boolean",
    AutoColorCharacters="boolean",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Team)=>()",
    Clone="(Team)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Team)=>()",
    FindFirstAncestor="(Team,string)=>(any)",
    FindFirstAncestorOfClass="(Team,string)=>(any)",
    FindFirstAncestorWhichIsA="(Team,string)=>(any)",
    FindFirstChild="(Team,string,boolean)=>(any)",
    FindFirstChildOfClass="(Team,string)=>(any)",
    FindFirstChildWhichIsA="(Team,string,boolean)=>(any)",
    GetAttribute="(Team,string)=>(any)",
    GetAttributeChangedSignal="(Team,string)=>(any)",
    GetAttributes="(Team)=>(any)",
    GetChildren="(Team)=>(any)",
    GetDebugId="(Team,number)=>(string)",
    GetDescendants="(Team)=>(any)",
    GetFullName="(Team)=>(string)",
    GetPlayers="(Team)=>(any)",
    GetPropertyChangedSignal="(Team,string)=>(any)",
    IsA="(Team,string)=>(boolean)",
    IsAncestorOf="(Team,any)=>(boolean)",
    IsDescendantOf="(Team,any)=>(boolean)",
    Name="string",
    Parent="any",
    PlayerAdded="Event",
    PlayerRemoved="Event",
    Remove="(Team)=>()",
    RobloxLocked="boolean",
    Score="number",
    SetAttribute="(Team,string,any)=>()",
    Tags="any",
    TeamColor="any",
    WaitForChild="(Team,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Team)=>(any)",
    className="string",
    clone="(Team)=>(any)",
    destroy="(Team)=>()",
    findFirstChild="(Team,string,boolean)=>(any)",
    getChildren="(Team)=>(any)",
    isA="(Team,string)=>(boolean)",
    isDescendantOf="(Team,any)=>(boolean)",
    remove="(Team)=>()"}


, LuaSettings={
    AncestryChanged="Event",
    Archivable="boolean",
    AreScriptStartsReported="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(LuaSettings)=>()",
    Clone="(LuaSettings)=>(any)",
    DataCost="number",
    DefaultWaitTime="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(LuaSettings)=>()",
    FindFirstAncestor="(LuaSettings,string)=>(any)",
    FindFirstAncestorOfClass="(LuaSettings,string)=>(any)",
    FindFirstAncestorWhichIsA="(LuaSettings,string)=>(any)",
    FindFirstChild="(LuaSettings,string,boolean)=>(any)",
    FindFirstChildOfClass="(LuaSettings,string)=>(any)",
    FindFirstChildWhichIsA="(LuaSettings,string,boolean)=>(any)",
    GcFrequency="number",
    GcLimit="number",
    GcPause="number",
    GcStepMul="number",
    GetAttribute="(LuaSettings,string)=>(any)",
    GetAttributeChangedSignal="(LuaSettings,string)=>(any)",
    GetAttributes="(LuaSettings)=>(any)",
    GetChildren="(LuaSettings)=>(any)",
    GetDebugId="(LuaSettings,number)=>(string)",
    GetDescendants="(LuaSettings)=>(any)",
    GetFullName="(LuaSettings)=>(string)",
    GetPropertyChangedSignal="(LuaSettings,string)=>(any)",
    IsA="(LuaSettings,string)=>(boolean)",
    IsAncestorOf="(LuaSettings,any)=>(boolean)",
    IsDescendantOf="(LuaSettings,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(LuaSettings)=>()",
    RobloxLocked="boolean",
    SetAttribute="(LuaSettings,string,any)=>()",
    Tags="any",
    WaitForChild="(LuaSettings,string,number)=>(any)",
    WaitingThreadsBudget="number",
    archivable="boolean",
    childAdded="Event",
    children="(LuaSettings)=>(any)",
    className="string",
    clone="(LuaSettings)=>(any)",
    destroy="(LuaSettings)=>()",
    findFirstChild="(LuaSettings,string,boolean)=>(any)",
    getChildren="(LuaSettings)=>(any)",
    isA="(LuaSettings,string)=>(boolean)",
    isDescendantOf="(LuaSettings,any)=>(boolean)",
    remove="(LuaSettings)=>()"}


, BackpackItem={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BackpackItem)=>()",
    Clone="(BackpackItem)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BackpackItem)=>()",
    FindFirstAncestor="(BackpackItem,string)=>(any)",
    FindFirstAncestorOfClass="(BackpackItem,string)=>(any)",
    FindFirstAncestorWhichIsA="(BackpackItem,string)=>(any)",
    FindFirstChild="(BackpackItem,string,boolean)=>(any)",
    FindFirstChildOfClass="(BackpackItem,string)=>(any)",
    FindFirstChildWhichIsA="(BackpackItem,string,boolean)=>(any)",
    GetAttribute="(BackpackItem,string)=>(any)",
    GetAttributeChangedSignal="(BackpackItem,string)=>(any)",
    GetAttributes="(BackpackItem)=>(any)",
    GetChildren="(BackpackItem)=>(any)",
    GetDebugId="(BackpackItem,number)=>(string)",
    GetDescendants="(BackpackItem)=>(any)",
    GetFullName="(BackpackItem)=>(string)",
    GetPropertyChangedSignal="(BackpackItem,string)=>(any)",
    IsA="(BackpackItem,string)=>(boolean)",
    IsAncestorOf="(BackpackItem,any)=>(boolean)",
    IsDescendantOf="(BackpackItem,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(BackpackItem)=>()",
    RobloxLocked="boolean",
    SetAttribute="(BackpackItem,string,any)=>()",
    Tags="any",
    TextureId="any",
    WaitForChild="(BackpackItem,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(BackpackItem)=>(any)",
    className="string",
    clone="(BackpackItem)=>(any)",
    destroy="(BackpackItem)=>()",
    findFirstChild="(BackpackItem,string,boolean)=>(any)",
    getChildren="(BackpackItem)=>(any)",
    isA="(BackpackItem,string)=>(boolean)",
    isDescendantOf="(BackpackItem,any)=>(boolean)",
    remove="(BackpackItem)=>()"}


, IntConstrainedValue={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(IntConstrainedValue)=>()",
    Clone="(IntConstrainedValue)=>(any)",
    ConstrainedValue="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(IntConstrainedValue)=>()",
    FindFirstAncestor="(IntConstrainedValue,string)=>(any)",
    FindFirstAncestorOfClass="(IntConstrainedValue,string)=>(any)",
    FindFirstAncestorWhichIsA="(IntConstrainedValue,string)=>(any)",
    FindFirstChild="(IntConstrainedValue,string,boolean)=>(any)",
    FindFirstChildOfClass="(IntConstrainedValue,string)=>(any)",
    FindFirstChildWhichIsA="(IntConstrainedValue,string,boolean)=>(any)",
    GetAttribute="(IntConstrainedValue,string)=>(any)",
    GetAttributeChangedSignal="(IntConstrainedValue,string)=>(any)",
    GetAttributes="(IntConstrainedValue)=>(any)",
    GetChildren="(IntConstrainedValue)=>(any)",
    GetDebugId="(IntConstrainedValue,number)=>(string)",
    GetDescendants="(IntConstrainedValue)=>(any)",
    GetFullName="(IntConstrainedValue)=>(string)",
    GetPropertyChangedSignal="(IntConstrainedValue,string)=>(any)",
    IsA="(IntConstrainedValue,string)=>(boolean)",
    IsAncestorOf="(IntConstrainedValue,any)=>(boolean)",
    IsDescendantOf="(IntConstrainedValue,any)=>(boolean)",
    MaxValue="number",
    MinValue="number",
    Name="string",
    Parent="any",
    Remove="(IntConstrainedValue)=>()",
    RobloxLocked="boolean",
    SetAttribute="(IntConstrainedValue,string,any)=>()",
    Tags="any",
    Value="number",
    WaitForChild="(IntConstrainedValue,string,number)=>(any)",
    archivable="boolean",
    changed="Event",
    childAdded="Event",
    children="(IntConstrainedValue)=>(any)",
    className="string",
    clone="(IntConstrainedValue)=>(any)",
    destroy="(IntConstrainedValue)=>()",
    findFirstChild="(IntConstrainedValue,string,boolean)=>(any)",
    getChildren="(IntConstrainedValue)=>(any)",
    isA="(IntConstrainedValue,string)=>(boolean)",
    isDescendantOf="(IntConstrainedValue,any)=>(boolean)",
    remove="(IntConstrainedValue)=>()",
    value="number"}


, BlockMesh={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Bevel="number",
    Bevel Roundness="number",
    Bulge="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BlockMesh)=>()",
    Clone="(BlockMesh)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BlockMesh)=>()",
    FindFirstAncestor="(BlockMesh,string)=>(any)",
    FindFirstAncestorOfClass="(BlockMesh,string)=>(any)",
    FindFirstAncestorWhichIsA="(BlockMesh,string)=>(any)",
    FindFirstChild="(BlockMesh,string,boolean)=>(any)",
    FindFirstChildOfClass="(BlockMesh,string)=>(any)",
    FindFirstChildWhichIsA="(BlockMesh,string,boolean)=>(any)",
    GetAttribute="(BlockMesh,string)=>(any)",
    GetAttributeChangedSignal="(BlockMesh,string)=>(any)",
    GetAttributes="(BlockMesh)=>(any)",
    GetChildren="(BlockMesh)=>(any)",
    GetDebugId="(BlockMesh,number)=>(string)",
    GetDescendants="(BlockMesh)=>(any)",
    GetFullName="(BlockMesh)=>(string)",
    GetPropertyChangedSignal="(BlockMesh,string)=>(any)",
    IsA="(BlockMesh,string)=>(boolean)",
    IsAncestorOf="(BlockMesh,any)=>(boolean)",
    IsDescendantOf="(BlockMesh,any)=>(boolean)",
    LODX="any",
    LODY="any",
    Name="string",
    Offset="Vector3",
    Parent="any",
    Remove="(BlockMesh)=>()",
    RobloxLocked="boolean",
    Scale="Vector3",
    SetAttribute="(BlockMesh,string,any)=>()",
    Tags="any",
    VertexColor="Vector3",
    WaitForChild="(BlockMesh,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(BlockMesh)=>(any)",
    className="string",
    clone="(BlockMesh)=>(any)",
    destroy="(BlockMesh)=>()",
    findFirstChild="(BlockMesh,string,boolean)=>(any)",
    getChildren="(BlockMesh)=>(any)",
    isA="(BlockMesh,string)=>(boolean)",
    isDescendantOf="(BlockMesh,any)=>(boolean)",
    remove="(BlockMesh)=>()"}


, StudioData={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(StudioData)=>()",
    Clone="(StudioData)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(StudioData)=>()",
    EnableScriptCollabOnLoad="boolean",
    FindFirstAncestor="(StudioData,string)=>(any)",
    FindFirstAncestorOfClass="(StudioData,string)=>(any)",
    FindFirstAncestorWhichIsA="(StudioData,string)=>(any)",
    FindFirstChild="(StudioData,string,boolean)=>(any)",
    FindFirstChildOfClass="(StudioData,string)=>(any)",
    FindFirstChildWhichIsA="(StudioData,string,boolean)=>(any)",
    GetAttribute="(StudioData,string)=>(any)",
    GetAttributeChangedSignal="(StudioData,string)=>(any)",
    GetAttributes="(StudioData)=>(any)",
    GetChildren="(StudioData)=>(any)",
    GetDebugId="(StudioData,number)=>(string)",
    GetDescendants="(StudioData)=>(any)",
    GetFullName="(StudioData)=>(string)",
    GetPropertyChangedSignal="(StudioData,string)=>(any)",
    IsA="(StudioData,string)=>(boolean)",
    IsAncestorOf="(StudioData,any)=>(boolean)",
    IsDescendantOf="(StudioData,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(StudioData)=>()",
    RobloxLocked="boolean",
    SetAttribute="(StudioData,string,any)=>()",
    SrcPlaceId="number",
    SrcUniverseId="number",
    Tags="any",
    WaitForChild="(StudioData,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(StudioData)=>(any)",
    className="string",
    clone="(StudioData)=>(any)",
    destroy="(StudioData)=>()",
    findFirstChild="(StudioData,string,boolean)=>(any)",
    getChildren="(StudioData)=>(any)",
    isA="(StudioData,string)=>(boolean)",
    isDescendantOf="(StudioData,any)=>(boolean)",
    remove="(StudioData)=>()"}


, BadgeService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AwardBadge="(BadgeService,number,number)=>(boolean)",
    BadgeAwarded="Event",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BadgeService)=>()",
    Clone="(BadgeService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BadgeService)=>()",
    FindFirstAncestor="(BadgeService,string)=>(any)",
    FindFirstAncestorOfClass="(BadgeService,string)=>(any)",
    FindFirstAncestorWhichIsA="(BadgeService,string)=>(any)",
    FindFirstChild="(BadgeService,string,boolean)=>(any)",
    FindFirstChildOfClass="(BadgeService,string)=>(any)",
    FindFirstChildWhichIsA="(BadgeService,string,boolean)=>(any)",
    GetAttribute="(BadgeService,string)=>(any)",
    GetAttributeChangedSignal="(BadgeService,string)=>(any)",
    GetAttributes="(BadgeService)=>(any)",
    GetBadgeInfoAsync="(BadgeService,number)=>(any)",
    GetChildren="(BadgeService)=>(any)",
    GetDebugId="(BadgeService,number)=>(string)",
    GetDescendants="(BadgeService)=>(any)",
    GetFullName="(BadgeService)=>(string)",
    GetPropertyChangedSignal="(BadgeService,string)=>(any)",
    IsA="(BadgeService,string)=>(boolean)",
    IsAncestorOf="(BadgeService,any)=>(boolean)",
    IsDescendantOf="(BadgeService,any)=>(boolean)",
    IsDisabled="(BadgeService,number)=>(boolean)",
    IsLegal="(BadgeService,number)=>(boolean)",
    Name="string",
    OnBadgeAwarded="Event",
    Parent="any",
    Remove="(BadgeService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(BadgeService,string,any)=>()",
    Tags="any",
    UserHasBadge="(BadgeService,number,number)=>(boolean)",
    UserHasBadgeAsync="(BadgeService,number,number)=>(boolean)",
    WaitForChild="(BadgeService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(BadgeService)=>(any)",
    className="string",
    clone="(BadgeService)=>(any)",
    destroy="(BadgeService)=>()",
    findFirstChild="(BadgeService,string,boolean)=>(any)",
    getChildren="(BadgeService)=>(any)",
    isA="(BadgeService,string)=>(boolean)",
    isDescendantOf="(BadgeService,any)=>(boolean)",
    remove="(BadgeService)=>()"}


, UserGameSettings={
    AllTutorialsDisabled="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CameraMode="any",
    CameraYInverted="boolean",
    Changed="Event",
    ChatVisible="boolean",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(UserGameSettings)=>()",
    Clone="(UserGameSettings)=>(any)",
    CompletedTutorials="string",
    ComputerCameraMovementChanged="boolean",
    ComputerCameraMovementMode="any",
    ComputerMovementChanged="boolean",
    ComputerMovementMode="any",
    ControlMode="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(UserGameSettings)=>()",
    FindFirstAncestor="(UserGameSettings,string)=>(any)",
    FindFirstAncestorOfClass="(UserGameSettings,string)=>(any)",
    FindFirstAncestorWhichIsA="(UserGameSettings,string)=>(any)",
    FindFirstChild="(UserGameSettings,string,boolean)=>(any)",
    FindFirstChildOfClass="(UserGameSettings,string)=>(any)",
    FindFirstChildWhichIsA="(UserGameSettings,string,boolean)=>(any)",
    Fullscreen="boolean",
    FullscreenChanged="Event",
    GamepadCameraSensitivity="number",
    GetAttribute="(UserGameSettings,string)=>(any)",
    GetAttributeChangedSignal="(UserGameSettings,string)=>(any)",
    GetAttributes="(UserGameSettings)=>(any)",
    GetCameraYInvertValue="(UserGameSettings)=>(number)",
    GetChildren="(UserGameSettings)=>(any)",
    GetDebugId="(UserGameSettings,number)=>(string)",
    GetDescendants="(UserGameSettings)=>(any)",
    GetFullName="(UserGameSettings)=>(string)",
    GetOnboardingCompleted="(UserGameSettings,string)=>(boolean)",
    GetPropertyChangedSignal="(UserGameSettings,string)=>(any)",
    GetTutorialState="(UserGameSettings,string)=>(boolean)",
    HasEverUsedVR="boolean",
    InFullScreen="(UserGameSettings)=>(boolean)",
    InStudioMode="(UserGameSettings)=>(boolean)",
    IsA="(UserGameSettings,string)=>(boolean)",
    IsAncestorOf="(UserGameSettings,any)=>(boolean)",
    IsDescendantOf="(UserGameSettings,any)=>(boolean)",
    IsUsingCameraYInverted="boolean",
    IsUsingGamepadCameraSensitivity="boolean",
    MasterVolume="number",
    MicroProfilerWebServerEnabled="boolean",
    MicroProfilerWebServerIP="string",
    MicroProfilerWebServerPort="number",
    MouseSensitivity="number",
    MouseSensitivityFirstPerson="Vector2",
    MouseSensitivityThirdPerson="Vector2",
    Name="string",
    OnScreenProfilerEnabled="boolean",
    OnboardingsCompleted="string",
    Parent="any",
    PerformanceStatsVisible="boolean",
    PerformanceStatsVisibleChanged="Event",
    RCCProfilerRecordFrameRate="number",
    RCCProfilerRecordTimeFrame="number",
    Remove="(UserGameSettings)=>()",
    ResetOnboardingCompleted="(UserGameSettings,string)=>()",
    RobloxLocked="boolean",
    Rotation,="any",
    SavedQualityLevel="any",
    SetAttribute="(UserGameSettings,string,any)=>()",
    SetCameraYInvertVisible="(UserGameSettings)=>()",
    SetGamepadCameraSensitivityVisible="(UserGameSettings)=>()",
    SetOnboardingCompleted="(UserGameSettings,string)=>()",
    SetTutorialState="(UserGameSettings,string,boolean)=>()",
    StartMaximized="boolean",
    StartScreenPosition="Vector2",
    StartScreenSize="Vector2",
    StudioModeChanged="Event",
    Tags="any",
    TouchCameraMovementChanged="boolean",
    TouchCameraMovementMode="any",
    TouchMovementChanged="boolean",
    TouchMovementMode="any",
    UsedCoreGuiIsVisibleToggle="boolean",
    UsedCustomGuiIsVisibleToggle="boolean",
    UsedHideHudShortcut="boolean",
    VREnabled="boolean",
    VRRotationIntensity="number",
    WaitForChild="(UserGameSettings,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(UserGameSettings)=>(any)",
    className="string",
    clone="(UserGameSettings)=>(any)",
    destroy="(UserGameSettings)=>()",
    findFirstChild="(UserGameSettings,string,boolean)=>(any)",
    gaID="string",
    getChildren="(UserGameSettings)=>(any)",
    isA="(UserGameSettings,string)=>(boolean)",
    isDescendantOf="(UserGameSettings,any)=>(boolean)",
    remove="(UserGameSettings)=>()"}


, StarterCharacterScripts={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(StarterCharacterScripts)=>()",
    Clone="(StarterCharacterScripts)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(StarterCharacterScripts)=>()",
    FindFirstAncestor="(StarterCharacterScripts,string)=>(any)",
    FindFirstAncestorOfClass="(StarterCharacterScripts,string)=>(any)",
    FindFirstAncestorWhichIsA="(StarterCharacterScripts,string)=>(any)",
    FindFirstChild="(StarterCharacterScripts,string,boolean)=>(any)",
    FindFirstChildOfClass="(StarterCharacterScripts,string)=>(any)",
    FindFirstChildWhichIsA="(StarterCharacterScripts,string,boolean)=>(any)",
    GetAttribute="(StarterCharacterScripts,string)=>(any)",
    GetAttributeChangedSignal="(StarterCharacterScripts,string)=>(any)",
    GetAttributes="(StarterCharacterScripts)=>(any)",
    GetChildren="(StarterCharacterScripts)=>(any)",
    GetDebugId="(StarterCharacterScripts,number)=>(string)",
    GetDescendants="(StarterCharacterScripts)=>(any)",
    GetFullName="(StarterCharacterScripts)=>(string)",
    GetPropertyChangedSignal="(StarterCharacterScripts,string)=>(any)",
    IsA="(StarterCharacterScripts,string)=>(boolean)",
    IsAncestorOf="(StarterCharacterScripts,any)=>(boolean)",
    IsDescendantOf="(StarterCharacterScripts,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(StarterCharacterScripts)=>()",
    RobloxLocked="boolean",
    SetAttribute="(StarterCharacterScripts,string,any)=>()",
    Tags="any",
    WaitForChild="(StarterCharacterScripts,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(StarterCharacterScripts)=>(any)",
    className="string",
    clone="(StarterCharacterScripts)=>(any)",
    destroy="(StarterCharacterScripts)=>()",
    findFirstChild="(StarterCharacterScripts,string,boolean)=>(any)",
    getChildren="(StarterCharacterScripts)=>(any)",
    isA="(StarterCharacterScripts,string)=>(boolean)",
    isDescendantOf="(StarterCharacterScripts,any)=>(boolean)",
    remove="(StarterCharacterScripts)=>()"}


, PluginGui={
    AbsolutePosition="Vector2",
    AbsoluteRotation="number",
    AbsoluteSize="Vector2",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoLocalize="boolean",
    BindToClose="(PluginGui,any)=>()",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PluginGui)=>()",
    Clone="(PluginGui)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PluginGui)=>()",
    Enabled="boolean",
    FindFirstAncestor="(PluginGui,string)=>(any)",
    FindFirstAncestorOfClass="(PluginGui,string)=>(any)",
    FindFirstAncestorWhichIsA="(PluginGui,string)=>(any)",
    FindFirstChild="(PluginGui,string,boolean)=>(any)",
    FindFirstChildOfClass="(PluginGui,string)=>(any)",
    FindFirstChildWhichIsA="(PluginGui,string,boolean)=>(any)",
    GetAttribute="(PluginGui,string)=>(any)",
    GetAttributeChangedSignal="(PluginGui,string)=>(any)",
    GetAttributes="(PluginGui)=>(any)",
    GetChildren="(PluginGui)=>(any)",
    GetDebugId="(PluginGui,number)=>(string)",
    GetDescendants="(PluginGui)=>(any)",
    GetFullName="(PluginGui)=>(string)",
    GetPropertyChangedSignal="(PluginGui,string)=>(any)",
    GetRelativeMousePosition="(PluginGui)=>(Vector2)",
    IsA="(PluginGui,string)=>(boolean)",
    IsAncestorOf="(PluginGui,any)=>(boolean)",
    IsDescendantOf="(PluginGui,any)=>(boolean)",
    IsNotOccluded="boolean",
    Localize="boolean",
    Name="string",
    Parent="any",
    PluginDragDropped="Event",
    PluginDragEntered="Event",
    PluginDragLeft="Event",
    PluginDragMoved="Event",
    Remove="(PluginGui)=>()",
    ResetOnSpawn="boolean",
    RobloxLocked="boolean",
    RootLocalizationTable="any",
    SetAttribute="(PluginGui,string,any)=>()",
    Tags="any",
    Title="string",
    WaitForChild="(PluginGui,string,number)=>(any)",
    WindowFocusReleased="Event",
    WindowFocused="Event",
    ZIndexBehavior="any",
    archivable="boolean",
    childAdded="Event",
    children="(PluginGui)=>(any)",
    className="string",
    clone="(PluginGui)=>(any)",
    destroy="(PluginGui)=>()",
    findFirstChild="(PluginGui,string,boolean)=>(any)",
    getChildren="(PluginGui)=>(any)",
    isA="(PluginGui,string)=>(boolean)",
    isDescendantOf="(PluginGui,any)=>(boolean)",
    remove="(PluginGui)=>()"}


, DebuggerManager={
    AddDebugger="(DebuggerManager,any)=>(any)",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(DebuggerManager)=>()",
    Clone="(DebuggerManager)=>(any)",
    DataCost="number",
    DebuggerAdded="Event",
    DebuggerRemoved="Event",
    DebuggingEnabled="boolean",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(DebuggerManager)=>()",
    EnableDebugging="(DebuggerManager)=>()",
    FindFirstAncestor="(DebuggerManager,string)=>(any)",
    FindFirstAncestorOfClass="(DebuggerManager,string)=>(any)",
    FindFirstAncestorWhichIsA="(DebuggerManager,string)=>(any)",
    FindFirstChild="(DebuggerManager,string,boolean)=>(any)",
    FindFirstChildOfClass="(DebuggerManager,string)=>(any)",
    FindFirstChildWhichIsA="(DebuggerManager,string,boolean)=>(any)",
    GetAttribute="(DebuggerManager,string)=>(any)",
    GetAttributeChangedSignal="(DebuggerManager,string)=>(any)",
    GetAttributes="(DebuggerManager)=>(any)",
    GetChildren="(DebuggerManager)=>(any)",
    GetDebugId="(DebuggerManager,number)=>(string)",
    GetDebuggers="(DebuggerManager)=>(any)",
    GetDescendants="(DebuggerManager)=>(any)",
    GetFullName="(DebuggerManager)=>(string)",
    GetPropertyChangedSignal="(DebuggerManager,string)=>(any)",
    IsA="(DebuggerManager,string)=>(boolean)",
    IsAncestorOf="(DebuggerManager,any)=>(boolean)",
    IsDescendantOf="(DebuggerManager,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(DebuggerManager)=>()",
    Resume="(DebuggerManager)=>()",
    RobloxLocked="boolean",
    SetAttribute="(DebuggerManager,string,any)=>()",
    StepIn="(DebuggerManager)=>()",
    StepOut="(DebuggerManager)=>()",
    StepOver="(DebuggerManager)=>()",
    Tags="any",
    WaitForChild="(DebuggerManager,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(DebuggerManager)=>(any)",
    className="string",
    clone="(DebuggerManager)=>(any)",
    destroy="(DebuggerManager)=>()",
    findFirstChild="(DebuggerManager,string,boolean)=>(any)",
    getChildren="(DebuggerManager)=>(any)",
    isA="(DebuggerManager,string)=>(boolean)",
    isDescendantOf="(DebuggerManager,any)=>(boolean)",
    remove="(DebuggerManager)=>()"}


, BasePart={
    AncestryChanged="Event",
    Anchored="boolean",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BackParamA="number",
    BackParamB="number",
    BackSurface="any",
    BackSurfaceInput="any",
    BottomParamA="number",
    BottomParamB="number",
    BottomSurface="any",
    BottomSurfaceInput="any",
    BreakJoints="(BasePart)=>()",
    BrickColor="any",
    CFrame="CFrame",
    CanCollide="boolean",
    CanCollideWith="(BasePart,any)=>(boolean)",
    CanSetNetworkOwnership="(BasePart)=>(any)",
    CastShadow="boolean",
    CenterOfMass="Vector3",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BasePart)=>()",
    Clone="(BasePart)=>(any)",
    CollisionGroupId="number",
    Color="Color3",
    Color3uint8="any",
    CustomPhysicalProperties="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BasePart)=>()",
    DraggingV1="boolean",
    Elasticity="number",
    FindFirstAncestor="(BasePart,string)=>(any)",
    FindFirstAncestorOfClass="(BasePart,string)=>(any)",
    FindFirstAncestorWhichIsA="(BasePart,string)=>(any)",
    FindFirstChild="(BasePart,string,boolean)=>(any)",
    FindFirstChildOfClass="(BasePart,string)=>(any)",
    FindFirstChildWhichIsA="(BasePart,string,boolean)=>(any)",
    Friction="number",
    FrontParamA="number",
    FrontParamB="number",
    FrontSurface="any",
    FrontSurfaceInput="any",
    GetAttribute="(BasePart,string)=>(any)",
    GetAttributeChangedSignal="(BasePart,string)=>(any)",
    GetAttributes="(BasePart)=>(any)",
    GetChildren="(BasePart)=>(any)",
    GetConnectedParts="(BasePart,boolean)=>(any)",
    GetDebugId="(BasePart,number)=>(string)",
    GetDescendants="(BasePart)=>(any)",
    GetFullName="(BasePart)=>(string)",
    GetJoints="(BasePart)=>(any)",
    GetMass="(BasePart)=>(number)",
    GetNetworkOwner="(BasePart)=>(any)",
    GetNetworkOwnershipAuto="(BasePart)=>(boolean)",
    GetPropertyChangedSignal="(BasePart,string)=>(any)",
    GetRenderCFrame="(BasePart)=>(CFrame)",
    GetRootPart="(BasePart)=>(any)",
    GetTouchingParts="(BasePart)=>(any)",
    IsA="(BasePart,string)=>(boolean)",
    IsAncestorOf="(BasePart,any)=>(boolean)",
    IsDescendantOf="(BasePart,any)=>(boolean)",
    IsGrounded="(BasePart)=>(boolean)",
    LeftParamA="number",
    LeftParamB="number",
    LeftSurface="any",
    LeftSurfaceInput="any",
    LocalSimulationTouched="Event",
    LocalTransparencyModifier="number",
    Locked="boolean",
    MakeJoints="(BasePart)=>()",
    Massless="boolean",
    Material="any",
    Name="string",
    NetworkIsSleeping="boolean",
    NetworkOwnerChanged="Event",
    NetworkOwnerV3="any",
    NetworkOwnershipRule="any",
    Orientation="Vector3",
    OutfitChanged="Event",
    Parent="any",
    Position="Vector3",
    ReceiveAge="number",
    Reflectance="number",
    Remove="(BasePart)=>()",
    Resize="(BasePart,any,number)=>(boolean)",
    ResizeIncrement="number",
    ResizeableFaces="any",
    RightParamA="number",
    RightParamB="number",
    RightSurface="any",
    RightSurfaceInput="any",
    RobloxLocked="boolean",
    RootPriority="number",
    RotVelocity="Vector3",
    Rotation="Vector3",
    SetAttribute="(BasePart,string,any)=>()",
    SetNetworkOwner="(BasePart,any)=>()",
    SetNetworkOwnershipAuto="(BasePart)=>()",
    Size="Vector3",
    SpecificGravity="number",
    StoppedTouching="Event",
    SubtractAsync="(BasePart,any,any,any)=>(any)",
    Tags="any",
    TopParamA="number",
    TopParamB="number",
    TopSurface="any",
    TopSurfaceInput="any",
    TouchEnded="Event",
    Touched="Event",
    Transparency="number",
    UnionAsync="(BasePart,any,any,any)=>(any)",
    Velocity="Vector3",
    WaitForChild="(BasePart,string,number)=>(any)",
    archivable="boolean",
    breakJoints="(BasePart)=>()",
    brickColor="any",
    childAdded="Event",
    children="(BasePart)=>(any)",
    className="string",
    clone="(BasePart)=>(any)",
    destroy="(BasePart)=>()",
    findFirstChild="(BasePart,string,boolean)=>(any)",
    getChildren="(BasePart)=>(any)",
    getMass="(BasePart)=>(number)",
    isA="(BasePart,string)=>(boolean)",
    isDescendantOf="(BasePart,any)=>(boolean)",
    makeJoints="(BasePart)=>()",
    remove="(BasePart)=>()",
    resize="(BasePart,any,number)=>(boolean)",
    siz="Vector3",
    size="Vector3",
    touched="Event"}


, UserStorageService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(UserStorageService)=>()",
    Clone="(UserStorageService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(UserStorageService)=>()",
    FindFirstAncestor="(UserStorageService,string)=>(any)",
    FindFirstAncestorOfClass="(UserStorageService,string)=>(any)",
    FindFirstAncestorWhichIsA="(UserStorageService,string)=>(any)",
    FindFirstChild="(UserStorageService,string,boolean)=>(any)",
    FindFirstChildOfClass="(UserStorageService,string)=>(any)",
    FindFirstChildWhichIsA="(UserStorageService,string,boolean)=>(any)",
    Flush="(UserStorageService)=>()",
    GetAttribute="(UserStorageService,string)=>(any)",
    GetAttributeChangedSignal="(UserStorageService,string)=>(any)",
    GetAttributes="(UserStorageService)=>(any)",
    GetChildren="(UserStorageService)=>(any)",
    GetDebugId="(UserStorageService,number)=>(string)",
    GetDescendants="(UserStorageService)=>(any)",
    GetFullName="(UserStorageService)=>(string)",
    GetItem="(UserStorageService,string)=>(string)",
    GetPropertyChangedSignal="(UserStorageService,string)=>(any)",
    IsA="(UserStorageService,string)=>(boolean)",
    IsAncestorOf="(UserStorageService,any)=>(boolean)",
    IsDescendantOf="(UserStorageService,any)=>(boolean)",
    ItemWasSet="Event",
    Name="string",
    Parent="any",
    Remove="(UserStorageService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(UserStorageService,string,any)=>()",
    SetItem="(UserStorageService,string,string)=>()",
    StoreWasCleared="Event",
    Tags="any",
    WaitForChild="(UserStorageService,string,number)=>(any)",
    WhenLoaded="(UserStorageService,any)=>()",
    archivable="boolean",
    childAdded="Event",
    children="(UserStorageService)=>(any)",
    className="string",
    clone="(UserStorageService)=>(any)",
    destroy="(UserStorageService)=>()",
    findFirstChild="(UserStorageService,string,boolean)=>(any)",
    getChildren="(UserStorageService)=>(any)",
    isA="(UserStorageService,string)=>(boolean)",
    isDescendantOf="(UserStorageService,any)=>(boolean)",
    remove="(UserStorageService)=>()"}


, BoxHandleAdornment={
    Adornee="any",
    AlwaysOnTop="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CFrame="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BoxHandleAdornment)=>()",
    Clone="(BoxHandleAdornment)=>(any)",
    Color="any",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BoxHandleAdornment)=>()",
    FindFirstAncestor="(BoxHandleAdornment,string)=>(any)",
    FindFirstAncestorOfClass="(BoxHandleAdornment,string)=>(any)",
    FindFirstAncestorWhichIsA="(BoxHandleAdornment,string)=>(any)",
    FindFirstChild="(BoxHandleAdornment,string,boolean)=>(any)",
    FindFirstChildOfClass="(BoxHandleAdornment,string)=>(any)",
    FindFirstChildWhichIsA="(BoxHandleAdornment,string,boolean)=>(any)",
    GetAttribute="(BoxHandleAdornment,string)=>(any)",
    GetAttributeChangedSignal="(BoxHandleAdornment,string)=>(any)",
    GetAttributes="(BoxHandleAdornment)=>(any)",
    GetChildren="(BoxHandleAdornment)=>(any)",
    GetDebugId="(BoxHandleAdornment,number)=>(string)",
    GetDescendants="(BoxHandleAdornment)=>(any)",
    GetFullName="(BoxHandleAdornment)=>(string)",
    GetPropertyChangedSignal="(BoxHandleAdornment,string)=>(any)",
    IsA="(BoxHandleAdornment,string)=>(boolean)",
    IsAncestorOf="(BoxHandleAdornment,any)=>(boolean)",
    IsDescendantOf="(BoxHandleAdornment,any)=>(boolean)",
    MouseButton1Down="Event",
    MouseButton1Up="Event",
    MouseEnter="Event",
    MouseLeave="Event",
    Name="string",
    Parent="any",
    Remove="(BoxHandleAdornment)=>()",
    RobloxLocked="boolean",
    SetAttribute="(BoxHandleAdornment,string,any)=>()",
    Size="Vector3",
    SizeRelativeOffset="Vector3",
    Tags="any",
    Transparency="number",
    Visible="boolean",
    WaitForChild="(BoxHandleAdornment,string,number)=>(any)",
    ZIndex="number",
    archivable="boolean",
    childAdded="Event",
    children="(BoxHandleAdornment)=>(any)",
    className="string",
    clone="(BoxHandleAdornment)=>(any)",
    destroy="(BoxHandleAdornment)=>()",
    findFirstChild="(BoxHandleAdornment,string,boolean)=>(any)",
    getChildren="(BoxHandleAdornment)=>(any)",
    isA="(BoxHandleAdornment,string)=>(boolean)",
    isDescendantOf="(BoxHandleAdornment,any)=>(boolean)",
    remove="(BoxHandleAdornment)=>()"}


, Beam={
    AncestryChanged="Event",
    Archivable="boolean",
    Attachment0="any",
    Attachment1="any",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Beam)=>()",
    Clone="(Beam)=>(any)",
    Color="any",
    CurveSize0="number",
    CurveSize1="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Beam)=>()",
    Enabled="boolean",
    FaceCamera="boolean",
    FindFirstAncestor="(Beam,string)=>(any)",
    FindFirstAncestorOfClass="(Beam,string)=>(any)",
    FindFirstAncestorWhichIsA="(Beam,string)=>(any)",
    FindFirstChild="(Beam,string,boolean)=>(any)",
    FindFirstChildOfClass="(Beam,string)=>(any)",
    FindFirstChildWhichIsA="(Beam,string,boolean)=>(any)",
    GetAttribute="(Beam,string)=>(any)",
    GetAttributeChangedSignal="(Beam,string)=>(any)",
    GetAttributes="(Beam)=>(any)",
    GetChildren="(Beam)=>(any)",
    GetDebugId="(Beam,number)=>(string)",
    GetDescendants="(Beam)=>(any)",
    GetFullName="(Beam)=>(string)",
    GetPropertyChangedSignal="(Beam,string)=>(any)",
    IsA="(Beam,string)=>(boolean)",
    IsAncestorOf="(Beam,any)=>(boolean)",
    IsDescendantOf="(Beam,any)=>(boolean)",
    LightEmission="number",
    LightInfluence="number",
    Name="string",
    Parent="any",
    Remove="(Beam)=>()",
    RobloxLocked="boolean",
    Segments="number",
    SetAttribute="(Beam,string,any)=>()",
    SetTextureOffset="(Beam,number)=>()",
    Tags="any",
    Texture="any",
    TextureLength="number",
    TextureMode="any",
    TextureSpeed="number",
    Transparency="any",
    WaitForChild="(Beam,string,number)=>(any)",
    Width0="number",
    Width1="number",
    ZOffset="number",
    archivable="boolean",
    childAdded="Event",
    children="(Beam)=>(any)",
    className="string",
    clone="(Beam)=>(any)",
    destroy="(Beam)=>()",
    findFirstChild="(Beam,string,boolean)=>(any)",
    getChildren="(Beam)=>(any)",
    isA="(Beam,string)=>(boolean)",
    isDescendantOf="(Beam,any)=>(boolean)",
    remove="(Beam)=>()"}


, BillboardGui={
    AbsolutePosition="Vector2",
    AbsoluteRotation="number",
    AbsoluteSize="Vector2",
    Active="boolean",
    Adornee="any",
    AlwaysOnTop="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoLocalize="boolean",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BillboardGui)=>()",
    ClipsDescendants="boolean",
    Clone="(BillboardGui)=>(any)",
    CurrentDistance="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BillboardGui)=>()",
    DistanceLowerLimit="number",
    DistanceStep="number",
    DistanceUpperLimit="number",
    Enabled="boolean",
    ExtentsOffset="Vector3",
    ExtentsOffsetWorldSpace="Vector3",
    FindFirstAncestor="(BillboardGui,string)=>(any)",
    FindFirstAncestorOfClass="(BillboardGui,string)=>(any)",
    FindFirstAncestorWhichIsA="(BillboardGui,string)=>(any)",
    FindFirstChild="(BillboardGui,string,boolean)=>(any)",
    FindFirstChildOfClass="(BillboardGui,string)=>(any)",
    FindFirstChildWhichIsA="(BillboardGui,string,boolean)=>(any)",
    GetAttribute="(BillboardGui,string)=>(any)",
    GetAttributeChangedSignal="(BillboardGui,string)=>(any)",
    GetAttributes="(BillboardGui)=>(any)",
    GetChildren="(BillboardGui)=>(any)",
    GetDebugId="(BillboardGui,number)=>(string)",
    GetDescendants="(BillboardGui)=>(any)",
    GetFullName="(BillboardGui)=>(string)",
    GetPropertyChangedSignal="(BillboardGui,string)=>(any)",
    IsA="(BillboardGui,string)=>(boolean)",
    IsAncestorOf="(BillboardGui,any)=>(boolean)",
    IsDescendantOf="(BillboardGui,any)=>(boolean)",
    IsNotOccluded="boolean",
    LightInfluence="number",
    Localize="boolean",
    MaxDistance="number",
    Name="string",
    Parent="any",
    PlayerToHideFrom="any",
    Remove="(BillboardGui)=>()",
    ResetOnSpawn="boolean",
    RobloxLocked="boolean",
    RootLocalizationTable="any",
    SetAttribute="(BillboardGui,string,any)=>()",
    Size="UDim2",
    SizeOffset="Vector2",
    StudsOffset="Vector3",
    StudsOffsetWorldSpace="Vector3",
    Tags="any",
    WaitForChild="(BillboardGui,string,number)=>(any)",
    ZIndexBehavior="any",
    archivable="boolean",
    childAdded="Event",
    children="(BillboardGui)=>(any)",
    className="string",
    clone="(BillboardGui)=>(any)",
    destroy="(BillboardGui)=>()",
    findFirstChild="(BillboardGui,string,boolean)=>(any)",
    getChildren="(BillboardGui)=>(any)",
    isA="(BillboardGui,string)=>(boolean)",
    isDescendantOf="(BillboardGui,any)=>(boolean)",
    remove="(BillboardGui)=>()"}


, BoolValue={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BoolValue)=>()",
    Clone="(BoolValue)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BoolValue)=>()",
    FindFirstAncestor="(BoolValue,string)=>(any)",
    FindFirstAncestorOfClass="(BoolValue,string)=>(any)",
    FindFirstAncestorWhichIsA="(BoolValue,string)=>(any)",
    FindFirstChild="(BoolValue,string,boolean)=>(any)",
    FindFirstChildOfClass="(BoolValue,string)=>(any)",
    FindFirstChildWhichIsA="(BoolValue,string,boolean)=>(any)",
    GetAttribute="(BoolValue,string)=>(any)",
    GetAttributeChangedSignal="(BoolValue,string)=>(any)",
    GetAttributes="(BoolValue)=>(any)",
    GetChildren="(BoolValue)=>(any)",
    GetDebugId="(BoolValue,number)=>(string)",
    GetDescendants="(BoolValue)=>(any)",
    GetFullName="(BoolValue)=>(string)",
    GetPropertyChangedSignal="(BoolValue,string)=>(any)",
    IsA="(BoolValue,string)=>(boolean)",
    IsAncestorOf="(BoolValue,any)=>(boolean)",
    IsDescendantOf="(BoolValue,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(BoolValue)=>()",
    RobloxLocked="boolean",
    SetAttribute="(BoolValue,string,any)=>()",
    Tags="any",
    Value="boolean",
    WaitForChild="(BoolValue,string,number)=>(any)",
    archivable="boolean",
    changed="Event",
    childAdded="Event",
    children="(BoolValue)=>(any)",
    className="string",
    clone="(BoolValue)=>(any)",
    destroy="(BoolValue)=>()",
    findFirstChild="(BoolValue,string,boolean)=>(any)",
    getChildren="(BoolValue)=>(any)",
    isA="(BoolValue,string)=>(boolean)",
    isDescendantOf="(BoolValue,any)=>(boolean)",
    remove="(BoolValue)=>()"}


, CharacterAppearance={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(CharacterAppearance)=>()",
    Clone="(CharacterAppearance)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(CharacterAppearance)=>()",
    FindFirstAncestor="(CharacterAppearance,string)=>(any)",
    FindFirstAncestorOfClass="(CharacterAppearance,string)=>(any)",
    FindFirstAncestorWhichIsA="(CharacterAppearance,string)=>(any)",
    FindFirstChild="(CharacterAppearance,string,boolean)=>(any)",
    FindFirstChildOfClass="(CharacterAppearance,string)=>(any)",
    FindFirstChildWhichIsA="(CharacterAppearance,string,boolean)=>(any)",
    GetAttribute="(CharacterAppearance,string)=>(any)",
    GetAttributeChangedSignal="(CharacterAppearance,string)=>(any)",
    GetAttributes="(CharacterAppearance)=>(any)",
    GetChildren="(CharacterAppearance)=>(any)",
    GetDebugId="(CharacterAppearance,number)=>(string)",
    GetDescendants="(CharacterAppearance)=>(any)",
    GetFullName="(CharacterAppearance)=>(string)",
    GetPropertyChangedSignal="(CharacterAppearance,string)=>(any)",
    IsA="(CharacterAppearance,string)=>(boolean)",
    IsAncestorOf="(CharacterAppearance,any)=>(boolean)",
    IsDescendantOf="(CharacterAppearance,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(CharacterAppearance)=>()",
    RobloxLocked="boolean",
    SetAttribute="(CharacterAppearance,string,any)=>()",
    Tags="any",
    WaitForChild="(CharacterAppearance,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(CharacterAppearance)=>(any)",
    className="string",
    clone="(CharacterAppearance)=>(any)",
    destroy="(CharacterAppearance)=>()",
    findFirstChild="(CharacterAppearance,string,boolean)=>(any)",
    getChildren="(CharacterAppearance)=>(any)",
    isA="(CharacterAppearance,string)=>(boolean)",
    isDescendantOf="(CharacterAppearance,any)=>(boolean)",
    remove="(CharacterAppearance)=>()"}


, BinaryStringValue={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BinaryStringValue)=>()",
    Clone="(BinaryStringValue)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BinaryStringValue)=>()",
    FindFirstAncestor="(BinaryStringValue,string)=>(any)",
    FindFirstAncestorOfClass="(BinaryStringValue,string)=>(any)",
    FindFirstAncestorWhichIsA="(BinaryStringValue,string)=>(any)",
    FindFirstChild="(BinaryStringValue,string,boolean)=>(any)",
    FindFirstChildOfClass="(BinaryStringValue,string)=>(any)",
    FindFirstChildWhichIsA="(BinaryStringValue,string,boolean)=>(any)",
    GetAttribute="(BinaryStringValue,string)=>(any)",
    GetAttributeChangedSignal="(BinaryStringValue,string)=>(any)",
    GetAttributes="(BinaryStringValue)=>(any)",
    GetChildren="(BinaryStringValue)=>(any)",
    GetDebugId="(BinaryStringValue,number)=>(string)",
    GetDescendants="(BinaryStringValue)=>(any)",
    GetFullName="(BinaryStringValue)=>(string)",
    GetPropertyChangedSignal="(BinaryStringValue,string)=>(any)",
    IsA="(BinaryStringValue,string)=>(boolean)",
    IsAncestorOf="(BinaryStringValue,any)=>(boolean)",
    IsDescendantOf="(BinaryStringValue,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(BinaryStringValue)=>()",
    RobloxLocked="boolean",
    SetAttribute="(BinaryStringValue,string,any)=>()",
    Tags="any",
    Value="any",
    WaitForChild="(BinaryStringValue,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(BinaryStringValue)=>(any)",
    className="string",
    clone="(BinaryStringValue)=>(any)",
    destroy="(BinaryStringValue)=>()",
    findFirstChild="(BinaryStringValue,string,boolean)=>(any)",
    getChildren="(BinaryStringValue)=>(any)",
    isA="(BinaryStringValue,string)=>(boolean)",
    isDescendantOf="(BinaryStringValue,any)=>(boolean)",
    remove="(BinaryStringValue)=>()"}


, BodyMover={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BodyMover)=>()",
    Clone="(BodyMover)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BodyMover)=>()",
    FindFirstAncestor="(BodyMover,string)=>(any)",
    FindFirstAncestorOfClass="(BodyMover,string)=>(any)",
    FindFirstAncestorWhichIsA="(BodyMover,string)=>(any)",
    FindFirstChild="(BodyMover,string,boolean)=>(any)",
    FindFirstChildOfClass="(BodyMover,string)=>(any)",
    FindFirstChildWhichIsA="(BodyMover,string,boolean)=>(any)",
    GetAttribute="(BodyMover,string)=>(any)",
    GetAttributeChangedSignal="(BodyMover,string)=>(any)",
    GetAttributes="(BodyMover)=>(any)",
    GetChildren="(BodyMover)=>(any)",
    GetDebugId="(BodyMover,number)=>(string)",
    GetDescendants="(BodyMover)=>(any)",
    GetFullName="(BodyMover)=>(string)",
    GetPropertyChangedSignal="(BodyMover,string)=>(any)",
    IsA="(BodyMover,string)=>(boolean)",
    IsAncestorOf="(BodyMover,any)=>(boolean)",
    IsDescendantOf="(BodyMover,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(BodyMover)=>()",
    RobloxLocked="boolean",
    SetAttribute="(BodyMover,string,any)=>()",
    Tags="any",
    WaitForChild="(BodyMover,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(BodyMover)=>(any)",
    className="string",
    clone="(BodyMover)=>(any)",
    destroy="(BodyMover)=>()",
    findFirstChild="(BodyMover,string,boolean)=>(any)",
    getChildren="(BodyMover)=>(any)",
    isA="(BodyMover,string)=>(boolean)",
    isDescendantOf="(BodyMover,any)=>(boolean)",
    remove="(BodyMover)=>()"}


, BindableFunction={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BindableFunction)=>()",
    Clone="(BindableFunction)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BindableFunction)=>()",
    FindFirstAncestor="(BindableFunction,string)=>(any)",
    FindFirstAncestorOfClass="(BindableFunction,string)=>(any)",
    FindFirstAncestorWhichIsA="(BindableFunction,string)=>(any)",
    FindFirstChild="(BindableFunction,string,boolean)=>(any)",
    FindFirstChildOfClass="(BindableFunction,string)=>(any)",
    FindFirstChildWhichIsA="(BindableFunction,string,boolean)=>(any)",
    GetAttribute="(BindableFunction,string)=>(any)",
    GetAttributeChangedSignal="(BindableFunction,string)=>(any)",
    GetAttributes="(BindableFunction)=>(any)",
    GetChildren="(BindableFunction)=>(any)",
    GetDebugId="(BindableFunction,number)=>(string)",
    GetDescendants="(BindableFunction)=>(any)",
    GetFullName="(BindableFunction)=>(string)",
    GetPropertyChangedSignal="(BindableFunction,string)=>(any)",
    Invoke="(BindableFunction,any)=>(any)",
    IsA="(BindableFunction,string)=>(boolean)",
    IsAncestorOf="(BindableFunction,any)=>(boolean)",
    IsDescendantOf="(BindableFunction,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(BindableFunction)=>()",
    RobloxLocked="boolean",
    SetAttribute="(BindableFunction,string,any)=>()",
    Tags="any",
    WaitForChild="(BindableFunction,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(BindableFunction)=>(any)",
    className="string",
    clone="(BindableFunction)=>(any)",
    destroy="(BindableFunction)=>()",
    findFirstChild="(BindableFunction,string,boolean)=>(any)",
    getChildren="(BindableFunction)=>(any)",
    isA="(BindableFunction,string)=>(boolean)",
    isDescendantOf="(BindableFunction,any)=>(boolean)",
    remove="(BindableFunction)=>()"}


, BloomEffect={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BloomEffect)=>()",
    Clone="(BloomEffect)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BloomEffect)=>()",
    Enabled="boolean",
    FindFirstAncestor="(BloomEffect,string)=>(any)",
    FindFirstAncestorOfClass="(BloomEffect,string)=>(any)",
    FindFirstAncestorWhichIsA="(BloomEffect,string)=>(any)",
    FindFirstChild="(BloomEffect,string,boolean)=>(any)",
    FindFirstChildOfClass="(BloomEffect,string)=>(any)",
    FindFirstChildWhichIsA="(BloomEffect,string,boolean)=>(any)",
    GetAttribute="(BloomEffect,string)=>(any)",
    GetAttributeChangedSignal="(BloomEffect,string)=>(any)",
    GetAttributes="(BloomEffect)=>(any)",
    GetChildren="(BloomEffect)=>(any)",
    GetDebugId="(BloomEffect,number)=>(string)",
    GetDescendants="(BloomEffect)=>(any)",
    GetFullName="(BloomEffect)=>(string)",
    GetPropertyChangedSignal="(BloomEffect,string)=>(any)",
    Intensity="number",
    IsA="(BloomEffect,string)=>(boolean)",
    IsAncestorOf="(BloomEffect,any)=>(boolean)",
    IsDescendantOf="(BloomEffect,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(BloomEffect)=>()",
    RobloxLocked="boolean",
    SetAttribute="(BloomEffect,string,any)=>()",
    Size="number",
    Tags="any",
    Threshold="number",
    WaitForChild="(BloomEffect,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(BloomEffect)=>(any)",
    className="string",
    clone="(BloomEffect)=>(any)",
    destroy="(BloomEffect)=>()",
    findFirstChild="(BloomEffect,string,boolean)=>(any)",
    getChildren="(BloomEffect)=>(any)",
    isA="(BloomEffect,string)=>(boolean)",
    isDescendantOf="(BloomEffect,any)=>(boolean)",
    remove="(BloomEffect)=>()"}


, BodyAngularVelocity={
    AncestryChanged="Event",
    AngularVelocity="Vector3",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BodyAngularVelocity)=>()",
    Clone="(BodyAngularVelocity)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BodyAngularVelocity)=>()",
    FindFirstAncestor="(BodyAngularVelocity,string)=>(any)",
    FindFirstAncestorOfClass="(BodyAngularVelocity,string)=>(any)",
    FindFirstAncestorWhichIsA="(BodyAngularVelocity,string)=>(any)",
    FindFirstChild="(BodyAngularVelocity,string,boolean)=>(any)",
    FindFirstChildOfClass="(BodyAngularVelocity,string)=>(any)",
    FindFirstChildWhichIsA="(BodyAngularVelocity,string,boolean)=>(any)",
    GetAttribute="(BodyAngularVelocity,string)=>(any)",
    GetAttributeChangedSignal="(BodyAngularVelocity,string)=>(any)",
    GetAttributes="(BodyAngularVelocity)=>(any)",
    GetChildren="(BodyAngularVelocity)=>(any)",
    GetDebugId="(BodyAngularVelocity,number)=>(string)",
    GetDescendants="(BodyAngularVelocity)=>(any)",
    GetFullName="(BodyAngularVelocity)=>(string)",
    GetPropertyChangedSignal="(BodyAngularVelocity,string)=>(any)",
    IsA="(BodyAngularVelocity,string)=>(boolean)",
    IsAncestorOf="(BodyAngularVelocity,any)=>(boolean)",
    IsDescendantOf="(BodyAngularVelocity,any)=>(boolean)",
    MaxTorque="Vector3",
    Name="string",
    P="number",
    Parent="any",
    Remove="(BodyAngularVelocity)=>()",
    RobloxLocked="boolean",
    SetAttribute="(BodyAngularVelocity,string,any)=>()",
    Tags="any",
    WaitForChild="(BodyAngularVelocity,string,number)=>(any)",
    angularvelocity="Vector3",
    archivable="boolean",
    childAdded="Event",
    children="(BodyAngularVelocity)=>(any)",
    className="string",
    clone="(BodyAngularVelocity)=>(any)",
    destroy="(BodyAngularVelocity)=>()",
    findFirstChild="(BodyAngularVelocity,string,boolean)=>(any)",
    getChildren="(BodyAngularVelocity)=>(any)",
    isA="(BodyAngularVelocity,string)=>(boolean)",
    isDescendantOf="(BodyAngularVelocity,any)=>(boolean)",
    maxTorque="Vector3",
    remove="(BodyAngularVelocity)=>()"}


, DebuggerBreakpoint={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(DebuggerBreakpoint)=>()",
    Clone="(DebuggerBreakpoint)=>(any)",
    Condition="string",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(DebuggerBreakpoint)=>()",
    FindFirstAncestor="(DebuggerBreakpoint,string)=>(any)",
    FindFirstAncestorOfClass="(DebuggerBreakpoint,string)=>(any)",
    FindFirstAncestorWhichIsA="(DebuggerBreakpoint,string)=>(any)",
    FindFirstChild="(DebuggerBreakpoint,string,boolean)=>(any)",
    FindFirstChildOfClass="(DebuggerBreakpoint,string)=>(any)",
    FindFirstChildWhichIsA="(DebuggerBreakpoint,string,boolean)=>(any)",
    GetAttribute="(DebuggerBreakpoint,string)=>(any)",
    GetAttributeChangedSignal="(DebuggerBreakpoint,string)=>(any)",
    GetAttributes="(DebuggerBreakpoint)=>(any)",
    GetChildren="(DebuggerBreakpoint)=>(any)",
    GetDebugId="(DebuggerBreakpoint,number)=>(string)",
    GetDescendants="(DebuggerBreakpoint)=>(any)",
    GetFullName="(DebuggerBreakpoint)=>(string)",
    GetPropertyChangedSignal="(DebuggerBreakpoint,string)=>(any)",
    IsA="(DebuggerBreakpoint,string)=>(boolean)",
    IsAncestorOf="(DebuggerBreakpoint,any)=>(boolean)",
    IsDescendantOf="(DebuggerBreakpoint,any)=>(boolean)",
    IsEnabled="boolean",
    Line="number",
    Name="string",
    Parent="any",
    Remove="(DebuggerBreakpoint)=>()",
    RobloxLocked="boolean",
    SetAttribute="(DebuggerBreakpoint,string,any)=>()",
    Tags="any",
    WaitForChild="(DebuggerBreakpoint,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(DebuggerBreakpoint)=>(any)",
    className="string",
    clone="(DebuggerBreakpoint)=>(any)",
    destroy="(DebuggerBreakpoint)=>()",
    findFirstChild="(DebuggerBreakpoint,string,boolean)=>(any)",
    getChildren="(DebuggerBreakpoint)=>(any)",
    isA="(DebuggerBreakpoint,string)=>(boolean)",
    isDescendantOf="(DebuggerBreakpoint,any)=>(boolean)",
    line="number",
    remove="(DebuggerBreakpoint)=>()"}


, BodyColors={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BodyColors)=>()",
    Clone="(BodyColors)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BodyColors)=>()",
    FindFirstAncestor="(BodyColors,string)=>(any)",
    FindFirstAncestorOfClass="(BodyColors,string)=>(any)",
    FindFirstAncestorWhichIsA="(BodyColors,string)=>(any)",
    FindFirstChild="(BodyColors,string,boolean)=>(any)",
    FindFirstChildOfClass="(BodyColors,string)=>(any)",
    FindFirstChildWhichIsA="(BodyColors,string,boolean)=>(any)",
    GetAttribute="(BodyColors,string)=>(any)",
    GetAttributeChangedSignal="(BodyColors,string)=>(any)",
    GetAttributes="(BodyColors)=>(any)",
    GetChildren="(BodyColors)=>(any)",
    GetDebugId="(BodyColors,number)=>(string)",
    GetDescendants="(BodyColors)=>(any)",
    GetFullName="(BodyColors)=>(string)",
    GetPropertyChangedSignal="(BodyColors,string)=>(any)",
    HeadColor="any",
    HeadColor3="Color3",
    IsA="(BodyColors,string)=>(boolean)",
    IsAncestorOf="(BodyColors,any)=>(boolean)",
    IsDescendantOf="(BodyColors,any)=>(boolean)",
    LeftArmColor="any",
    LeftArmColor3="Color3",
    LeftLegColor="any",
    LeftLegColor3="Color3",
    Name="string",
    Parent="any",
    Remove="(BodyColors)=>()",
    RightArmColor="any",
    RightArmColor3="Color3",
    RightLegColor="any",
    RightLegColor3="Color3",
    RobloxLocked="boolean",
    SetAttribute="(BodyColors,string,any)=>()",
    Tags="any",
    TorsoColor="any",
    TorsoColor3="Color3",
    WaitForChild="(BodyColors,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(BodyColors)=>(any)",
    className="string",
    clone="(BodyColors)=>(any)",
    destroy="(BodyColors)=>()",
    findFirstChild="(BodyColors,string,boolean)=>(any)",
    getChildren="(BodyColors)=>(any)",
    isA="(BodyColors,string)=>(boolean)",
    isDescendantOf="(BodyColors,any)=>(boolean)",
    remove="(BodyColors)=>()"}


, BodyForce={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BodyForce)=>()",
    Clone="(BodyForce)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BodyForce)=>()",
    FindFirstAncestor="(BodyForce,string)=>(any)",
    FindFirstAncestorOfClass="(BodyForce,string)=>(any)",
    FindFirstAncestorWhichIsA="(BodyForce,string)=>(any)",
    FindFirstChild="(BodyForce,string,boolean)=>(any)",
    FindFirstChildOfClass="(BodyForce,string)=>(any)",
    FindFirstChildWhichIsA="(BodyForce,string,boolean)=>(any)",
    Force="Vector3",
    GetAttribute="(BodyForce,string)=>(any)",
    GetAttributeChangedSignal="(BodyForce,string)=>(any)",
    GetAttributes="(BodyForce)=>(any)",
    GetChildren="(BodyForce)=>(any)",
    GetDebugId="(BodyForce,number)=>(string)",
    GetDescendants="(BodyForce)=>(any)",
    GetFullName="(BodyForce)=>(string)",
    GetPropertyChangedSignal="(BodyForce,string)=>(any)",
    IsA="(BodyForce,string)=>(boolean)",
    IsAncestorOf="(BodyForce,any)=>(boolean)",
    IsDescendantOf="(BodyForce,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(BodyForce)=>()",
    RobloxLocked="boolean",
    SetAttribute="(BodyForce,string,any)=>()",
    Tags="any",
    WaitForChild="(BodyForce,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(BodyForce)=>(any)",
    className="string",
    clone="(BodyForce)=>(any)",
    destroy="(BodyForce)=>()",
    findFirstChild="(BodyForce,string,boolean)=>(any)",
    force="Vector3",
    getChildren="(BodyForce)=>(any)",
    isA="(BodyForce,string)=>(boolean)",
    isDescendantOf="(BodyForce,any)=>(boolean)",
    remove="(BodyForce)=>()"}


, Sky={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CelestialBodiesShown="boolean",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Sky)=>()",
    Clone="(Sky)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Sky)=>()",
    FindFirstAncestor="(Sky,string)=>(any)",
    FindFirstAncestorOfClass="(Sky,string)=>(any)",
    FindFirstAncestorWhichIsA="(Sky,string)=>(any)",
    FindFirstChild="(Sky,string,boolean)=>(any)",
    FindFirstChildOfClass="(Sky,string)=>(any)",
    FindFirstChildWhichIsA="(Sky,string,boolean)=>(any)",
    GetAttribute="(Sky,string)=>(any)",
    GetAttributeChangedSignal="(Sky,string)=>(any)",
    GetAttributes="(Sky)=>(any)",
    GetChildren="(Sky)=>(any)",
    GetDebugId="(Sky,number)=>(string)",
    GetDescendants="(Sky)=>(any)",
    GetFullName="(Sky)=>(string)",
    GetPropertyChangedSignal="(Sky,string)=>(any)",
    IsA="(Sky,string)=>(boolean)",
    IsAncestorOf="(Sky,any)=>(boolean)",
    IsDescendantOf="(Sky,any)=>(boolean)",
    MoonAngularSize="number",
    MoonTextureId="any",
    Name="string",
    Parent="any",
    Remove="(Sky)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Sky,string,any)=>()",
    SkyboxBk="any",
    SkyboxDn="any",
    SkyboxFt="any",
    SkyboxLf="any",
    SkyboxRt="any",
    SkyboxUp="any",
    StarCount="number",
    SunAngularSize="number",
    SunTextureId="any",
    Tags="any",
    WaitForChild="(Sky,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Sky)=>(any)",
    className="string",
    clone="(Sky)=>(any)",
    destroy="(Sky)=>()",
    findFirstChild="(Sky,string,boolean)=>(any)",
    getChildren="(Sky)=>(any)",
    isA="(Sky,string)=>(boolean)",
    isDescendantOf="(Sky,any)=>(boolean)",
    remove="(Sky)=>()"}


, BodyGyro={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CFrame="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BodyGyro)=>()",
    Clone="(BodyGyro)=>(any)",
    D="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BodyGyro)=>()",
    FindFirstAncestor="(BodyGyro,string)=>(any)",
    FindFirstAncestorOfClass="(BodyGyro,string)=>(any)",
    FindFirstAncestorWhichIsA="(BodyGyro,string)=>(any)",
    FindFirstChild="(BodyGyro,string,boolean)=>(any)",
    FindFirstChildOfClass="(BodyGyro,string)=>(any)",
    FindFirstChildWhichIsA="(BodyGyro,string,boolean)=>(any)",
    GetAttribute="(BodyGyro,string)=>(any)",
    GetAttributeChangedSignal="(BodyGyro,string)=>(any)",
    GetAttributes="(BodyGyro)=>(any)",
    GetChildren="(BodyGyro)=>(any)",
    GetDebugId="(BodyGyro,number)=>(string)",
    GetDescendants="(BodyGyro)=>(any)",
    GetFullName="(BodyGyro)=>(string)",
    GetPropertyChangedSignal="(BodyGyro,string)=>(any)",
    IsA="(BodyGyro,string)=>(boolean)",
    IsAncestorOf="(BodyGyro,any)=>(boolean)",
    IsDescendantOf="(BodyGyro,any)=>(boolean)",
    MaxTorque="Vector3",
    Name="string",
    P="number",
    Parent="any",
    Remove="(BodyGyro)=>()",
    RobloxLocked="boolean",
    SetAttribute="(BodyGyro,string,any)=>()",
    Tags="any",
    WaitForChild="(BodyGyro,string,number)=>(any)",
    archivable="boolean",
    cframe="CFrame",
    childAdded="Event",
    children="(BodyGyro)=>(any)",
    className="string",
    clone="(BodyGyro)=>(any)",
    destroy="(BodyGyro)=>()",
    findFirstChild="(BodyGyro,string,boolean)=>(any)",
    getChildren="(BodyGyro)=>(any)",
    isA="(BodyGyro,string)=>(boolean)",
    isDescendantOf="(BodyGyro,any)=>(boolean)",
    maxTorque="Vector3",
    remove="(BodyGyro)=>()"}


, GuiBase2d={
    AbsolutePosition="Vector2",
    AbsoluteRotation="number",
    AbsoluteSize="Vector2",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoLocalize="boolean",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(GuiBase2d)=>()",
    Clone="(GuiBase2d)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(GuiBase2d)=>()",
    FindFirstAncestor="(GuiBase2d,string)=>(any)",
    FindFirstAncestorOfClass="(GuiBase2d,string)=>(any)",
    FindFirstAncestorWhichIsA="(GuiBase2d,string)=>(any)",
    FindFirstChild="(GuiBase2d,string,boolean)=>(any)",
    FindFirstChildOfClass="(GuiBase2d,string)=>(any)",
    FindFirstChildWhichIsA="(GuiBase2d,string,boolean)=>(any)",
    GetAttribute="(GuiBase2d,string)=>(any)",
    GetAttributeChangedSignal="(GuiBase2d,string)=>(any)",
    GetAttributes="(GuiBase2d)=>(any)",
    GetChildren="(GuiBase2d)=>(any)",
    GetDebugId="(GuiBase2d,number)=>(string)",
    GetDescendants="(GuiBase2d)=>(any)",
    GetFullName="(GuiBase2d)=>(string)",
    GetPropertyChangedSignal="(GuiBase2d,string)=>(any)",
    IsA="(GuiBase2d,string)=>(boolean)",
    IsAncestorOf="(GuiBase2d,any)=>(boolean)",
    IsDescendantOf="(GuiBase2d,any)=>(boolean)",
    IsNotOccluded="boolean",
    Localize="boolean",
    Name="string",
    Parent="any",
    Remove="(GuiBase2d)=>()",
    RobloxLocked="boolean",
    RootLocalizationTable="any",
    SetAttribute="(GuiBase2d,string,any)=>()",
    Tags="any",
    WaitForChild="(GuiBase2d,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(GuiBase2d)=>(any)",
    className="string",
    clone="(GuiBase2d)=>(any)",
    destroy="(GuiBase2d)=>()",
    findFirstChild="(GuiBase2d,string,boolean)=>(any)",
    getChildren="(GuiBase2d)=>(any)",
    isA="(GuiBase2d,string)=>(boolean)",
    isDescendantOf="(GuiBase2d,any)=>(boolean)",
    remove="(GuiBase2d)=>()"}


, BodyThrust={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BodyThrust)=>()",
    Clone="(BodyThrust)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BodyThrust)=>()",
    FindFirstAncestor="(BodyThrust,string)=>(any)",
    FindFirstAncestorOfClass="(BodyThrust,string)=>(any)",
    FindFirstAncestorWhichIsA="(BodyThrust,string)=>(any)",
    FindFirstChild="(BodyThrust,string,boolean)=>(any)",
    FindFirstChildOfClass="(BodyThrust,string)=>(any)",
    FindFirstChildWhichIsA="(BodyThrust,string,boolean)=>(any)",
    Force="Vector3",
    GetAttribute="(BodyThrust,string)=>(any)",
    GetAttributeChangedSignal="(BodyThrust,string)=>(any)",
    GetAttributes="(BodyThrust)=>(any)",
    GetChildren="(BodyThrust)=>(any)",
    GetDebugId="(BodyThrust,number)=>(string)",
    GetDescendants="(BodyThrust)=>(any)",
    GetFullName="(BodyThrust)=>(string)",
    GetPropertyChangedSignal="(BodyThrust,string)=>(any)",
    IsA="(BodyThrust,string)=>(boolean)",
    IsAncestorOf="(BodyThrust,any)=>(boolean)",
    IsDescendantOf="(BodyThrust,any)=>(boolean)",
    Location="Vector3",
    Name="string",
    Parent="any",
    Remove="(BodyThrust)=>()",
    RobloxLocked="boolean",
    SetAttribute="(BodyThrust,string,any)=>()",
    Tags="any",
    WaitForChild="(BodyThrust,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(BodyThrust)=>(any)",
    className="string",
    clone="(BodyThrust)=>(any)",
    destroy="(BodyThrust)=>()",
    findFirstChild="(BodyThrust,string,boolean)=>(any)",
    force="Vector3",
    getChildren="(BodyThrust)=>(any)",
    isA="(BodyThrust,string)=>(boolean)",
    isDescendantOf="(BodyThrust,any)=>(boolean)",
    location="Vector3",
    remove="(BodyThrust)=>()"}


, ColorSequenceKeypoint=any

, Random=any

, ImageButton={
    AbsolutePosition="Vector2",
    AbsoluteRotation="number",
    AbsoluteSize="Vector2",
    Activated="Event",
    Active="boolean",
    AncestryChanged="Event",
    AnchorPoint="Vector2",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoButtonColor="boolean",
    AutoLocalize="boolean",
    BackgroundColor="any",
    BackgroundColor3="Color3",
    BackgroundTransparency="number",
    BorderColor="any",
    BorderColor3="Color3",
    BorderMode="any",
    BorderSizePixel="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ImageButton)=>()",
    ClipsDescendants="boolean",
    Clone="(ImageButton)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ImageButton)=>()",
    DragBegin="Event",
    DragBeginConnectionCount="number",
    DragStopped="Event",
    DragStoppedConnectionCount="number",
    Draggable="boolean",
    FindFirstAncestor="(ImageButton,string)=>(any)",
    FindFirstAncestorOfClass="(ImageButton,string)=>(any)",
    FindFirstAncestorWhichIsA="(ImageButton,string)=>(any)",
    FindFirstChild="(ImageButton,string,boolean)=>(any)",
    FindFirstChildOfClass="(ImageButton,string)=>(any)",
    FindFirstChildWhichIsA="(ImageButton,string,boolean)=>(any)",
    GetAttribute="(ImageButton,string)=>(any)",
    GetAttributeChangedSignal="(ImageButton,string)=>(any)",
    GetAttributes="(ImageButton)=>(any)",
    GetChildren="(ImageButton)=>(any)",
    GetDebugId="(ImageButton,number)=>(string)",
    GetDescendants="(ImageButton)=>(any)",
    GetFullName="(ImageButton)=>(string)",
    GetPropertyChangedSignal="(ImageButton,string)=>(any)",
    HoverImage="any",
    Image="any",
    ImageColor3="Color3",
    ImageRectOffset="Vector2",
    ImageRectSize="Vector2",
    ImageTransparency="number",
    InputBegan="Event",
    InputChanged="Event",
    InputEnded="Event",
    IsA="(ImageButton,string)=>(boolean)",
    IsAncestorOf="(ImageButton,any)=>(boolean)",
    IsDescendantOf="(ImageButton,any)=>(boolean)",
    IsLoaded="boolean",
    IsNotOccluded="boolean",
    LayoutOrder="number",
    Localize="boolean",
    Modal="boolean",
    MouseButton1Click="Event",
    MouseButton1ClickConnectionCount="number",
    MouseButton1Down="Event",
    MouseButton1DownConnectionCount="number",
    MouseButton1Up="Event",
    MouseButton1UpConnectionCount="number",
    MouseButton2Click="Event",
    MouseButton2ClickConnectionCount="number",
    MouseButton2Down="Event",
    MouseButton2DownConnectionCount="number",
    MouseButton2Up="Event",
    MouseButton2UpConnectionCount="number",
    MouseEnter="Event",
    MouseEnterConnectionCount="number",
    MouseLeave="Event",
    MouseLeaveConnectionCount="number",
    MouseMoved="Event",
    MouseMovedConnectionCount="number",
    MouseWheelBackward="Event",
    MouseWheelBackwardConnectionCount="number",
    MouseWheelForward="Event",
    MouseWheelForwardConnectionCount="number",
    Name="string",
    NextSelectionDown="any",
    NextSelectionLeft="any",
    NextSelectionRight="any",
    NextSelectionUp="any",
    Parent="any",
    Position="UDim2",
    PressedImage="any",
    Remove="(ImageButton)=>()",
    RobloxLocked="boolean",
    RootLocalizationTable="any",
    Rotation="number",
    Scale,="any",
    Selectable="boolean",
    Selected="boolean",
    SelectionGained="Event",
    SelectionImageObject="any",
    SelectionLost="Event",
    SetAttribute="(ImageButton,string,any)=>()",
    Size="UDim2",
    SizeConstraint="any",
    SliceCenter="Rect",
    SliceScale="number",
    Style="any",
    Tags="any",
    TileSize="UDim2",
    TouchLongPress="Event",
    TouchPan="Event",
    TouchPinch="Event",
    TouchRotate="Event",
    TouchSwipe="Event",
    TouchTap="Event",
    Transparency="number",
    TweenPosition="(ImageButton,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSize="(ImageButton,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSizeAndPosition="(ImageButton,UDim2,UDim2,any,any,number,boolean,any)=>(boolean)",
    Visible="boolean",
    WaitForChild="(ImageButton,string,number)=>(any)",
    ZIndex="number",
    archivable="boolean",
    childAdded="Event",
    children="(ImageButton)=>(any)",
    className="string",
    clone="(ImageButton)=>(any)",
    destroy="(ImageButton)=>()",
    findFirstChild="(ImageButton,string,boolean)=>(any)",
    getChildren="(ImageButton)=>(any)",
    isA="(ImageButton,string)=>(boolean)",
    isDescendantOf="(ImageButton,any)=>(boolean)",
    remove="(ImageButton)=>()"}


, CylinderMesh={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Bevel="number",
    Bevel Roundness="number",
    Bulge="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(CylinderMesh)=>()",
    Clone="(CylinderMesh)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(CylinderMesh)=>()",
    FindFirstAncestor="(CylinderMesh,string)=>(any)",
    FindFirstAncestorOfClass="(CylinderMesh,string)=>(any)",
    FindFirstAncestorWhichIsA="(CylinderMesh,string)=>(any)",
    FindFirstChild="(CylinderMesh,string,boolean)=>(any)",
    FindFirstChildOfClass="(CylinderMesh,string)=>(any)",
    FindFirstChildWhichIsA="(CylinderMesh,string,boolean)=>(any)",
    GetAttribute="(CylinderMesh,string)=>(any)",
    GetAttributeChangedSignal="(CylinderMesh,string)=>(any)",
    GetAttributes="(CylinderMesh)=>(any)",
    GetChildren="(CylinderMesh)=>(any)",
    GetDebugId="(CylinderMesh,number)=>(string)",
    GetDescendants="(CylinderMesh)=>(any)",
    GetFullName="(CylinderMesh)=>(string)",
    GetPropertyChangedSignal="(CylinderMesh,string)=>(any)",
    IsA="(CylinderMesh,string)=>(boolean)",
    IsAncestorOf="(CylinderMesh,any)=>(boolean)",
    IsDescendantOf="(CylinderMesh,any)=>(boolean)",
    LODX="any",
    LODY="any",
    Name="string",
    Offset="Vector3",
    Parent="any",
    Remove="(CylinderMesh)=>()",
    RobloxLocked="boolean",
    Scale="Vector3",
    SetAttribute="(CylinderMesh,string,any)=>()",
    Tags="any",
    VertexColor="Vector3",
    WaitForChild="(CylinderMesh,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(CylinderMesh)=>(any)",
    className="string",
    clone="(CylinderMesh)=>(any)",
    destroy="(CylinderMesh)=>()",
    findFirstChild="(CylinderMesh,string,boolean)=>(any)",
    getChildren="(CylinderMesh)=>(any)",
    isA="(CylinderMesh,string)=>(boolean)",
    isDescendantOf="(CylinderMesh,any)=>(boolean)",
    remove="(CylinderMesh)=>()"}


, BodyVelocity={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BodyVelocity)=>()",
    Clone="(BodyVelocity)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BodyVelocity)=>()",
    FindFirstAncestor="(BodyVelocity,string)=>(any)",
    FindFirstAncestorOfClass="(BodyVelocity,string)=>(any)",
    FindFirstAncestorWhichIsA="(BodyVelocity,string)=>(any)",
    FindFirstChild="(BodyVelocity,string,boolean)=>(any)",
    FindFirstChildOfClass="(BodyVelocity,string)=>(any)",
    FindFirstChildWhichIsA="(BodyVelocity,string,boolean)=>(any)",
    GetAttribute="(BodyVelocity,string)=>(any)",
    GetAttributeChangedSignal="(BodyVelocity,string)=>(any)",
    GetAttributes="(BodyVelocity)=>(any)",
    GetChildren="(BodyVelocity)=>(any)",
    GetDebugId="(BodyVelocity,number)=>(string)",
    GetDescendants="(BodyVelocity)=>(any)",
    GetFullName="(BodyVelocity)=>(string)",
    GetLastForce="(BodyVelocity)=>(Vector3)",
    GetPropertyChangedSignal="(BodyVelocity,string)=>(any)",
    IsA="(BodyVelocity,string)=>(boolean)",
    IsAncestorOf="(BodyVelocity,any)=>(boolean)",
    IsDescendantOf="(BodyVelocity,any)=>(boolean)",
    MaxForce="Vector3",
    Name="string",
    P="number",
    Parent="any",
    Remove="(BodyVelocity)=>()",
    RobloxLocked="boolean",
    SetAttribute="(BodyVelocity,string,any)=>()",
    Tags="any",
    Velocity="Vector3",
    WaitForChild="(BodyVelocity,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(BodyVelocity)=>(any)",
    className="string",
    clone="(BodyVelocity)=>(any)",
    destroy="(BodyVelocity)=>()",
    findFirstChild="(BodyVelocity,string,boolean)=>(any)",
    getChildren="(BodyVelocity)=>(any)",
    isA="(BodyVelocity,string)=>(boolean)",
    isDescendantOf="(BodyVelocity,any)=>(boolean)",
    lastForce="(BodyVelocity)=>(Vector3)",
    maxForce="Vector3",
    remove="(BodyVelocity)=>()",
    velocity="Vector3"}


, SpawnerService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SpawnerService)=>()",
    Clone="(SpawnerService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SpawnerService)=>()",
    FindFirstAncestor="(SpawnerService,string)=>(any)",
    FindFirstAncestorOfClass="(SpawnerService,string)=>(any)",
    FindFirstAncestorWhichIsA="(SpawnerService,string)=>(any)",
    FindFirstChild="(SpawnerService,string,boolean)=>(any)",
    FindFirstChildOfClass="(SpawnerService,string)=>(any)",
    FindFirstChildWhichIsA="(SpawnerService,string,boolean)=>(any)",
    GetAttribute="(SpawnerService,string)=>(any)",
    GetAttributeChangedSignal="(SpawnerService,string)=>(any)",
    GetAttributes="(SpawnerService)=>(any)",
    GetChildren="(SpawnerService)=>(any)",
    GetDebugId="(SpawnerService,number)=>(string)",
    GetDescendants="(SpawnerService)=>(any)",
    GetFullName="(SpawnerService)=>(string)",
    GetPropertyChangedSignal="(SpawnerService,string)=>(any)",
    IsA="(SpawnerService,string)=>(boolean)",
    IsAncestorOf="(SpawnerService,any)=>(boolean)",
    IsDescendantOf="(SpawnerService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(SpawnerService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(SpawnerService,string,any)=>()",
    Tags="any",
    WaitForChild="(SpawnerService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(SpawnerService)=>(any)",
    className="string",
    clone="(SpawnerService)=>(any)",
    destroy="(SpawnerService)=>()",
    findFirstChild="(SpawnerService,string,boolean)=>(any)",
    getChildren="(SpawnerService)=>(any)",
    isA="(SpawnerService,string)=>(boolean)",
    isDescendantOf="(SpawnerService,any)=>(boolean)",
    remove="(SpawnerService)=>()"}


, BrickColorValue={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BrickColorValue)=>()",
    Clone="(BrickColorValue)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BrickColorValue)=>()",
    FindFirstAncestor="(BrickColorValue,string)=>(any)",
    FindFirstAncestorOfClass="(BrickColorValue,string)=>(any)",
    FindFirstAncestorWhichIsA="(BrickColorValue,string)=>(any)",
    FindFirstChild="(BrickColorValue,string,boolean)=>(any)",
    FindFirstChildOfClass="(BrickColorValue,string)=>(any)",
    FindFirstChildWhichIsA="(BrickColorValue,string,boolean)=>(any)",
    GetAttribute="(BrickColorValue,string)=>(any)",
    GetAttributeChangedSignal="(BrickColorValue,string)=>(any)",
    GetAttributes="(BrickColorValue)=>(any)",
    GetChildren="(BrickColorValue)=>(any)",
    GetDebugId="(BrickColorValue,number)=>(string)",
    GetDescendants="(BrickColorValue)=>(any)",
    GetFullName="(BrickColorValue)=>(string)",
    GetPropertyChangedSignal="(BrickColorValue,string)=>(any)",
    IsA="(BrickColorValue,string)=>(boolean)",
    IsAncestorOf="(BrickColorValue,any)=>(boolean)",
    IsDescendantOf="(BrickColorValue,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(BrickColorValue)=>()",
    RobloxLocked="boolean",
    SetAttribute="(BrickColorValue,string,any)=>()",
    Tags="any",
    Value="any",
    WaitForChild="(BrickColorValue,string,number)=>(any)",
    archivable="boolean",
    changed="Event",
    childAdded="Event",
    children="(BrickColorValue)=>(any)",
    className="string",
    clone="(BrickColorValue)=>(any)",
    destroy="(BrickColorValue)=>()",
    findFirstChild="(BrickColorValue,string,boolean)=>(any)",
    getChildren="(BrickColorValue)=>(any)",
    isA="(BrickColorValue,string)=>(boolean)",
    isDescendantOf="(BrickColorValue,any)=>(boolean)",
    remove="(BrickColorValue)=>()"}


, NetworkServer={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(NetworkServer)=>()",
    Clone="(NetworkServer)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(NetworkServer)=>()",
    FindFirstAncestor="(NetworkServer,string)=>(any)",
    FindFirstAncestorOfClass="(NetworkServer,string)=>(any)",
    FindFirstAncestorWhichIsA="(NetworkServer,string)=>(any)",
    FindFirstChild="(NetworkServer,string,boolean)=>(any)",
    FindFirstChildOfClass="(NetworkServer,string)=>(any)",
    FindFirstChildWhichIsA="(NetworkServer,string,boolean)=>(any)",
    GetAttribute="(NetworkServer,string)=>(any)",
    GetAttributeChangedSignal="(NetworkServer,string)=>(any)",
    GetAttributes="(NetworkServer)=>(any)",
    GetChildren="(NetworkServer)=>(any)",
    GetClientCount="(NetworkServer)=>(number)",
    GetDebugId="(NetworkServer,number)=>(string)",
    GetDescendants="(NetworkServer)=>(any)",
    GetFullName="(NetworkServer)=>(string)",
    GetPropertyChangedSignal="(NetworkServer,string)=>(any)",
    IsA="(NetworkServer,string)=>(boolean)",
    IsAncestorOf="(NetworkServer,any)=>(boolean)",
    IsDescendantOf="(NetworkServer,any)=>(boolean)",
    Name="string",
    Parent="any",
    Port="number",
    Remove="(NetworkServer)=>()",
    RobloxLocked="boolean",
    SetAttribute="(NetworkServer,string,any)=>()",
    SetOutgoingKBPSLimit="(NetworkServer,number)=>()",
    Tags="any",
    WaitForChild="(NetworkServer,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(NetworkServer)=>(any)",
    className="string",
    clone="(NetworkServer)=>(any)",
    destroy="(NetworkServer)=>()",
    findFirstChild="(NetworkServer,string,boolean)=>(any)",
    getChildren="(NetworkServer)=>(any)",
    isA="(NetworkServer,string)=>(boolean)",
    isDescendantOf="(NetworkServer,any)=>(boolean)",
    remove="(NetworkServer)=>()"}


, Motor={
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    C0="CFrame",
    C1="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Motor)=>()",
    Clone="(Motor)=>(any)",
    CurrentAngle="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    DesiredAngle="number",
    Destroy="(Motor)=>()",
    Enabled="boolean",
    FindFirstAncestor="(Motor,string)=>(any)",
    FindFirstAncestorOfClass="(Motor,string)=>(any)",
    FindFirstAncestorWhichIsA="(Motor,string)=>(any)",
    FindFirstChild="(Motor,string,boolean)=>(any)",
    FindFirstChildOfClass="(Motor,string)=>(any)",
    FindFirstChildWhichIsA="(Motor,string,boolean)=>(any)",
    GetAttribute="(Motor,string)=>(any)",
    GetAttributeChangedSignal="(Motor,string)=>(any)",
    GetAttributes="(Motor)=>(any)",
    GetChildren="(Motor)=>(any)",
    GetDebugId="(Motor,number)=>(string)",
    GetDescendants="(Motor)=>(any)",
    GetFullName="(Motor)=>(string)",
    GetPropertyChangedSignal="(Motor,string)=>(any)",
    IsA="(Motor,string)=>(boolean)",
    IsAncestorOf="(Motor,any)=>(boolean)",
    IsAutoJoint="boolean",
    IsDescendantOf="(Motor,any)=>(boolean)",
    MaxVelocity="number",
    Name="string",
    Parent="any",
    Part0="any",
    Part1="any",
    Remove="(Motor)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Motor,string,any)=>()",
    SetDesiredAngle="(Motor,number)=>()",
    Tags="any",
    WaitForChild="(Motor,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Motor)=>(any)",
    className="string",
    clone="(Motor)=>(any)",
    destroy="(Motor)=>()",
    findFirstChild="(Motor,string,boolean)=>(any)",
    getChildren="(Motor)=>(any)",
    isA="(Motor,string)=>(boolean)",
    isDescendantOf="(Motor,any)=>(boolean)",
    part1="any",
    remove="(Motor)=>()"}


, BrowserService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AuthCookieCopiedToEngine="Event",
    BrowserWindowClosed="Event",
    BrowserWindowWillNavigate="Event",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(BrowserService)=>()",
    Clone="(BrowserService)=>(any)",
    CloseBrowserWindow="(BrowserService)=>()",
    CopyAuthCookieFromBrowserToEngine="(BrowserService)=>()",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(BrowserService)=>()",
    EmitHybridEvent="(BrowserService,string,string,string)=>()",
    ExecuteJavaScript="(BrowserService,string)=>()",
    FindFirstAncestor="(BrowserService,string)=>(any)",
    FindFirstAncestorOfClass="(BrowserService,string)=>(any)",
    FindFirstAncestorWhichIsA="(BrowserService,string)=>(any)",
    FindFirstChild="(BrowserService,string,boolean)=>(any)",
    FindFirstChildOfClass="(BrowserService,string)=>(any)",
    FindFirstChildWhichIsA="(BrowserService,string,boolean)=>(any)",
    GetAttribute="(BrowserService,string)=>(any)",
    GetAttributeChangedSignal="(BrowserService,string)=>(any)",
    GetAttributes="(BrowserService)=>(any)",
    GetChildren="(BrowserService)=>(any)",
    GetDebugId="(BrowserService,number)=>(string)",
    GetDescendants="(BrowserService)=>(any)",
    GetFullName="(BrowserService)=>(string)",
    GetPropertyChangedSignal="(BrowserService,string)=>(any)",
    IsA="(BrowserService,string)=>(boolean)",
    IsAncestorOf="(BrowserService,any)=>(boolean)",
    IsDescendantOf="(BrowserService,any)=>(boolean)",
    JavaScriptCallback="Event",
    Name="string",
    OpenBrowserWindow="(BrowserService,string)=>()",
    OpenNativeOverlay="(BrowserService,string,string)=>()",
    OpenWeChatAuthWindow="(BrowserService)=>()",
    Parent="any",
    Remove="(BrowserService)=>()",
    ReturnToJavaScript="(BrowserService,string,boolean,string)=>()",
    RobloxLocked="boolean",
    SendCommand="(BrowserService,string)=>()",
    SetAttribute="(BrowserService,string,any)=>()",
    Tags="any",
    WaitForChild="(BrowserService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(BrowserService)=>(any)",
    className="string",
    clone="(BrowserService)=>(any)",
    destroy="(BrowserService)=>()",
    findFirstChild="(BrowserService,string,boolean)=>(any)",
    getChildren="(BrowserService)=>(any)",
    isA="(BrowserService,string)=>(boolean)",
    isDescendantOf="(BrowserService,any)=>(boolean)",
    remove="(BrowserService)=>()"}


, RunningAverageTimeIntervalItem={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(RunningAverageTimeIntervalItem)=>()",
    Clone="(RunningAverageTimeIntervalItem)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(RunningAverageTimeIntervalItem)=>()",
    FindFirstAncestor="(RunningAverageTimeIntervalItem,string)=>(any)",
    FindFirstAncestorOfClass="(RunningAverageTimeIntervalItem,string)=>(any)",
    FindFirstAncestorWhichIsA="(RunningAverageTimeIntervalItem,string)=>(any)",
    FindFirstChild="(RunningAverageTimeIntervalItem,string,boolean)=>(any)",
    FindFirstChildOfClass="(RunningAverageTimeIntervalItem,string)=>(any)",
    FindFirstChildWhichIsA="(RunningAverageTimeIntervalItem,string,boolean)=>(any)",
    GetAttribute="(RunningAverageTimeIntervalItem,string)=>(any)",
    GetAttributeChangedSignal="(RunningAverageTimeIntervalItem,string)=>(any)",
    GetAttributes="(RunningAverageTimeIntervalItem)=>(any)",
    GetChildren="(RunningAverageTimeIntervalItem)=>(any)",
    GetDebugId="(RunningAverageTimeIntervalItem,number)=>(string)",
    GetDescendants="(RunningAverageTimeIntervalItem)=>(any)",
    GetFullName="(RunningAverageTimeIntervalItem)=>(string)",
    GetPropertyChangedSignal="(RunningAverageTimeIntervalItem,string)=>(any)",
    GetValue="(RunningAverageTimeIntervalItem)=>(number)",
    GetValueString="(RunningAverageTimeIntervalItem)=>(string)",
    IsA="(RunningAverageTimeIntervalItem,string)=>(boolean)",
    IsAncestorOf="(RunningAverageTimeIntervalItem,any)=>(boolean)",
    IsDescendantOf="(RunningAverageTimeIntervalItem,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(RunningAverageTimeIntervalItem)=>()",
    RobloxLocked="boolean",
    SetAttribute="(RunningAverageTimeIntervalItem,string,any)=>()",
    Tags="any",
    WaitForChild="(RunningAverageTimeIntervalItem,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(RunningAverageTimeIntervalItem)=>(any)",
    className="string",
    clone="(RunningAverageTimeIntervalItem)=>(any)",
    destroy="(RunningAverageTimeIntervalItem)=>()",
    findFirstChild="(RunningAverageTimeIntervalItem,string,boolean)=>(any)",
    getChildren="(RunningAverageTimeIntervalItem)=>(any)",
    isA="(RunningAverageTimeIntervalItem,string)=>(boolean)",
    isDescendantOf="(RunningAverageTimeIntervalItem,any)=>(boolean)",
    remove="(RunningAverageTimeIntervalItem)=>()"}


, CFrameValue={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(CFrameValue)=>()",
    Clone="(CFrameValue)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(CFrameValue)=>()",
    FindFirstAncestor="(CFrameValue,string)=>(any)",
    FindFirstAncestorOfClass="(CFrameValue,string)=>(any)",
    FindFirstAncestorWhichIsA="(CFrameValue,string)=>(any)",
    FindFirstChild="(CFrameValue,string,boolean)=>(any)",
    FindFirstChildOfClass="(CFrameValue,string)=>(any)",
    FindFirstChildWhichIsA="(CFrameValue,string,boolean)=>(any)",
    GetAttribute="(CFrameValue,string)=>(any)",
    GetAttributeChangedSignal="(CFrameValue,string)=>(any)",
    GetAttributes="(CFrameValue)=>(any)",
    GetChildren="(CFrameValue)=>(any)",
    GetDebugId="(CFrameValue,number)=>(string)",
    GetDescendants="(CFrameValue)=>(any)",
    GetFullName="(CFrameValue)=>(string)",
    GetPropertyChangedSignal="(CFrameValue,string)=>(any)",
    IsA="(CFrameValue,string)=>(boolean)",
    IsAncestorOf="(CFrameValue,any)=>(boolean)",
    IsDescendantOf="(CFrameValue,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(CFrameValue)=>()",
    RobloxLocked="boolean",
    SetAttribute="(CFrameValue,string,any)=>()",
    Tags="any",
    Value="CFrame",
    WaitForChild="(CFrameValue,string,number)=>(any)",
    archivable="boolean",
    changed="Event",
    childAdded="Event",
    children="(CFrameValue)=>(any)",
    className="string",
    clone="(CFrameValue)=>(any)",
    destroy="(CFrameValue)=>()",
    findFirstChild="(CFrameValue,string,boolean)=>(any)",
    getChildren="(CFrameValue)=>(any)",
    isA="(CFrameValue,string)=>(boolean)",
    isDescendantOf="(CFrameValue,any)=>(boolean)",
    remove="(CFrameValue)=>()"}


, ObjectValue={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ObjectValue)=>()",
    Clone="(ObjectValue)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ObjectValue)=>()",
    FindFirstAncestor="(ObjectValue,string)=>(any)",
    FindFirstAncestorOfClass="(ObjectValue,string)=>(any)",
    FindFirstAncestorWhichIsA="(ObjectValue,string)=>(any)",
    FindFirstChild="(ObjectValue,string,boolean)=>(any)",
    FindFirstChildOfClass="(ObjectValue,string)=>(any)",
    FindFirstChildWhichIsA="(ObjectValue,string,boolean)=>(any)",
    GetAttribute="(ObjectValue,string)=>(any)",
    GetAttributeChangedSignal="(ObjectValue,string)=>(any)",
    GetAttributes="(ObjectValue)=>(any)",
    GetChildren="(ObjectValue)=>(any)",
    GetDebugId="(ObjectValue,number)=>(string)",
    GetDescendants="(ObjectValue)=>(any)",
    GetFullName="(ObjectValue)=>(string)",
    GetPropertyChangedSignal="(ObjectValue,string)=>(any)",
    IsA="(ObjectValue,string)=>(boolean)",
    IsAncestorOf="(ObjectValue,any)=>(boolean)",
    IsDescendantOf="(ObjectValue,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(ObjectValue)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ObjectValue,string,any)=>()",
    Tags="any",
    Value="any",
    WaitForChild="(ObjectValue,string,number)=>(any)",
    archivable="boolean",
    changed="Event",
    childAdded="Event",
    children="(ObjectValue)=>(any)",
    className="string",
    clone="(ObjectValue)=>(any)",
    destroy="(ObjectValue)=>()",
    findFirstChild="(ObjectValue,string,boolean)=>(any)",
    getChildren="(ObjectValue)=>(any)",
    isA="(ObjectValue,string)=>(boolean)",
    isDescendantOf="(ObjectValue,any)=>(boolean)",
    remove="(ObjectValue)=>()"}


, CSGDictionaryService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(CSGDictionaryService)=>()",
    Clone="(CSGDictionaryService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(CSGDictionaryService)=>()",
    FindFirstAncestor="(CSGDictionaryService,string)=>(any)",
    FindFirstAncestorOfClass="(CSGDictionaryService,string)=>(any)",
    FindFirstAncestorWhichIsA="(CSGDictionaryService,string)=>(any)",
    FindFirstChild="(CSGDictionaryService,string,boolean)=>(any)",
    FindFirstChildOfClass="(CSGDictionaryService,string)=>(any)",
    FindFirstChildWhichIsA="(CSGDictionaryService,string,boolean)=>(any)",
    GetAttribute="(CSGDictionaryService,string)=>(any)",
    GetAttributeChangedSignal="(CSGDictionaryService,string)=>(any)",
    GetAttributes="(CSGDictionaryService)=>(any)",
    GetChildren="(CSGDictionaryService)=>(any)",
    GetDebugId="(CSGDictionaryService,number)=>(string)",
    GetDescendants="(CSGDictionaryService)=>(any)",
    GetFullName="(CSGDictionaryService)=>(string)",
    GetPropertyChangedSignal="(CSGDictionaryService,string)=>(any)",
    IsA="(CSGDictionaryService,string)=>(boolean)",
    IsAncestorOf="(CSGDictionaryService,any)=>(boolean)",
    IsDescendantOf="(CSGDictionaryService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(CSGDictionaryService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(CSGDictionaryService,string,any)=>()",
    Tags="any",
    WaitForChild="(CSGDictionaryService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(CSGDictionaryService)=>(any)",
    className="string",
    clone="(CSGDictionaryService)=>(any)",
    destroy="(CSGDictionaryService)=>()",
    findFirstChild="(CSGDictionaryService,string,boolean)=>(any)",
    getChildren="(CSGDictionaryService)=>(any)",
    isA="(CSGDictionaryService,string)=>(boolean)",
    isDescendantOf="(CSGDictionaryService,any)=>(boolean)",
    remove="(CSGDictionaryService)=>()"}


, CacheableContentProvider={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(CacheableContentProvider)=>()",
    Clone="(CacheableContentProvider)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(CacheableContentProvider)=>()",
    FindFirstAncestor="(CacheableContentProvider,string)=>(any)",
    FindFirstAncestorOfClass="(CacheableContentProvider,string)=>(any)",
    FindFirstAncestorWhichIsA="(CacheableContentProvider,string)=>(any)",
    FindFirstChild="(CacheableContentProvider,string,boolean)=>(any)",
    FindFirstChildOfClass="(CacheableContentProvider,string)=>(any)",
    FindFirstChildWhichIsA="(CacheableContentProvider,string,boolean)=>(any)",
    GetAttribute="(CacheableContentProvider,string)=>(any)",
    GetAttributeChangedSignal="(CacheableContentProvider,string)=>(any)",
    GetAttributes="(CacheableContentProvider)=>(any)",
    GetChildren="(CacheableContentProvider)=>(any)",
    GetDebugId="(CacheableContentProvider,number)=>(string)",
    GetDescendants="(CacheableContentProvider)=>(any)",
    GetFullName="(CacheableContentProvider)=>(string)",
    GetPropertyChangedSignal="(CacheableContentProvider,string)=>(any)",
    IsA="(CacheableContentProvider,string)=>(boolean)",
    IsAncestorOf="(CacheableContentProvider,any)=>(boolean)",
    IsDescendantOf="(CacheableContentProvider,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(CacheableContentProvider)=>()",
    RobloxLocked="boolean",
    SetAttribute="(CacheableContentProvider,string,any)=>()",
    Tags="any",
    WaitForChild="(CacheableContentProvider,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(CacheableContentProvider)=>(any)",
    className="string",
    clone="(CacheableContentProvider)=>(any)",
    destroy="(CacheableContentProvider)=>()",
    findFirstChild="(CacheableContentProvider,string,boolean)=>(any)",
    getChildren="(CacheableContentProvider)=>(any)",
    isA="(CacheableContentProvider,string)=>(boolean)",
    isDescendantOf="(CacheableContentProvider,any)=>(boolean)",
    remove="(CacheableContentProvider)=>()"}


, Camera={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CFrame="CFrame",
    CameraSubject="any",
    Camera,="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Camera)=>()",
    Clone="(Camera)=>(any)",
    CoordinateFrame="CFrame",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Camera)=>()",
    FieldOfView="number",
    FindFirstAncestor="(Camera,string)=>(any)",
    FindFirstAncestorOfClass="(Camera,string)=>(any)",
    FindFirstAncestorWhichIsA="(Camera,string)=>(any)",
    FindFirstChild="(Camera,string,boolean)=>(any)",
    FindFirstChildOfClass="(Camera,string)=>(any)",
    FindFirstChildWhichIsA="(Camera,string,boolean)=>(any)",
    FirstPersonTransition="Event",
    Focus="CFrame",
    GetAttribute="(Camera,string)=>(any)",
    GetAttributeChangedSignal="(Camera,string)=>(any)",
    GetAttributes="(Camera)=>(any)",
    GetChildren="(Camera)=>(any)",
    GetDebugId="(Camera,number)=>(string)",
    GetDescendants="(Camera)=>(any)",
    GetFullName="(Camera)=>(string)",
    GetLargestCutoffDistance="(Camera,any)=>(number)",
    GetPanSpeed="(Camera)=>(number)",
    GetPartsObscuringTarget="(Camera,any,any)=>(any)",
    GetPropertyChangedSignal="(Camera,string)=>(any)",
    GetRenderCFrame="(Camera)=>(CFrame)",
    GetRoll="(Camera)=>(number)",
    GetTiltSpeed="(Camera)=>(number)",
    HeadLocked="boolean",
    HeadScale="number",
    Interpolate="(Camera,CFrame,CFrame,number)=>()",
    InterpolationFinished="Event",
    IsA="(Camera,string)=>(boolean)",
    IsAncestorOf="(Camera,any)=>(boolean)",
    IsDescendantOf="(Camera,any)=>(boolean)",
    Name="string",
    NearPlaneZ="number",
    PanUnits="(Camera,number)=>()",
    Parent="any",
    Remove="(Camera)=>()",
    RobloxLocked="boolean",
    ScreenPointToRay="(Camera,number,number,number)=>(Ray)",
    SetAttribute="(Camera,string,any)=>()",
    SetCameraPanMode="(Camera,any)=>()",
    SetImageServerView="(Camera,CFrame)=>()",
    SetRoll="(Camera,number)=>()",
    Tags="any",
    TiltUnits="(Camera,number)=>(boolean)",
    ViewportPointToRay="(Camera,number,number,number)=>(Ray)",
    ViewportSize="Vector2",
    WaitForChild="(Camera,string,number)=>(any)",
    WorldToScreenPoint="(Camera,Vector3)=>(any)",
    WorldToViewportPoint="(Camera,Vector3)=>(any)",
    Zoom="(Camera,number)=>(boolean)",
    archivable="boolean",
    childAdded="Event",
    children="(Camera)=>(any)",
    className="string",
    clone="(Camera)=>(any)",
    destroy="(Camera)=>()",
    findFirstChild="(Camera,string,boolean)=>(any)",
    focus="CFrame",
    getChildren="(Camera)=>(any)",
    isA="(Camera,string)=>(boolean)",
    isDescendantOf="(Camera,any)=>(boolean)",
    remove="(Camera)=>()"}


, PlayerEmulatorService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PlayerEmulatorService)=>()",
    Clone="(PlayerEmulatorService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PlayerEmulatorService)=>()",
    FindFirstAncestor="(PlayerEmulatorService,string)=>(any)",
    FindFirstAncestorOfClass="(PlayerEmulatorService,string)=>(any)",
    FindFirstAncestorWhichIsA="(PlayerEmulatorService,string)=>(any)",
    FindFirstChild="(PlayerEmulatorService,string,boolean)=>(any)",
    FindFirstChildOfClass="(PlayerEmulatorService,string)=>(any)",
    FindFirstChildWhichIsA="(PlayerEmulatorService,string,boolean)=>(any)",
    GetAttribute="(PlayerEmulatorService,string)=>(any)",
    GetAttributeChangedSignal="(PlayerEmulatorService,string)=>(any)",
    GetAttributes="(PlayerEmulatorService)=>(any)",
    GetChildren="(PlayerEmulatorService)=>(any)",
    GetDebugId="(PlayerEmulatorService,number)=>(string)",
    GetDescendants="(PlayerEmulatorService)=>(any)",
    GetEmulatedPolicyInfo="(PlayerEmulatorService)=>(any)",
    GetFullName="(PlayerEmulatorService)=>(string)",
    GetPropertyChangedSignal="(PlayerEmulatorService,string)=>(any)",
    IsA="(PlayerEmulatorService,string)=>(boolean)",
    IsAncestorOf="(PlayerEmulatorService,any)=>(boolean)",
    IsDescendantOf="(PlayerEmulatorService,any)=>(boolean)",
    Name="string",
    Parent="any",
    PlayerEmulationEnabled="boolean",
    Remove="(PlayerEmulatorService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PlayerEmulatorService,string,any)=>()",
    SetEmulatedPolicyInfo="(PlayerEmulatorService,any)=>()",
    StudioEmulatedCountryRegionCode="string",
    Tags="any",
    WaitForChild="(PlayerEmulatorService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PlayerEmulatorService)=>(any)",
    className="string",
    clone="(PlayerEmulatorService)=>(any)",
    destroy="(PlayerEmulatorService)=>()",
    findFirstChild="(PlayerEmulatorService,string,boolean)=>(any)",
    getChildren="(PlayerEmulatorService)=>(any)",
    isA="(PlayerEmulatorService,string)=>(boolean)",
    isDescendantOf="(PlayerEmulatorService,any)=>(boolean)",
    remove="(PlayerEmulatorService)=>()"}


, ChangeHistoryService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ChangeHistoryService)=>()",
    Clone="(ChangeHistoryService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ChangeHistoryService)=>()",
    FindFirstAncestor="(ChangeHistoryService,string)=>(any)",
    FindFirstAncestorOfClass="(ChangeHistoryService,string)=>(any)",
    FindFirstAncestorWhichIsA="(ChangeHistoryService,string)=>(any)",
    FindFirstChild="(ChangeHistoryService,string,boolean)=>(any)",
    FindFirstChildOfClass="(ChangeHistoryService,string)=>(any)",
    FindFirstChildWhichIsA="(ChangeHistoryService,string,boolean)=>(any)",
    GetAttribute="(ChangeHistoryService,string)=>(any)",
    GetAttributeChangedSignal="(ChangeHistoryService,string)=>(any)",
    GetAttributes="(ChangeHistoryService)=>(any)",
    GetCanRedo="(ChangeHistoryService)=>(any)",
    GetCanUndo="(ChangeHistoryService)=>(any)",
    GetChildren="(ChangeHistoryService)=>(any)",
    GetDebugId="(ChangeHistoryService,number)=>(string)",
    GetDescendants="(ChangeHistoryService)=>(any)",
    GetFullName="(ChangeHistoryService)=>(string)",
    GetPropertyChangedSignal="(ChangeHistoryService,string)=>(any)",
    IsA="(ChangeHistoryService,string)=>(boolean)",
    IsAncestorOf="(ChangeHistoryService,any)=>(boolean)",
    IsDescendantOf="(ChangeHistoryService,any)=>(boolean)",
    Name="string",
    OnRedo="Event",
    OnUndo="Event",
    Parent="any",
    Redo="(ChangeHistoryService)=>()",
    Remove="(ChangeHistoryService)=>()",
    ResetWaypoints="(ChangeHistoryService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ChangeHistoryService,string,any)=>()",
    SetEnabled="(ChangeHistoryService,boolean)=>()",
    SetWaypoint="(ChangeHistoryService,string)=>()",
    Tags="any",
    Undo="(ChangeHistoryService)=>()",
    WaitForChild="(ChangeHistoryService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ChangeHistoryService)=>(any)",
    className="string",
    clone="(ChangeHistoryService)=>(any)",
    destroy="(ChangeHistoryService)=>()",
    findFirstChild="(ChangeHistoryService,string,boolean)=>(any)",
    getChildren="(ChangeHistoryService)=>(any)",
    isA="(ChangeHistoryService,string)=>(boolean)",
    isDescendantOf="(ChangeHistoryService,any)=>(boolean)",
    remove="(ChangeHistoryService)=>()"}


, CharacterMesh={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BaseTextureId="number",
    BodyPart="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(CharacterMesh)=>()",
    Clone="(CharacterMesh)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(CharacterMesh)=>()",
    FindFirstAncestor="(CharacterMesh,string)=>(any)",
    FindFirstAncestorOfClass="(CharacterMesh,string)=>(any)",
    FindFirstAncestorWhichIsA="(CharacterMesh,string)=>(any)",
    FindFirstChild="(CharacterMesh,string,boolean)=>(any)",
    FindFirstChildOfClass="(CharacterMesh,string)=>(any)",
    FindFirstChildWhichIsA="(CharacterMesh,string,boolean)=>(any)",
    GetAttribute="(CharacterMesh,string)=>(any)",
    GetAttributeChangedSignal="(CharacterMesh,string)=>(any)",
    GetAttributes="(CharacterMesh)=>(any)",
    GetChildren="(CharacterMesh)=>(any)",
    GetDebugId="(CharacterMesh,number)=>(string)",
    GetDescendants="(CharacterMesh)=>(any)",
    GetFullName="(CharacterMesh)=>(string)",
    GetPropertyChangedSignal="(CharacterMesh,string)=>(any)",
    IsA="(CharacterMesh,string)=>(boolean)",
    IsAncestorOf="(CharacterMesh,any)=>(boolean)",
    IsDescendantOf="(CharacterMesh,any)=>(boolean)",
    MeshId="number",
    Name="string",
    OverlayTextureId="number",
    Parent="any",
    Remove="(CharacterMesh)=>()",
    RobloxLocked="boolean",
    SetAttribute="(CharacterMesh,string,any)=>()",
    Tags="any",
    WaitForChild="(CharacterMesh,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(CharacterMesh)=>(any)",
    className="string",
    clone="(CharacterMesh)=>(any)",
    destroy="(CharacterMesh)=>()",
    findFirstChild="(CharacterMesh,string,boolean)=>(any)",
    getChildren="(CharacterMesh)=>(any)",
    isA="(CharacterMesh,string)=>(boolean)",
    isDescendantOf="(CharacterMesh,any)=>(boolean)",
    remove="(CharacterMesh)=>()"}


, Chat={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BubbleChatEnabled="boolean",
    CanUserChatAsync="(Chat,number)=>(boolean)",
    CanUsersChatAsync="(Chat,number,number)=>(boolean)",
    Changed="Event",
    Chat="(Chat,any,string,any)=>()",
    ChatLocal="(Chat,any,string,any)=>()",
    Chatted="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Chat)=>()",
    ClientToServerFilterMessageSignalV2="Event",
    ClientToServerReportUnfilteredSignal="Event",
    Clone="(Chat)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Chat)=>()",
    FilterStringAsync="(Chat,string,any,any)=>(string)",
    FilterStringForBroadcast="(Chat,string,any)=>(string)",
    FilterStringForPlayerAsync="(Chat,string,any)=>(string)",
    FindFirstAncestor="(Chat,string)=>(any)",
    FindFirstAncestorOfClass="(Chat,string)=>(any)",
    FindFirstAncestorWhichIsA="(Chat,string)=>(any)",
    FindFirstChild="(Chat,string,boolean)=>(any)",
    FindFirstChildOfClass="(Chat,string)=>(any)",
    FindFirstChildWhichIsA="(Chat,string,boolean)=>(any)",
    GetAttribute="(Chat,string)=>(any)",
    GetAttributeChangedSignal="(Chat,string)=>(any)",
    GetAttributes="(Chat)=>(any)",
    GetChildren="(Chat)=>(any)",
    GetDebugId="(Chat,number)=>(string)",
    GetDescendants="(Chat)=>(any)",
    GetFullName="(Chat)=>(string)",
    GetPropertyChangedSignal="(Chat,string)=>(any)",
    GetShouldUseLuaChat="(Chat)=>(boolean)",
    InvokeChatCallback="(Chat,any,any)=>(any)",
    IsA="(Chat,string)=>(boolean)",
    IsAncestorOf="(Chat,any)=>(boolean)",
    IsDescendantOf="(Chat,any)=>(boolean)",
    LoadDefaultChat="boolean",
    Name="string",
    Parent="any",
    RegisterChatCallback="(Chat,any,any)=>()",
    Remove="(Chat)=>()",
    RobloxLocked="boolean",
    ServerToClientUnderOver13FilteredResponseSignal="Event",
    SetAttribute="(Chat,string,any)=>()",
    Tags="any",
    WaitForChild="(Chat,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Chat)=>(any)",
    className="string",
    clone="(Chat)=>(any)",
    destroy="(Chat)=>()",
    findFirstChild="(Chat,string,boolean)=>(any)",
    getChildren="(Chat)=>(any)",
    isA="(Chat,string)=>(boolean)",
    isDescendantOf="(Chat,any)=>(boolean)",
    remove="(Chat)=>()"}


, TouchInputService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(TouchInputService)=>()",
    Clone="(TouchInputService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(TouchInputService)=>()",
    FindFirstAncestor="(TouchInputService,string)=>(any)",
    FindFirstAncestorOfClass="(TouchInputService,string)=>(any)",
    FindFirstAncestorWhichIsA="(TouchInputService,string)=>(any)",
    FindFirstChild="(TouchInputService,string,boolean)=>(any)",
    FindFirstChildOfClass="(TouchInputService,string)=>(any)",
    FindFirstChildWhichIsA="(TouchInputService,string,boolean)=>(any)",
    GetAttribute="(TouchInputService,string)=>(any)",
    GetAttributeChangedSignal="(TouchInputService,string)=>(any)",
    GetAttributes="(TouchInputService)=>(any)",
    GetChildren="(TouchInputService)=>(any)",
    GetDebugId="(TouchInputService,number)=>(string)",
    GetDescendants="(TouchInputService)=>(any)",
    GetFullName="(TouchInputService)=>(string)",
    GetPropertyChangedSignal="(TouchInputService,string)=>(any)",
    IsA="(TouchInputService,string)=>(boolean)",
    IsAncestorOf="(TouchInputService,any)=>(boolean)",
    IsDescendantOf="(TouchInputService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(TouchInputService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(TouchInputService,string,any)=>()",
    Tags="any",
    WaitForChild="(TouchInputService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(TouchInputService)=>(any)",
    className="string",
    clone="(TouchInputService)=>(any)",
    destroy="(TouchInputService)=>()",
    findFirstChild="(TouchInputService,string,boolean)=>(any)",
    getChildren="(TouchInputService)=>(any)",
    isA="(TouchInputService,string)=>(boolean)",
    isDescendantOf="(TouchInputService,any)=>(boolean)",
    remove="(TouchInputService)=>()"}


, ChorusSoundEffect={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ChorusSoundEffect)=>()",
    Clone="(ChorusSoundEffect)=>(any)",
    DataCost="number",
    Depth="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ChorusSoundEffect)=>()",
    Enabled="boolean",
    FindFirstAncestor="(ChorusSoundEffect,string)=>(any)",
    FindFirstAncestorOfClass="(ChorusSoundEffect,string)=>(any)",
    FindFirstAncestorWhichIsA="(ChorusSoundEffect,string)=>(any)",
    FindFirstChild="(ChorusSoundEffect,string,boolean)=>(any)",
    FindFirstChildOfClass="(ChorusSoundEffect,string)=>(any)",
    FindFirstChildWhichIsA="(ChorusSoundEffect,string,boolean)=>(any)",
    GetAttribute="(ChorusSoundEffect,string)=>(any)",
    GetAttributeChangedSignal="(ChorusSoundEffect,string)=>(any)",
    GetAttributes="(ChorusSoundEffect)=>(any)",
    GetChildren="(ChorusSoundEffect)=>(any)",
    GetDebugId="(ChorusSoundEffect,number)=>(string)",
    GetDescendants="(ChorusSoundEffect)=>(any)",
    GetFullName="(ChorusSoundEffect)=>(string)",
    GetPropertyChangedSignal="(ChorusSoundEffect,string)=>(any)",
    IsA="(ChorusSoundEffect,string)=>(boolean)",
    IsAncestorOf="(ChorusSoundEffect,any)=>(boolean)",
    IsDescendantOf="(ChorusSoundEffect,any)=>(boolean)",
    Mix="number",
    Name="string",
    Parent="any",
    Priority="number",
    Rate="number",
    Remove="(ChorusSoundEffect)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ChorusSoundEffect,string,any)=>()",
    Tags="any",
    WaitForChild="(ChorusSoundEffect,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ChorusSoundEffect)=>(any)",
    className="string",
    clone="(ChorusSoundEffect)=>(any)",
    destroy="(ChorusSoundEffect)=>()",
    findFirstChild="(ChorusSoundEffect,string,boolean)=>(any)",
    getChildren="(ChorusSoundEffect)=>(any)",
    isA="(ChorusSoundEffect,string)=>(boolean)",
    isDescendantOf="(ChorusSoundEffect,any)=>(boolean)",
    remove="(ChorusSoundEffect)=>()"}


, TeleportService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(TeleportService)=>()",
    Clone="(TeleportService)=>(any)",
    CustomizedTeleportUI="boolean",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(TeleportService)=>()",
    FindFirstAncestor="(TeleportService,string)=>(any)",
    FindFirstAncestorOfClass="(TeleportService,string)=>(any)",
    FindFirstAncestorWhichIsA="(TeleportService,string)=>(any)",
    FindFirstChild="(TeleportService,string,boolean)=>(any)",
    FindFirstChildOfClass="(TeleportService,string)=>(any)",
    FindFirstChildWhichIsA="(TeleportService,string,boolean)=>(any)",
    GetArrivingTeleportGui="(TeleportService)=>(any)",
    GetAttribute="(TeleportService,string)=>(any)",
    GetAttributeChangedSignal="(TeleportService,string)=>(any)",
    GetAttributes="(TeleportService)=>(any)",
    GetChildren="(TeleportService)=>(any)",
    GetDebugId="(TeleportService,number)=>(string)",
    GetDescendants="(TeleportService)=>(any)",
    GetFullName="(TeleportService)=>(string)",
    GetLocalPlayerTeleportData="(TeleportService)=>(any)",
    GetPlayerPlaceInstanceAsync="(TeleportService,number)=>(any)",
    GetPropertyChangedSignal="(TeleportService,string)=>(any)",
    GetTeleportSetting="(TeleportService,string)=>(any)",
    IsA="(TeleportService,string)=>(boolean)",
    IsAncestorOf="(TeleportService,any)=>(boolean)",
    IsDescendantOf="(TeleportService,any)=>(boolean)",
    LocalPlayerArrivedFromTeleport="Event",
    Name="string",
    Parent="any",
    Remove="(TeleportService)=>()",
    ReserveServer="(TeleportService,number)=>(any)",
    RobloxLocked="boolean",
    SetAttribute="(TeleportService,string,any)=>()",
    SetTeleportGui="(TeleportService,any)=>()",
    SetTeleportSetting="(TeleportService,string,any)=>()",
    Tags="any",
    Teleport="(TeleportService,number,any,any,any)=>()",
    TeleportCancel="(TeleportService)=>()",
    TeleportInitFailed="Event",
    TeleportPartyAsync="(TeleportService,number,any,any,any)=>(string)",
    TeleportToPlaceInstance="(TeleportService,number,string,any,string,any,any)=>()",
    TeleportToPrivateServer="(TeleportService,number,string,any,string,any,any)=>()",
    TeleportToSpawnByName="(TeleportService,number,string,any,any,any)=>()",
    WaitForChild="(TeleportService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(TeleportService)=>(any)",
    className="string",
    clone="(TeleportService)=>(any)",
    destroy="(TeleportService)=>()",
    findFirstChild="(TeleportService,string,boolean)=>(any)",
    getChildren="(TeleportService)=>(any)",
    isA="(TeleportService,string)=>(boolean)",
    isDescendantOf="(TeleportService,any)=>(boolean)",
    remove="(TeleportService)=>()"}


, ScriptContext={
    AddCoreScriptLocal="(ScriptContext,string,any)=>()",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ScriptContext)=>()",
    Clone="(ScriptContext)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ScriptContext)=>()",
    Error="Event",
    FindFirstAncestor="(ScriptContext,string)=>(any)",
    FindFirstAncestorOfClass="(ScriptContext,string)=>(any)",
    FindFirstAncestorWhichIsA="(ScriptContext,string)=>(any)",
    FindFirstChild="(ScriptContext,string,boolean)=>(any)",
    FindFirstChildOfClass="(ScriptContext,string)=>(any)",
    FindFirstChildWhichIsA="(ScriptContext,string,boolean)=>(any)",
    GetAttribute="(ScriptContext,string)=>(any)",
    GetAttributeChangedSignal="(ScriptContext,string)=>(any)",
    GetAttributes="(ScriptContext)=>(any)",
    GetChildren="(ScriptContext)=>(any)",
    GetCoverageStats="(ScriptContext)=>(any)",
    GetDebugId="(ScriptContext,number)=>(string)",
    GetDescendants="(ScriptContext)=>(any)",
    GetFullName="(ScriptContext)=>(string)",
    GetPropertyChangedSignal="(ScriptContext,string)=>(any)",
    IsA="(ScriptContext,string)=>(boolean)",
    IsAncestorOf="(ScriptContext,any)=>(boolean)",
    IsDescendantOf="(ScriptContext,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(ScriptContext)=>()",
    RobloxLocked="boolean",
    ScriptsDisabled="boolean",
    SetAttribute="(ScriptContext,string,any)=>()",
    SetTimeout="(ScriptContext,number)=>()",
    Tags="any",
    WaitForChild="(ScriptContext,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ScriptContext)=>(any)",
    className="string",
    clone="(ScriptContext)=>(any)",
    destroy="(ScriptContext)=>()",
    findFirstChild="(ScriptContext,string,boolean)=>(any)",
    getChildren="(ScriptContext)=>(any)",
    isA="(ScriptContext,string)=>(boolean)",
    isDescendantOf="(ScriptContext,any)=>(boolean)",
    remove="(ScriptContext)=>()"}


, RodConstraint={
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    Attachment0="any",
    Attachment1="any",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(RodConstraint)=>()",
    Clone="(RodConstraint)=>(any)",
    Color="any",
    CurrentDistance="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(RodConstraint)=>()",
    Enabled="boolean",
    FindFirstAncestor="(RodConstraint,string)=>(any)",
    FindFirstAncestorOfClass="(RodConstraint,string)=>(any)",
    FindFirstAncestorWhichIsA="(RodConstraint,string)=>(any)",
    FindFirstChild="(RodConstraint,string,boolean)=>(any)",
    FindFirstChildOfClass="(RodConstraint,string)=>(any)",
    FindFirstChildWhichIsA="(RodConstraint,string,boolean)=>(any)",
    GetAttribute="(RodConstraint,string)=>(any)",
    GetAttributeChangedSignal="(RodConstraint,string)=>(any)",
    GetAttributes="(RodConstraint)=>(any)",
    GetChildren="(RodConstraint)=>(any)",
    GetDebugId="(RodConstraint,number)=>(string)",
    GetDescendants="(RodConstraint)=>(any)",
    GetFullName="(RodConstraint)=>(string)",
    GetPropertyChangedSignal="(RodConstraint,string)=>(any)",
    IsA="(RodConstraint,string)=>(boolean)",
    IsAncestorOf="(RodConstraint,any)=>(boolean)",
    IsDescendantOf="(RodConstraint,any)=>(boolean)",
    Length="number",
    Name="string",
    Parent="any",
    Remove="(RodConstraint)=>()",
    RobloxLocked="boolean",
    SetAttribute="(RodConstraint,string,any)=>()",
    Tags="any",
    Thickness="number",
    Visible="boolean",
    WaitForChild="(RodConstraint,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(RodConstraint)=>(any)",
    className="string",
    clone="(RodConstraint)=>(any)",
    destroy="(RodConstraint)=>()",
    findFirstChild="(RodConstraint,string,boolean)=>(any)",
    getChildren="(RodConstraint)=>(any)",
    isA="(RodConstraint,string)=>(boolean)",
    isDescendantOf="(RodConstraint,any)=>(boolean)",
    remove="(RodConstraint)=>()"}


, ClickDetector={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ClickDetector)=>()",
    Clone="(ClickDetector)=>(any)",
    CursorIcon="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ClickDetector)=>()",
    FindFirstAncestor="(ClickDetector,string)=>(any)",
    FindFirstAncestorOfClass="(ClickDetector,string)=>(any)",
    FindFirstAncestorWhichIsA="(ClickDetector,string)=>(any)",
    FindFirstChild="(ClickDetector,string,boolean)=>(any)",
    FindFirstChildOfClass="(ClickDetector,string)=>(any)",
    FindFirstChildWhichIsA="(ClickDetector,string,boolean)=>(any)",
    GetAttribute="(ClickDetector,string)=>(any)",
    GetAttributeChangedSignal="(ClickDetector,string)=>(any)",
    GetAttributes="(ClickDetector)=>(any)",
    GetChildren="(ClickDetector)=>(any)",
    GetDebugId="(ClickDetector,number)=>(string)",
    GetDescendants="(ClickDetector)=>(any)",
    GetFullName="(ClickDetector)=>(string)",
    GetPropertyChangedSignal="(ClickDetector,string)=>(any)",
    IsA="(ClickDetector,string)=>(boolean)",
    IsAncestorOf="(ClickDetector,any)=>(boolean)",
    IsDescendantOf="(ClickDetector,any)=>(boolean)",
    MaxActivationDistance="number",
    MouseActionReplicated="Event",
    MouseClick="Event",
    MouseHoverEnter="Event",
    MouseHoverLeave="Event",
    Name="string",
    Parent="any",
    Remove="(ClickDetector)=>()",
    RightMouseClick="Event",
    RobloxLocked="boolean",
    SetAttribute="(ClickDetector,string,any)=>()",
    Tags="any",
    WaitForChild="(ClickDetector,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ClickDetector)=>(any)",
    className="string",
    clone="(ClickDetector)=>(any)",
    destroy="(ClickDetector)=>()",
    findFirstChild="(ClickDetector,string,boolean)=>(any)",
    getChildren="(ClickDetector)=>(any)",
    isA="(ClickDetector,string)=>(boolean)",
    isDescendantOf="(ClickDetector,any)=>(boolean)",
    mouseClick="Event",
    remove="(ClickDetector)=>()"}


, ClientReplicator={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ClientReplicator)=>()",
    Clone="(ClientReplicator)=>(any)",
    CloseConnection="(ClientReplicator)=>()",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ClientReplicator)=>()",
    FindFirstAncestor="(ClientReplicator,string)=>(any)",
    FindFirstAncestorOfClass="(ClientReplicator,string)=>(any)",
    FindFirstAncestorWhichIsA="(ClientReplicator,string)=>(any)",
    FindFirstChild="(ClientReplicator,string,boolean)=>(any)",
    FindFirstChildOfClass="(ClientReplicator,string)=>(any)",
    FindFirstChildWhichIsA="(ClientReplicator,string,boolean)=>(any)",
    GetAttribute="(ClientReplicator,string)=>(any)",
    GetAttributeChangedSignal="(ClientReplicator,string)=>(any)",
    GetAttributes="(ClientReplicator)=>(any)",
    GetChildren="(ClientReplicator)=>(any)",
    GetDebugId="(ClientReplicator,number)=>(string)",
    GetDescendants="(ClientReplicator)=>(any)",
    GetFullName="(ClientReplicator)=>(string)",
    GetPlayer="(ClientReplicator)=>(any)",
    GetPropertyChangedSignal="(ClientReplicator,string)=>(any)",
    GetRakStatsString="(ClientReplicator,number)=>(string)",
    IsA="(ClientReplicator,string)=>(boolean)",
    IsAncestorOf="(ClientReplicator,any)=>(boolean)",
    IsDescendantOf="(ClientReplicator,any)=>(boolean)",
    Name="string",
    Parent="any",
    RCCProfilerDataComplete="Event",
    Remove="(ClientReplicator)=>()",
    RequestRCCProfilerData="(ClientReplicator,number,number)=>()",
    RequestServerStats="(ClientReplicator,boolean)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ClientReplicator,string,any)=>()",
    StatsReceived="Event",
    Tags="any",
    WaitForChild="(ClientReplicator,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ClientReplicator)=>(any)",
    className="string",
    clone="(ClientReplicator)=>(any)",
    destroy="(ClientReplicator)=>()",
    findFirstChild="(ClientReplicator,string,boolean)=>(any)",
    getChildren="(ClientReplicator)=>(any)",
    isA="(ClientReplicator,string)=>(boolean)",
    isDescendantOf="(ClientReplicator,any)=>(boolean)",
    remove="(ClientReplicator)=>()"}


, Clothing={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Clothing)=>()",
    Clone="(Clothing)=>(any)",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Clothing)=>()",
    FindFirstAncestor="(Clothing,string)=>(any)",
    FindFirstAncestorOfClass="(Clothing,string)=>(any)",
    FindFirstAncestorWhichIsA="(Clothing,string)=>(any)",
    FindFirstChild="(Clothing,string,boolean)=>(any)",
    FindFirstChildOfClass="(Clothing,string)=>(any)",
    FindFirstChildWhichIsA="(Clothing,string,boolean)=>(any)",
    GetAttribute="(Clothing,string)=>(any)",
    GetAttributeChangedSignal="(Clothing,string)=>(any)",
    GetAttributes="(Clothing)=>(any)",
    GetChildren="(Clothing)=>(any)",
    GetDebugId="(Clothing,number)=>(string)",
    GetDescendants="(Clothing)=>(any)",
    GetFullName="(Clothing)=>(string)",
    GetPropertyChangedSignal="(Clothing,string)=>(any)",
    IsA="(Clothing,string)=>(boolean)",
    IsAncestorOf="(Clothing,any)=>(boolean)",
    IsDescendantOf="(Clothing,any)=>(boolean)",
    Name="string",
    Outfit1="any",
    Outfit2="any",
    Parent="any",
    Remove="(Clothing)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Clothing,string,any)=>()",
    Tags="any",
    WaitForChild="(Clothing,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Clothing)=>(any)",
    className="string",
    clone="(Clothing)=>(any)",
    destroy="(Clothing)=>()",
    findFirstChild="(Clothing,string,boolean)=>(any)",
    getChildren="(Clothing)=>(any)",
    isA="(Clothing,string)=>(boolean)",
    isDescendantOf="(Clothing,any)=>(boolean)",
    remove="(Clothing)=>()"}


, ClusterPacketCache={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ClusterPacketCache)=>()",
    Clone="(ClusterPacketCache)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ClusterPacketCache)=>()",
    FindFirstAncestor="(ClusterPacketCache,string)=>(any)",
    FindFirstAncestorOfClass="(ClusterPacketCache,string)=>(any)",
    FindFirstAncestorWhichIsA="(ClusterPacketCache,string)=>(any)",
    FindFirstChild="(ClusterPacketCache,string,boolean)=>(any)",
    FindFirstChildOfClass="(ClusterPacketCache,string)=>(any)",
    FindFirstChildWhichIsA="(ClusterPacketCache,string,boolean)=>(any)",
    GetAttribute="(ClusterPacketCache,string)=>(any)",
    GetAttributeChangedSignal="(ClusterPacketCache,string)=>(any)",
    GetAttributes="(ClusterPacketCache)=>(any)",
    GetChildren="(ClusterPacketCache)=>(any)",
    GetDebugId="(ClusterPacketCache,number)=>(string)",
    GetDescendants="(ClusterPacketCache)=>(any)",
    GetFullName="(ClusterPacketCache)=>(string)",
    GetPropertyChangedSignal="(ClusterPacketCache,string)=>(any)",
    IsA="(ClusterPacketCache,string)=>(boolean)",
    IsAncestorOf="(ClusterPacketCache,any)=>(boolean)",
    IsDescendantOf="(ClusterPacketCache,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(ClusterPacketCache)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ClusterPacketCache,string,any)=>()",
    Tags="any",
    WaitForChild="(ClusterPacketCache,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ClusterPacketCache)=>(any)",
    className="string",
    clone="(ClusterPacketCache)=>(any)",
    destroy="(ClusterPacketCache)=>()",
    findFirstChild="(ClusterPacketCache,string,boolean)=>(any)",
    getChildren="(ClusterPacketCache)=>(any)",
    isA="(ClusterPacketCache,string)=>(boolean)",
    isDescendantOf="(ClusterPacketCache,any)=>(boolean)",
    remove="(ClusterPacketCache)=>()"}


, CollectionService={
    AddTag="(CollectionService,any,string)=>()",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(CollectionService)=>()",
    Clone="(CollectionService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(CollectionService)=>()",
    FindFirstAncestor="(CollectionService,string)=>(any)",
    FindFirstAncestorOfClass="(CollectionService,string)=>(any)",
    FindFirstAncestorWhichIsA="(CollectionService,string)=>(any)",
    FindFirstChild="(CollectionService,string,boolean)=>(any)",
    FindFirstChildOfClass="(CollectionService,string)=>(any)",
    FindFirstChildWhichIsA="(CollectionService,string,boolean)=>(any)",
    GetAttribute="(CollectionService,string)=>(any)",
    GetAttributeChangedSignal="(CollectionService,string)=>(any)",
    GetAttributes="(CollectionService)=>(any)",
    GetChildren="(CollectionService)=>(any)",
    GetCollection="(CollectionService,string)=>(any)",
    GetDebugId="(CollectionService,number)=>(string)",
    GetDescendants="(CollectionService)=>(any)",
    GetFullName="(CollectionService)=>(string)",
    GetInstanceAddedSignal="(CollectionService,string)=>(any)",
    GetInstanceRemovedSignal="(CollectionService,string)=>(any)",
    GetPropertyChangedSignal="(CollectionService,string)=>(any)",
    GetTagged="(CollectionService,string)=>(any)",
    GetTags="(CollectionService,any)=>(any)",
    HasTag="(CollectionService,any,string)=>(boolean)",
    IsA="(CollectionService,string)=>(boolean)",
    IsAncestorOf="(CollectionService,any)=>(boolean)",
    IsDescendantOf="(CollectionService,any)=>(boolean)",
    ItemAdded="Event",
    ItemRemoved="Event",
    Name="string",
    Parent="any",
    Remove="(CollectionService)=>()",
    RemoveTag="(CollectionService,any,string)=>()",
    RobloxLocked="boolean",
    SetAttribute="(CollectionService,string,any)=>()",
    Tags="any",
    WaitForChild="(CollectionService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(CollectionService)=>(any)",
    className="string",
    clone="(CollectionService)=>(any)",
    destroy="(CollectionService)=>()",
    findFirstChild="(CollectionService,string,boolean)=>(any)",
    getChildren="(CollectionService)=>(any)",
    isA="(CollectionService,string)=>(boolean)",
    isDescendantOf="(CollectionService,any)=>(boolean)",
    remove="(CollectionService)=>()"}


, PackageService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PackageService)=>()",
    Clone="(PackageService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PackageService)=>()",
    FindFirstAncestor="(PackageService,string)=>(any)",
    FindFirstAncestorOfClass="(PackageService,string)=>(any)",
    FindFirstAncestorWhichIsA="(PackageService,string)=>(any)",
    FindFirstChild="(PackageService,string,boolean)=>(any)",
    FindFirstChildOfClass="(PackageService,string)=>(any)",
    FindFirstChildWhichIsA="(PackageService,string,boolean)=>(any)",
    GetAttribute="(PackageService,string)=>(any)",
    GetAttributeChangedSignal="(PackageService,string)=>(any)",
    GetAttributes="(PackageService)=>(any)",
    GetChildren="(PackageService)=>(any)",
    GetDebugId="(PackageService,number)=>(string)",
    GetDescendants="(PackageService)=>(any)",
    GetFullName="(PackageService)=>(string)",
    GetPropertyChangedSignal="(PackageService,string)=>(any)",
    IsA="(PackageService,string)=>(boolean)",
    IsAncestorOf="(PackageService,any)=>(boolean)",
    IsDescendantOf="(PackageService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(PackageService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PackageService,string,any)=>()",
    Tags="any",
    WaitForChild="(PackageService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PackageService)=>(any)",
    className="string",
    clone="(PackageService)=>(any)",
    destroy="(PackageService)=>()",
    findFirstChild="(PackageService,string,boolean)=>(any)",
    getChildren="(PackageService)=>(any)",
    isA="(PackageService,string)=>(boolean)",
    isDescendantOf="(PackageService,any)=>(boolean)",
    remove="(PackageService)=>()"}


, NetworkClient={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(NetworkClient)=>()",
    Clone="(NetworkClient)=>(any)",
    ConnectionAccepted="Event",
    ConnectionFailed="Event",
    ConnectionRejected="Event",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(NetworkClient)=>()",
    FindFirstAncestor="(NetworkClient,string)=>(any)",
    FindFirstAncestorOfClass="(NetworkClient,string)=>(any)",
    FindFirstAncestorWhichIsA="(NetworkClient,string)=>(any)",
    FindFirstChild="(NetworkClient,string,boolean)=>(any)",
    FindFirstChildOfClass="(NetworkClient,string)=>(any)",
    FindFirstChildWhichIsA="(NetworkClient,string,boolean)=>(any)",
    GetAttribute="(NetworkClient,string)=>(any)",
    GetAttributeChangedSignal="(NetworkClient,string)=>(any)",
    GetAttributes="(NetworkClient)=>(any)",
    GetChildren="(NetworkClient)=>(any)",
    GetDebugId="(NetworkClient,number)=>(string)",
    GetDescendants="(NetworkClient)=>(any)",
    GetFullName="(NetworkClient)=>(string)",
    GetPropertyChangedSignal="(NetworkClient,string)=>(any)",
    IsA="(NetworkClient,string)=>(boolean)",
    IsAncestorOf="(NetworkClient,any)=>(boolean)",
    IsDescendantOf="(NetworkClient,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(NetworkClient)=>()",
    RobloxLocked="boolean",
    SetAttribute="(NetworkClient,string,any)=>()",
    SetOutgoingKBPSLimit="(NetworkClient,number)=>()",
    Tags="any",
    Ticket="string",
    WaitForChild="(NetworkClient,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(NetworkClient)=>(any)",
    className="string",
    clone="(NetworkClient)=>(any)",
    destroy="(NetworkClient)=>()",
    findFirstChild="(NetworkClient,string,boolean)=>(any)",
    getChildren="(NetworkClient)=>(any)",
    isA="(NetworkClient,string)=>(boolean)",
    isDescendantOf="(NetworkClient,any)=>(boolean)",
    remove="(NetworkClient)=>()"}


, Color3Value={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Color3Value)=>()",
    Clone="(Color3Value)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Color3Value)=>()",
    FindFirstAncestor="(Color3Value,string)=>(any)",
    FindFirstAncestorOfClass="(Color3Value,string)=>(any)",
    FindFirstAncestorWhichIsA="(Color3Value,string)=>(any)",
    FindFirstChild="(Color3Value,string,boolean)=>(any)",
    FindFirstChildOfClass="(Color3Value,string)=>(any)",
    FindFirstChildWhichIsA="(Color3Value,string,boolean)=>(any)",
    GetAttribute="(Color3Value,string)=>(any)",
    GetAttributeChangedSignal="(Color3Value,string)=>(any)",
    GetAttributes="(Color3Value)=>(any)",
    GetChildren="(Color3Value)=>(any)",
    GetDebugId="(Color3Value,number)=>(string)",
    GetDescendants="(Color3Value)=>(any)",
    GetFullName="(Color3Value)=>(string)",
    GetPropertyChangedSignal="(Color3Value,string)=>(any)",
    IsA="(Color3Value,string)=>(boolean)",
    IsAncestorOf="(Color3Value,any)=>(boolean)",
    IsDescendantOf="(Color3Value,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Color3Value)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Color3Value,string,any)=>()",
    Tags="any",
    Value="Color3",
    WaitForChild="(Color3Value,string,number)=>(any)",
    archivable="boolean",
    changed="Event",
    childAdded="Event",
    children="(Color3Value)=>(any)",
    className="string",
    clone="(Color3Value)=>(any)",
    destroy="(Color3Value)=>()",
    findFirstChild="(Color3Value,string,boolean)=>(any)",
    getChildren="(Color3Value)=>(any)",
    isA="(Color3Value,string)=>(boolean)",
    isDescendantOf="(Color3Value,any)=>(boolean)",
    remove="(Color3Value)=>()"}


, DoubleConstrainedValue={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(DoubleConstrainedValue)=>()",
    Clone="(DoubleConstrainedValue)=>(any)",
    ConstrainedValue="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(DoubleConstrainedValue)=>()",
    FindFirstAncestor="(DoubleConstrainedValue,string)=>(any)",
    FindFirstAncestorOfClass="(DoubleConstrainedValue,string)=>(any)",
    FindFirstAncestorWhichIsA="(DoubleConstrainedValue,string)=>(any)",
    FindFirstChild="(DoubleConstrainedValue,string,boolean)=>(any)",
    FindFirstChildOfClass="(DoubleConstrainedValue,string)=>(any)",
    FindFirstChildWhichIsA="(DoubleConstrainedValue,string,boolean)=>(any)",
    GetAttribute="(DoubleConstrainedValue,string)=>(any)",
    GetAttributeChangedSignal="(DoubleConstrainedValue,string)=>(any)",
    GetAttributes="(DoubleConstrainedValue)=>(any)",
    GetChildren="(DoubleConstrainedValue)=>(any)",
    GetDebugId="(DoubleConstrainedValue,number)=>(string)",
    GetDescendants="(DoubleConstrainedValue)=>(any)",
    GetFullName="(DoubleConstrainedValue)=>(string)",
    GetPropertyChangedSignal="(DoubleConstrainedValue,string)=>(any)",
    IsA="(DoubleConstrainedValue,string)=>(boolean)",
    IsAncestorOf="(DoubleConstrainedValue,any)=>(boolean)",
    IsDescendantOf="(DoubleConstrainedValue,any)=>(boolean)",
    MaxValue="number",
    MinValue="number",
    Name="string",
    Parent="any",
    Remove="(DoubleConstrainedValue)=>()",
    RobloxLocked="boolean",
    SetAttribute="(DoubleConstrainedValue,string,any)=>()",
    Tags="any",
    Value="number",
    WaitForChild="(DoubleConstrainedValue,string,number)=>(any)",
    archivable="boolean",
    changed="Event",
    childAdded="Event",
    children="(DoubleConstrainedValue)=>(any)",
    className="string",
    clone="(DoubleConstrainedValue)=>(any)",
    destroy="(DoubleConstrainedValue)=>()",
    findFirstChild="(DoubleConstrainedValue,string,boolean)=>(any)",
    getChildren="(DoubleConstrainedValue)=>(any)",
    isA="(DoubleConstrainedValue,string)=>(boolean)",
    isDescendantOf="(DoubleConstrainedValue,any)=>(boolean)",
    remove="(DoubleConstrainedValue)=>()",
    value="number"}


, ColorCorrectionEffect={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Brightness="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ColorCorrectionEffect)=>()",
    Clone="(ColorCorrectionEffect)=>(any)",
    Contrast="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ColorCorrectionEffect)=>()",
    Enabled="boolean",
    FindFirstAncestor="(ColorCorrectionEffect,string)=>(any)",
    FindFirstAncestorOfClass="(ColorCorrectionEffect,string)=>(any)",
    FindFirstAncestorWhichIsA="(ColorCorrectionEffect,string)=>(any)",
    FindFirstChild="(ColorCorrectionEffect,string,boolean)=>(any)",
    FindFirstChildOfClass="(ColorCorrectionEffect,string)=>(any)",
    FindFirstChildWhichIsA="(ColorCorrectionEffect,string,boolean)=>(any)",
    GetAttribute="(ColorCorrectionEffect,string)=>(any)",
    GetAttributeChangedSignal="(ColorCorrectionEffect,string)=>(any)",
    GetAttributes="(ColorCorrectionEffect)=>(any)",
    GetChildren="(ColorCorrectionEffect)=>(any)",
    GetDebugId="(ColorCorrectionEffect,number)=>(string)",
    GetDescendants="(ColorCorrectionEffect)=>(any)",
    GetFullName="(ColorCorrectionEffect)=>(string)",
    GetPropertyChangedSignal="(ColorCorrectionEffect,string)=>(any)",
    IsA="(ColorCorrectionEffect,string)=>(boolean)",
    IsAncestorOf="(ColorCorrectionEffect,any)=>(boolean)",
    IsDescendantOf="(ColorCorrectionEffect,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(ColorCorrectionEffect)=>()",
    RobloxLocked="boolean",
    Saturation="number",
    SetAttribute="(ColorCorrectionEffect,string,any)=>()",
    Tags="any",
    TintColor="Color3",
    WaitForChild="(ColorCorrectionEffect,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ColorCorrectionEffect)=>(any)",
    className="string",
    clone="(ColorCorrectionEffect)=>(any)",
    destroy="(ColorCorrectionEffect)=>()",
    findFirstChild="(ColorCorrectionEffect,string,boolean)=>(any)",
    getChildren="(ColorCorrectionEffect)=>(any)",
    isA="(ColorCorrectionEffect,string)=>(boolean)",
    isDescendantOf="(ColorCorrectionEffect,any)=>(boolean)",
    remove="(ColorCorrectionEffect)=>()"}


, CompressorSoundEffect={
    AncestryChanged="Event",
    Archivable="boolean",
    Attack="number",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(CompressorSoundEffect)=>()",
    Clone="(CompressorSoundEffect)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(CompressorSoundEffect)=>()",
    Enabled="boolean",
    FindFirstAncestor="(CompressorSoundEffect,string)=>(any)",
    FindFirstAncestorOfClass="(CompressorSoundEffect,string)=>(any)",
    FindFirstAncestorWhichIsA="(CompressorSoundEffect,string)=>(any)",
    FindFirstChild="(CompressorSoundEffect,string,boolean)=>(any)",
    FindFirstChildOfClass="(CompressorSoundEffect,string)=>(any)",
    FindFirstChildWhichIsA="(CompressorSoundEffect,string,boolean)=>(any)",
    GainMakeup="number",
    GetAttribute="(CompressorSoundEffect,string)=>(any)",
    GetAttributeChangedSignal="(CompressorSoundEffect,string)=>(any)",
    GetAttributes="(CompressorSoundEffect)=>(any)",
    GetChildren="(CompressorSoundEffect)=>(any)",
    GetDebugId="(CompressorSoundEffect,number)=>(string)",
    GetDescendants="(CompressorSoundEffect)=>(any)",
    GetFullName="(CompressorSoundEffect)=>(string)",
    GetPropertyChangedSignal="(CompressorSoundEffect,string)=>(any)",
    IsA="(CompressorSoundEffect,string)=>(boolean)",
    IsAncestorOf="(CompressorSoundEffect,any)=>(boolean)",
    IsDescendantOf="(CompressorSoundEffect,any)=>(boolean)",
    Name="string",
    Parent="any",
    Priority="number",
    Ratio="number",
    Release="number",
    Remove="(CompressorSoundEffect)=>()",
    RobloxLocked="boolean",
    SetAttribute="(CompressorSoundEffect,string,any)=>()",
    SideChain="any",
    Tags="any",
    Threshold="number",
    WaitForChild="(CompressorSoundEffect,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(CompressorSoundEffect)=>(any)",
    className="string",
    clone="(CompressorSoundEffect)=>(any)",
    destroy="(CompressorSoundEffect)=>()",
    findFirstChild="(CompressorSoundEffect,string,boolean)=>(any)",
    getChildren="(CompressorSoundEffect)=>(any)",
    isA="(CompressorSoundEffect,string)=>(boolean)",
    isDescendantOf="(CompressorSoundEffect,any)=>(boolean)",
    remove="(CompressorSoundEffect)=>()"}


, PathfindingService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PathfindingService)=>()",
    Clone="(PathfindingService)=>(any)",
    ComputeRawPathAsync="(PathfindingService,Vector3,Vector3,number)=>(any)",
    ComputeSmoothPathAsync="(PathfindingService,Vector3,Vector3,number)=>(any)",
    CreatePath="(PathfindingService,any)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PathfindingService)=>()",
    EmptyCutoff="number",
    FindFirstAncestor="(PathfindingService,string)=>(any)",
    FindFirstAncestorOfClass="(PathfindingService,string)=>(any)",
    FindFirstAncestorWhichIsA="(PathfindingService,string)=>(any)",
    FindFirstChild="(PathfindingService,string,boolean)=>(any)",
    FindFirstChildOfClass="(PathfindingService,string)=>(any)",
    FindFirstChildWhichIsA="(PathfindingService,string,boolean)=>(any)",
    FindPathAsync="(PathfindingService,Vector3,Vector3)=>(any)",
    GetAttribute="(PathfindingService,string)=>(any)",
    GetAttributeChangedSignal="(PathfindingService,string)=>(any)",
    GetAttributes="(PathfindingService)=>(any)",
    GetChildren="(PathfindingService)=>(any)",
    GetDebugId="(PathfindingService,number)=>(string)",
    GetDescendants="(PathfindingService)=>(any)",
    GetFullName="(PathfindingService)=>(string)",
    GetPropertyChangedSignal="(PathfindingService,string)=>(any)",
    IsA="(PathfindingService,string)=>(boolean)",
    IsAncestorOf="(PathfindingService,any)=>(boolean)",
    IsDescendantOf="(PathfindingService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(PathfindingService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PathfindingService,string,any)=>()",
    Tags="any",
    WaitForChild="(PathfindingService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PathfindingService)=>(any)",
    className="string",
    clone="(PathfindingService)=>(any)",
    destroy="(PathfindingService)=>()",
    findFirstChild="(PathfindingService,string,boolean)=>(any)",
    getChildren="(PathfindingService)=>(any)",
    isA="(PathfindingService,string)=>(boolean)",
    isDescendantOf="(PathfindingService,any)=>(boolean)",
    remove="(PathfindingService)=>()"}


, LineForce={
    Active="boolean",
    AncestryChanged="Event",
    ApplyAtCenterOfMass="boolean",
    Archivable="boolean",
    Attachment0="any",
    Attachment1="any",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(LineForce)=>()",
    Clone="(LineForce)=>(any)",
    Color="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(LineForce)=>()",
    Enabled="boolean",
    FindFirstAncestor="(LineForce,string)=>(any)",
    FindFirstAncestorOfClass="(LineForce,string)=>(any)",
    FindFirstAncestorWhichIsA="(LineForce,string)=>(any)",
    FindFirstChild="(LineForce,string,boolean)=>(any)",
    FindFirstChildOfClass="(LineForce,string)=>(any)",
    FindFirstChildWhichIsA="(LineForce,string,boolean)=>(any)",
    GetAttribute="(LineForce,string)=>(any)",
    GetAttributeChangedSignal="(LineForce,string)=>(any)",
    GetAttributes="(LineForce)=>(any)",
    GetChildren="(LineForce)=>(any)",
    GetDebugId="(LineForce,number)=>(string)",
    GetDescendants="(LineForce)=>(any)",
    GetFullName="(LineForce)=>(string)",
    GetPropertyChangedSignal="(LineForce,string)=>(any)",
    InverseSquareLaw="boolean",
    IsA="(LineForce,string)=>(boolean)",
    IsAncestorOf="(LineForce,any)=>(boolean)",
    IsDescendantOf="(LineForce,any)=>(boolean)",
    Magnitude="number",
    MaxForce="number",
    Name="string",
    Parent="any",
    ReactionForceEnabled="boolean",
    Remove="(LineForce)=>()",
    RobloxLocked="boolean",
    SetAttribute="(LineForce,string,any)=>()",
    Tags="any",
    Visible="boolean",
    WaitForChild="(LineForce,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(LineForce)=>(any)",
    className="string",
    clone="(LineForce)=>(any)",
    destroy="(LineForce)=>()",
    findFirstChild="(LineForce,string,boolean)=>(any)",
    getChildren="(LineForce)=>(any)",
    isA="(LineForce,string)=>(boolean)",
    isDescendantOf="(LineForce,any)=>(boolean)",
    remove="(LineForce)=>()"}


, Instance={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Instance)=>()",
    Clone="(Instance)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Instance)=>()",
    FindFirstAncestor="(Instance,string)=>(any)",
    FindFirstAncestorOfClass="(Instance,string)=>(any)",
    FindFirstAncestorWhichIsA="(Instance,string)=>(any)",
    FindFirstChild="(Instance,string,boolean)=>(any)",
    FindFirstChildOfClass="(Instance,string)=>(any)",
    FindFirstChildWhichIsA="(Instance,string,boolean)=>(any)",
    GetAttribute="(Instance,string)=>(any)",
    GetAttributeChangedSignal="(Instance,string)=>(any)",
    GetAttributes="(Instance)=>(any)",
    GetChildren="(Instance)=>(any)",
    GetDebugId="(Instance,number)=>(string)",
    GetDescendants="(Instance)=>(any)",
    GetFullName="(Instance)=>(string)",
    GetPropertyChangedSignal="(Instance,string)=>(any)",
    IsA="(Instance,string)=>(boolean)",
    IsAncestorOf="(Instance,any)=>(boolean)",
    IsDescendantOf="(Instance,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Instance)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Instance,string,any)=>()",
    Tags="any",
    WaitForChild="(Instance,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Instance)=>(any)",
    className="string",
    clone="(Instance)=>(any)",
    destroy="(Instance)=>()",
    findFirstChild="(Instance,string,boolean)=>(any)",
    getChildren="(Instance)=>(any)",
    isA="(Instance,string)=>(boolean)",
    isDescendantOf="(Instance,any)=>(boolean)",
    remove="(Instance)=>()"}


, ConeHandleAdornment={
    Adornee="any",
    AlwaysOnTop="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CFrame="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ConeHandleAdornment)=>()",
    Clone="(ConeHandleAdornment)=>(any)",
    Color="any",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ConeHandleAdornment)=>()",
    FindFirstAncestor="(ConeHandleAdornment,string)=>(any)",
    FindFirstAncestorOfClass="(ConeHandleAdornment,string)=>(any)",
    FindFirstAncestorWhichIsA="(ConeHandleAdornment,string)=>(any)",
    FindFirstChild="(ConeHandleAdornment,string,boolean)=>(any)",
    FindFirstChildOfClass="(ConeHandleAdornment,string)=>(any)",
    FindFirstChildWhichIsA="(ConeHandleAdornment,string,boolean)=>(any)",
    GetAttribute="(ConeHandleAdornment,string)=>(any)",
    GetAttributeChangedSignal="(ConeHandleAdornment,string)=>(any)",
    GetAttributes="(ConeHandleAdornment)=>(any)",
    GetChildren="(ConeHandleAdornment)=>(any)",
    GetDebugId="(ConeHandleAdornment,number)=>(string)",
    GetDescendants="(ConeHandleAdornment)=>(any)",
    GetFullName="(ConeHandleAdornment)=>(string)",
    GetPropertyChangedSignal="(ConeHandleAdornment,string)=>(any)",
    Height="number",
    IsA="(ConeHandleAdornment,string)=>(boolean)",
    IsAncestorOf="(ConeHandleAdornment,any)=>(boolean)",
    IsDescendantOf="(ConeHandleAdornment,any)=>(boolean)",
    MouseButton1Down="Event",
    MouseButton1Up="Event",
    MouseEnter="Event",
    MouseLeave="Event",
    Name="string",
    Parent="any",
    Radius="number",
    Remove="(ConeHandleAdornment)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ConeHandleAdornment,string,any)=>()",
    SizeRelativeOffset="Vector3",
    Tags="any",
    Transparency="number",
    Visible="boolean",
    WaitForChild="(ConeHandleAdornment,string,number)=>(any)",
    ZIndex="number",
    archivable="boolean",
    childAdded="Event",
    children="(ConeHandleAdornment)=>(any)",
    className="string",
    clone="(ConeHandleAdornment)=>(any)",
    destroy="(ConeHandleAdornment)=>()",
    findFirstChild="(ConeHandleAdornment,string,boolean)=>(any)",
    getChildren="(ConeHandleAdornment)=>(any)",
    isA="(ConeHandleAdornment,string)=>(boolean)",
    isDescendantOf="(ConeHandleAdornment,any)=>(boolean)",
    remove="(ConeHandleAdornment)=>()"}


, PlatformService={
    ClassName="any"}


, Configuration={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Configuration)=>()",
    Clone="(Configuration)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Configuration)=>()",
    FindFirstAncestor="(Configuration,string)=>(any)",
    FindFirstAncestorOfClass="(Configuration,string)=>(any)",
    FindFirstAncestorWhichIsA="(Configuration,string)=>(any)",
    FindFirstChild="(Configuration,string,boolean)=>(any)",
    FindFirstChildOfClass="(Configuration,string)=>(any)",
    FindFirstChildWhichIsA="(Configuration,string,boolean)=>(any)",
    GetAttribute="(Configuration,string)=>(any)",
    GetAttributeChangedSignal="(Configuration,string)=>(any)",
    GetAttributes="(Configuration)=>(any)",
    GetChildren="(Configuration)=>(any)",
    GetDebugId="(Configuration,number)=>(string)",
    GetDescendants="(Configuration)=>(any)",
    GetFullName="(Configuration)=>(string)",
    GetPropertyChangedSignal="(Configuration,string)=>(any)",
    IsA="(Configuration,string)=>(boolean)",
    IsAncestorOf="(Configuration,any)=>(boolean)",
    IsDescendantOf="(Configuration,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Configuration)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Configuration,string,any)=>()",
    Tags="any",
    WaitForChild="(Configuration,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Configuration)=>(any)",
    className="string",
    clone="(Configuration)=>(any)",
    destroy="(Configuration)=>()",
    findFirstChild="(Configuration,string,boolean)=>(any)",
    getChildren="(Configuration)=>(any)",
    isA="(Configuration,string)=>(boolean)",
    isDescendantOf="(Configuration,any)=>(boolean)",
    remove="(Configuration)=>()"}


, Constraint={
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    Attachment0="any",
    Attachment1="any",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Constraint)=>()",
    Clone="(Constraint)=>(any)",
    Color="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Constraint)=>()",
    Enabled="boolean",
    FindFirstAncestor="(Constraint,string)=>(any)",
    FindFirstAncestorOfClass="(Constraint,string)=>(any)",
    FindFirstAncestorWhichIsA="(Constraint,string)=>(any)",
    FindFirstChild="(Constraint,string,boolean)=>(any)",
    FindFirstChildOfClass="(Constraint,string)=>(any)",
    FindFirstChildWhichIsA="(Constraint,string,boolean)=>(any)",
    GetAttribute="(Constraint,string)=>(any)",
    GetAttributeChangedSignal="(Constraint,string)=>(any)",
    GetAttributes="(Constraint)=>(any)",
    GetChildren="(Constraint)=>(any)",
    GetDebugId="(Constraint,number)=>(string)",
    GetDescendants="(Constraint)=>(any)",
    GetFullName="(Constraint)=>(string)",
    GetPropertyChangedSignal="(Constraint,string)=>(any)",
    IsA="(Constraint,string)=>(boolean)",
    IsAncestorOf="(Constraint,any)=>(boolean)",
    IsDescendantOf="(Constraint,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Constraint)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Constraint,string,any)=>()",
    Tags="any",
    Visible="boolean",
    WaitForChild="(Constraint,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Constraint)=>(any)",
    className="string",
    clone="(Constraint)=>(any)",
    destroy="(Constraint)=>()",
    findFirstChild="(Constraint,string,boolean)=>(any)",
    getChildren="(Constraint)=>(any)",
    isA="(Constraint,string)=>(boolean)",
    isDescendantOf="(Constraint,any)=>(boolean)",
    remove="(Constraint)=>()"}


, Pages={
    AdvanceToNextPageAsync="(Pages)=>()",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Pages)=>()",
    Clone="(Pages)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Pages)=>()",
    FindFirstAncestor="(Pages,string)=>(any)",
    FindFirstAncestorOfClass="(Pages,string)=>(any)",
    FindFirstAncestorWhichIsA="(Pages,string)=>(any)",
    FindFirstChild="(Pages,string,boolean)=>(any)",
    FindFirstChildOfClass="(Pages,string)=>(any)",
    FindFirstChildWhichIsA="(Pages,string,boolean)=>(any)",
    GetAttribute="(Pages,string)=>(any)",
    GetAttributeChangedSignal="(Pages,string)=>(any)",
    GetAttributes="(Pages)=>(any)",
    GetChildren="(Pages)=>(any)",
    GetCurrentPage="(Pages)=>(any)",
    GetDebugId="(Pages,number)=>(string)",
    GetDescendants="(Pages)=>(any)",
    GetFullName="(Pages)=>(string)",
    GetPropertyChangedSignal="(Pages,string)=>(any)",
    IsA="(Pages,string)=>(boolean)",
    IsAncestorOf="(Pages,any)=>(boolean)",
    IsDescendantOf="(Pages,any)=>(boolean)",
    IsFinished="boolean",
    Name="string",
    Parent="any",
    Remove="(Pages)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Pages,string,any)=>()",
    Tags="any",
    WaitForChild="(Pages,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Pages)=>(any)",
    className="string",
    clone="(Pages)=>(any)",
    destroy="(Pages)=>()",
    findFirstChild="(Pages,string,boolean)=>(any)",
    getChildren="(Pages)=>(any)",
    isA="(Pages,string)=>(boolean)",
    isDescendantOf="(Pages,any)=>(boolean)",
    remove="(Pages)=>()"}


, GroupService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(GroupService)=>()",
    Clone="(GroupService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(GroupService)=>()",
    FindFirstAncestor="(GroupService,string)=>(any)",
    FindFirstAncestorOfClass="(GroupService,string)=>(any)",
    FindFirstAncestorWhichIsA="(GroupService,string)=>(any)",
    FindFirstChild="(GroupService,string,boolean)=>(any)",
    FindFirstChildOfClass="(GroupService,string)=>(any)",
    FindFirstChildWhichIsA="(GroupService,string,boolean)=>(any)",
    GetAlliesAsync="(GroupService,number)=>(any)",
    GetAttribute="(GroupService,string)=>(any)",
    GetAttributeChangedSignal="(GroupService,string)=>(any)",
    GetAttributes="(GroupService)=>(any)",
    GetChildren="(GroupService)=>(any)",
    GetDebugId="(GroupService,number)=>(string)",
    GetDescendants="(GroupService)=>(any)",
    GetEnemiesAsync="(GroupService,number)=>(any)",
    GetFullName="(GroupService)=>(string)",
    GetGroupInfoAsync="(GroupService,number)=>(any)",
    GetGroupsAsync="(GroupService,number)=>(any)",
    GetPropertyChangedSignal="(GroupService,string)=>(any)",
    IsA="(GroupService,string)=>(boolean)",
    IsAncestorOf="(GroupService,any)=>(boolean)",
    IsDescendantOf="(GroupService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(GroupService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(GroupService,string,any)=>()",
    Tags="any",
    WaitForChild="(GroupService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(GroupService)=>(any)",
    className="string",
    clone="(GroupService)=>(any)",
    destroy="(GroupService)=>()",
    findFirstChild="(GroupService,string,boolean)=>(any)",
    getChildren="(GroupService)=>(any)",
    isA="(GroupService,string)=>(boolean)",
    isDescendantOf="(GroupService,any)=>(boolean)",
    remove="(GroupService)=>()"}


, ContentProvider={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BaseUrl="string",
    CalculateNumTrianglesInMesh="(ContentProvider,string)=>(number)",
    CalculateNumTrianglesInMeshSync="(ContentProvider,string)=>(number)",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ContentProvider)=>()",
    Clone="(ContentProvider)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ContentProvider)=>()",
    FindFirstAncestor="(ContentProvider,string)=>(any)",
    FindFirstAncestorOfClass="(ContentProvider,string)=>(any)",
    FindFirstAncestorWhichIsA="(ContentProvider,string)=>(any)",
    FindFirstChild="(ContentProvider,string,boolean)=>(any)",
    FindFirstChildOfClass="(ContentProvider,string)=>(any)",
    FindFirstChildWhichIsA="(ContentProvider,string,boolean)=>(any)",
    GetAttribute="(ContentProvider,string)=>(any)",
    GetAttributeChangedSignal="(ContentProvider,string)=>(any)",
    GetAttributes="(ContentProvider)=>(any)",
    GetChildren="(ContentProvider)=>(any)",
    GetDebugId="(ContentProvider,number)=>(string)",
    GetDescendants="(ContentProvider)=>(any)",
    GetFailedRequests="(ContentProvider)=>(any)",
    GetFullName="(ContentProvider)=>(string)",
    GetPropertyChangedSignal="(ContentProvider,string)=>(any)",
    IsA="(ContentProvider,string)=>(boolean)",
    IsAncestorOf="(ContentProvider,any)=>(boolean)",
    IsDescendantOf="(ContentProvider,any)=>(boolean)",
    Name="string",
    Parent="any",
    Preload="(ContentProvider,any)=>()",
    PreloadAsync="(ContentProvider,any,any)=>()",
    Remove="(ContentProvider)=>()",
    RequestQueueSize="number",
    RobloxLocked="boolean",
    SetAttribute="(ContentProvider,string,any)=>()",
    SetBaseUrl="(ContentProvider,string)=>()",
    Tags="any",
    WaitForChild="(ContentProvider,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ContentProvider)=>(any)",
    className="string",
    clone="(ContentProvider)=>(any)",
    destroy="(ContentProvider)=>()",
    findFirstChild="(ContentProvider,string,boolean)=>(any)",
    getChildren="(ContentProvider)=>(any)",
    isA="(ContentProvider,string)=>(boolean)",
    isDescendantOf="(ContentProvider,any)=>(boolean)",
    remove="(ContentProvider)=>()"}


, ContextActionService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BindAction="(ContextActionService,string,any,boolean,any)=>()",
    BindActionAtPriority="(ContextActionService,string,any,boolean,number,any)=>()",
    BindActionToInput,s="(ContextActionService,string,any,boolean,any)=>()",
    BindActivate="(ContextActionService,any,any)=>()",
    BindCoreAction="(ContextActionService,string,any,boolean,any)=>()",
    BindCoreActionAtPriority="(ContextActionService,string,any,boolean,number,any)=>()",
    BoundActionAdded="Event",
    BoundActionChanged="Event",
    BoundActionRemoved="Event",
    CallFunction="(ContextActionService,string,any,any)=>(any)",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ContextActionService)=>()",
    Clone="(ContextActionService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ContextActionService)=>()",
    FindFirstAncestor="(ContextActionService,string)=>(any)",
    FindFirstAncestorOfClass="(ContextActionService,string)=>(any)",
    FindFirstAncestorWhichIsA="(ContextActionService,string)=>(any)",
    FindFirstChild="(ContextActionService,string,boolean)=>(any)",
    FindFirstChildOfClass="(ContextActionService,string)=>(any)",
    FindFirstChildWhichIsA="(ContextActionService,string,boolean)=>(any)",
    FireActionButtonFoundSignal="(ContextActionService,string,any)=>()",
    GetActionButtonEvent="Event",
    GetAllBoundActionInfo="(ContextActionService)=>(any)",
    GetAllBoundCoreActionInfo="(ContextActionService)=>(any)",
    GetAttribute="(ContextActionService,string)=>(any)",
    GetAttributeChangedSignal="(ContextActionService,string)=>(any)",
    GetAttributes="(ContextActionService)=>(any)",
    GetBoundActionInfo="(ContextActionService,string)=>(any)",
    GetBoundCoreActionInfo="(ContextActionService,string)=>(any)",
    GetButton="(ContextActionService,string)=>(any)",
    GetChildren="(ContextActionService)=>(any)",
    GetCurrentLocalToolIcon="(ContextActionService)=>(string)",
    GetDebugId="(ContextActionService,number)=>(string)",
    GetDescendants="(ContextActionService)=>(any)",
    GetFullName="(ContextActionService)=>(string)",
    GetPropertyChangedSignal="(ContextActionService,string)=>(any)",
    IsA="(ContextActionService,string)=>(boolean)",
    IsAncestorOf="(ContextActionService,any)=>(boolean)",
    IsDescendantOf="(ContextActionService,any)=>(boolean)",
    LocalToolEquipped="Event",
    LocalToolUnequipped="Event",
    Name="string",
    Parent="any",
    Remove="(ContextActionService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ContextActionService,string,any)=>()",
    SetDescription="(ContextActionService,string,string)=>()",
    SetImage="(ContextActionService,string,string)=>()",
    SetPosition="(ContextActionService,string,UDim2)=>()",
    SetTitle="(ContextActionService,string,string)=>()",
    Tags="any",
    UnbindAction="(ContextActionService,string)=>()",
    UnbindActivate="(ContextActionService,any,any)=>()",
    UnbindAllActions="(ContextActionService)=>()",
    UnbindCoreAction="(ContextActionService,string)=>()",
    WaitForChild="(ContextActionService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ContextActionService)=>(any)",
    className="string",
    clone="(ContextActionService)=>(any)",
    destroy="(ContextActionService)=>()",
    findFirstChild="(ContextActionService,string,boolean)=>(any)",
    getChildren="(ContextActionService)=>(any)",
    isA="(ContextActionService,string)=>(boolean)",
    isDescendantOf="(ContextActionService,any)=>(boolean)",
    remove="(ContextActionService)=>()"}


, Weld={
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    C0="CFrame",
    C1="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Weld)=>()",
    Clone="(Weld)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Weld)=>()",
    Enabled="boolean",
    FindFirstAncestor="(Weld,string)=>(any)",
    FindFirstAncestorOfClass="(Weld,string)=>(any)",
    FindFirstAncestorWhichIsA="(Weld,string)=>(any)",
    FindFirstChild="(Weld,string,boolean)=>(any)",
    FindFirstChildOfClass="(Weld,string)=>(any)",
    FindFirstChildWhichIsA="(Weld,string,boolean)=>(any)",
    GetAttribute="(Weld,string)=>(any)",
    GetAttributeChangedSignal="(Weld,string)=>(any)",
    GetAttributes="(Weld)=>(any)",
    GetChildren="(Weld)=>(any)",
    GetDebugId="(Weld,number)=>(string)",
    GetDescendants="(Weld)=>(any)",
    GetFullName="(Weld)=>(string)",
    GetPropertyChangedSignal="(Weld,string)=>(any)",
    IsA="(Weld,string)=>(boolean)",
    IsAncestorOf="(Weld,any)=>(boolean)",
    IsAutoJoint="boolean",
    IsDescendantOf="(Weld,any)=>(boolean)",
    Name="string",
    Parent="any",
    Part0="any",
    Part1="any",
    Remove="(Weld)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Weld,string,any)=>()",
    Tags="any",
    WaitForChild="(Weld,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Weld)=>(any)",
    className="string",
    clone="(Weld)=>(any)",
    destroy="(Weld)=>()",
    findFirstChild="(Weld,string,boolean)=>(any)",
    getChildren="(Weld)=>(any)",
    isA="(Weld,string)=>(boolean)",
    isDescendantOf="(Weld,any)=>(boolean)",
    part1="any",
    remove="(Weld)=>()"}


, Controller={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BindButton="(Controller,any,string)=>()",
    ButtonChanged="Event",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Controller)=>()",
    Clone="(Controller)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Controller)=>()",
    FindFirstAncestor="(Controller,string)=>(any)",
    FindFirstAncestorOfClass="(Controller,string)=>(any)",
    FindFirstAncestorWhichIsA="(Controller,string)=>(any)",
    FindFirstChild="(Controller,string,boolean)=>(any)",
    FindFirstChildOfClass="(Controller,string)=>(any)",
    FindFirstChildWhichIsA="(Controller,string,boolean)=>(any)",
    GetAttribute="(Controller,string)=>(any)",
    GetAttributeChangedSignal="(Controller,string)=>(any)",
    GetAttributes="(Controller)=>(any)",
    GetButton="(Controller,any)=>(boolean)",
    GetChildren="(Controller)=>(any)",
    GetDebugId="(Controller,number)=>(string)",
    GetDescendants="(Controller)=>(any)",
    GetFullName="(Controller)=>(string)",
    GetPropertyChangedSignal="(Controller,string)=>(any)",
    IsA="(Controller,string)=>(boolean)",
    IsAncestorOf="(Controller,any)=>(boolean)",
    IsDescendantOf="(Controller,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Controller)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Controller,string,any)=>()",
    Tags="any",
    UnbindButton="(Controller,any)=>()",
    WaitForChild="(Controller,string,number)=>(any)",
    archivable="boolean",
    bindButton="(Controller,any,string)=>()",
    childAdded="Event",
    children="(Controller)=>(any)",
    className="string",
    clone="(Controller)=>(any)",
    destroy="(Controller)=>()",
    findFirstChild="(Controller,string,boolean)=>(any)",
    getButton="(Controller,any)=>(boolean)",
    getChildren="(Controller)=>(any)",
    isA="(Controller,string)=>(boolean)",
    isDescendantOf="(Controller,any)=>(boolean)",
    remove="(Controller)=>()"}


, ControllerService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ControllerService)=>()",
    Clone="(ControllerService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ControllerService)=>()",
    FindFirstAncestor="(ControllerService,string)=>(any)",
    FindFirstAncestorOfClass="(ControllerService,string)=>(any)",
    FindFirstAncestorWhichIsA="(ControllerService,string)=>(any)",
    FindFirstChild="(ControllerService,string,boolean)=>(any)",
    FindFirstChildOfClass="(ControllerService,string)=>(any)",
    FindFirstChildWhichIsA="(ControllerService,string,boolean)=>(any)",
    GetAttribute="(ControllerService,string)=>(any)",
    GetAttributeChangedSignal="(ControllerService,string)=>(any)",
    GetAttributes="(ControllerService)=>(any)",
    GetChildren="(ControllerService)=>(any)",
    GetDebugId="(ControllerService,number)=>(string)",
    GetDescendants="(ControllerService)=>(any)",
    GetFullName="(ControllerService)=>(string)",
    GetPropertyChangedSignal="(ControllerService,string)=>(any)",
    IsA="(ControllerService,string)=>(boolean)",
    IsAncestorOf="(ControllerService,any)=>(boolean)",
    IsDescendantOf="(ControllerService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(ControllerService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ControllerService,string,any)=>()",
    Tags="any",
    WaitForChild="(ControllerService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ControllerService)=>(any)",
    className="string",
    clone="(ControllerService)=>(any)",
    destroy="(ControllerService)=>()",
    findFirstChild="(ControllerService,string,boolean)=>(any)",
    getChildren="(ControllerService)=>(any)",
    isA="(ControllerService,string)=>(boolean)",
    isDescendantOf="(ControllerService,any)=>(boolean)",
    remove="(ControllerService)=>()"}


, MouseService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(MouseService)=>()",
    Clone="(MouseService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(MouseService)=>()",
    FindFirstAncestor="(MouseService,string)=>(any)",
    FindFirstAncestorOfClass="(MouseService,string)=>(any)",
    FindFirstAncestorWhichIsA="(MouseService,string)=>(any)",
    FindFirstChild="(MouseService,string,boolean)=>(any)",
    FindFirstChildOfClass="(MouseService,string)=>(any)",
    FindFirstChildWhichIsA="(MouseService,string,boolean)=>(any)",
    GetAttribute="(MouseService,string)=>(any)",
    GetAttributeChangedSignal="(MouseService,string)=>(any)",
    GetAttributes="(MouseService)=>(any)",
    GetChildren="(MouseService)=>(any)",
    GetDebugId="(MouseService,number)=>(string)",
    GetDescendants="(MouseService)=>(any)",
    GetFullName="(MouseService)=>(string)",
    GetPropertyChangedSignal="(MouseService,string)=>(any)",
    IsA="(MouseService,string)=>(boolean)",
    IsAncestorOf="(MouseService,any)=>(boolean)",
    IsDescendantOf="(MouseService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(MouseService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(MouseService,string,any)=>()",
    Tags="any",
    WaitForChild="(MouseService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(MouseService)=>(any)",
    className="string",
    clone="(MouseService)=>(any)",
    destroy="(MouseService)=>()",
    findFirstChild="(MouseService,string,boolean)=>(any)",
    getChildren="(MouseService)=>(any)",
    isA="(MouseService,string)=>(boolean)",
    isDescendantOf="(MouseService,any)=>(boolean)",
    remove="(MouseService)=>()"}


, CookiesService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(CookiesService)=>()",
    Clone="(CookiesService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(CookiesService)=>()",
    FindFirstAncestor="(CookiesService,string)=>(any)",
    FindFirstAncestorOfClass="(CookiesService,string)=>(any)",
    FindFirstAncestorWhichIsA="(CookiesService,string)=>(any)",
    FindFirstChild="(CookiesService,string,boolean)=>(any)",
    FindFirstChildOfClass="(CookiesService,string)=>(any)",
    FindFirstChildWhichIsA="(CookiesService,string,boolean)=>(any)",
    GetAttribute="(CookiesService,string)=>(any)",
    GetAttributeChangedSignal="(CookiesService,string)=>(any)",
    GetAttributes="(CookiesService)=>(any)",
    GetChildren="(CookiesService)=>(any)",
    GetDebugId="(CookiesService,number)=>(string)",
    GetDescendants="(CookiesService)=>(any)",
    GetFullName="(CookiesService)=>(string)",
    GetPropertyChangedSignal="(CookiesService,string)=>(any)",
    IsA="(CookiesService,string)=>(boolean)",
    IsAncestorOf="(CookiesService,any)=>(boolean)",
    IsDescendantOf="(CookiesService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(CookiesService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(CookiesService,string,any)=>()",
    Tags="any",
    WaitForChild="(CookiesService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(CookiesService)=>(any)",
    className="string",
    clone="(CookiesService)=>(any)",
    destroy="(CookiesService)=>()",
    findFirstChild="(CookiesService,string,boolean)=>(any)",
    getChildren="(CookiesService)=>(any)",
    isA="(CookiesService,string)=>(boolean)",
    isDescendantOf="(CookiesService,any)=>(boolean)",
    remove="(CookiesService)=>()"}


, CoreGui={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(CoreGui)=>()",
    Clone="(CoreGui)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(CoreGui)=>()",
    FindFirstAncestor="(CoreGui,string)=>(any)",
    FindFirstAncestorOfClass="(CoreGui,string)=>(any)",
    FindFirstAncestorWhichIsA="(CoreGui,string)=>(any)",
    FindFirstChild="(CoreGui,string,boolean)=>(any)",
    FindFirstChildOfClass="(CoreGui,string)=>(any)",
    FindFirstChildWhichIsA="(CoreGui,string,boolean)=>(any)",
    GetAttribute="(CoreGui,string)=>(any)",
    GetAttributeChangedSignal="(CoreGui,string)=>(any)",
    GetAttributes="(CoreGui)=>(any)",
    GetChildren="(CoreGui)=>(any)",
    GetDebugId="(CoreGui,number)=>(string)",
    GetDescendants="(CoreGui)=>(any)",
    GetFullName="(CoreGui)=>(string)",
    GetGuiObjectsAtPosition="(CoreGui,number,number)=>(any)",
    GetPropertyChangedSignal="(CoreGui,string)=>(any)",
    IsA="(CoreGui,string)=>(boolean)",
    IsAncestorOf="(CoreGui,any)=>(boolean)",
    IsDescendantOf="(CoreGui,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(CoreGui)=>()",
    RobloxLocked="boolean",
    SelectionImageObject="any",
    SetAttribute="(CoreGui,string,any)=>()",
    SetUserGuiRendering="(CoreGui,boolean,any,any)=>()",
    Tags="any",
    TakeScreenshot="(CoreGui)=>()",
    ToggleRecording="(CoreGui)=>()",
    Version="number",
    WaitForChild="(CoreGui,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(CoreGui)=>(any)",
    className="string",
    clone="(CoreGui)=>(any)",
    destroy="(CoreGui)=>()",
    findFirstChild="(CoreGui,string,boolean)=>(any)",
    getChildren="(CoreGui)=>(any)",
    isA="(CoreGui,string)=>(boolean)",
    isDescendantOf="(CoreGui,any)=>(boolean)",
    remove="(CoreGui)=>()"}


, CorePackages={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(CorePackages)=>()",
    Clone="(CorePackages)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(CorePackages)=>()",
    FindFirstAncestor="(CorePackages,string)=>(any)",
    FindFirstAncestorOfClass="(CorePackages,string)=>(any)",
    FindFirstAncestorWhichIsA="(CorePackages,string)=>(any)",
    FindFirstChild="(CorePackages,string,boolean)=>(any)",
    FindFirstChildOfClass="(CorePackages,string)=>(any)",
    FindFirstChildWhichIsA="(CorePackages,string,boolean)=>(any)",
    GetAttribute="(CorePackages,string)=>(any)",
    GetAttributeChangedSignal="(CorePackages,string)=>(any)",
    GetAttributes="(CorePackages)=>(any)",
    GetChildren="(CorePackages)=>(any)",
    GetDebugId="(CorePackages,number)=>(string)",
    GetDescendants="(CorePackages)=>(any)",
    GetFullName="(CorePackages)=>(string)",
    GetPropertyChangedSignal="(CorePackages,string)=>(any)",
    IsA="(CorePackages,string)=>(boolean)",
    IsAncestorOf="(CorePackages,any)=>(boolean)",
    IsDescendantOf="(CorePackages,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(CorePackages)=>()",
    RobloxLocked="boolean",
    SetAttribute="(CorePackages,string,any)=>()",
    Tags="any",
    WaitForChild="(CorePackages,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(CorePackages)=>(any)",
    className="string",
    clone="(CorePackages)=>(any)",
    destroy="(CorePackages)=>()",
    findFirstChild="(CorePackages,string,boolean)=>(any)",
    getChildren="(CorePackages)=>(any)",
    isA="(CorePackages,string)=>(boolean)",
    isDescendantOf="(CorePackages,any)=>(boolean)",
    remove="(CorePackages)=>()"}


, CoreScript={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CachedRemoteSource="any",
    CachedRemoteSourceLoadState="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(CoreScript)=>()",
    Clone="(CoreScript)=>(any)",
    CurrentEditor="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(CoreScript)=>()",
    Disabled="boolean",
    FindFirstAncestor="(CoreScript,string)=>(any)",
    FindFirstAncestorOfClass="(CoreScript,string)=>(any)",
    FindFirstAncestorWhichIsA="(CoreScript,string)=>(any)",
    FindFirstChild="(CoreScript,string,boolean)=>(any)",
    FindFirstChildOfClass="(CoreScript,string)=>(any)",
    FindFirstChildWhichIsA="(CoreScript,string,boolean)=>(any)",
    GetAttribute="(CoreScript,string)=>(any)",
    GetAttributeChangedSignal="(CoreScript,string)=>(any)",
    GetAttributes="(CoreScript)=>(any)",
    GetChildren="(CoreScript)=>(any)",
    GetDebugId="(CoreScript,number)=>(string)",
    GetDescendants="(CoreScript)=>(any)",
    GetFullName="(CoreScript)=>(string)",
    GetPropertyChangedSignal="(CoreScript,string)=>(any)",
    HasAssociatedDrafts="boolean",
    IsA="(CoreScript,string)=>(boolean)",
    IsAncestorOf="(CoreScript,any)=>(boolean)",
    IsDescendantOf="(CoreScript,any)=>(boolean)",
    LinkedSource="any",
    LockGrantedOrNot="Event",
    LostLock="Event",
    Name="string",
    Parent="any",
    Remove="(CoreScript)=>()",
    RequestLock="Event",
    RequestScriptHash="Event",
    RobloxLocked="boolean",
    SandboxedSource="any",
    ScriptGuid="string",
    SetAttribute="(CoreScript,string,any)=>()",
    Tags="any",
    VerifyScriptHash="Event",
    WaitForChild="(CoreScript,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(CoreScript)=>(any)",
    className="string",
    clone="(CoreScript)=>(any)",
    destroy="(CoreScript)=>()",
    findFirstChild="(CoreScript,string,boolean)=>(any)",
    getChildren="(CoreScript)=>(any)",
    isA="(CoreScript,string)=>(boolean)",
    isDescendantOf="(CoreScript,any)=>(boolean)",
    remove="(CoreScript)=>()"}


, TimerService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(TimerService)=>()",
    Clone="(TimerService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(TimerService)=>()",
    FindFirstAncestor="(TimerService,string)=>(any)",
    FindFirstAncestorOfClass="(TimerService,string)=>(any)",
    FindFirstAncestorWhichIsA="(TimerService,string)=>(any)",
    FindFirstChild="(TimerService,string,boolean)=>(any)",
    FindFirstChildOfClass="(TimerService,string)=>(any)",
    FindFirstChildWhichIsA="(TimerService,string,boolean)=>(any)",
    GetAttribute="(TimerService,string)=>(any)",
    GetAttributeChangedSignal="(TimerService,string)=>(any)",
    GetAttributes="(TimerService)=>(any)",
    GetChildren="(TimerService)=>(any)",
    GetDebugId="(TimerService,number)=>(string)",
    GetDescendants="(TimerService)=>(any)",
    GetFullName="(TimerService)=>(string)",
    GetPropertyChangedSignal="(TimerService,string)=>(any)",
    IsA="(TimerService,string)=>(boolean)",
    IsAncestorOf="(TimerService,any)=>(boolean)",
    IsDescendantOf="(TimerService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(TimerService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(TimerService,string,any)=>()",
    Tags="any",
    WaitForChild="(TimerService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(TimerService)=>(any)",
    className="string",
    clone="(TimerService)=>(any)",
    destroy="(TimerService)=>()",
    findFirstChild="(TimerService,string,boolean)=>(any)",
    getChildren="(TimerService)=>(any)",
    isA="(TimerService,string)=>(boolean)",
    isDescendantOf="(TimerService,any)=>(boolean)",
    remove="(TimerService)=>()"}


, PhysicsService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PhysicsService)=>()",
    Clone="(PhysicsService)=>(any)",
    CollisionGroupContainsPart="(PhysicsService,string,any)=>(boolean)",
    CollisionGroupSetCollidable="(PhysicsService,string,string,boolean)=>()",
    CollisionGroupsAreCollidable="(PhysicsService,string,string)=>(boolean)",
    CreateCollisionGroup="(PhysicsService,string)=>(number)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PhysicsService)=>()",
    FindFirstAncestor="(PhysicsService,string)=>(any)",
    FindFirstAncestorOfClass="(PhysicsService,string)=>(any)",
    FindFirstAncestorWhichIsA="(PhysicsService,string)=>(any)",
    FindFirstChild="(PhysicsService,string,boolean)=>(any)",
    FindFirstChildOfClass="(PhysicsService,string)=>(any)",
    FindFirstChildWhichIsA="(PhysicsService,string,boolean)=>(any)",
    GetAttribute="(PhysicsService,string)=>(any)",
    GetAttributeChangedSignal="(PhysicsService,string)=>(any)",
    GetAttributes="(PhysicsService)=>(any)",
    GetChildren="(PhysicsService)=>(any)",
    GetCollisionGroupId="(PhysicsService,string)=>(number)",
    GetCollisionGroupName="(PhysicsService,number)=>(string)",
    GetCollisionGroups="(PhysicsService)=>(any)",
    GetDebugId="(PhysicsService,number)=>(string)",
    GetDescendants="(PhysicsService)=>(any)",
    GetFullName="(PhysicsService)=>(string)",
    GetMaxCollisionGroups="(PhysicsService)=>(number)",
    GetPropertyChangedSignal="(PhysicsService,string)=>(any)",
    IkSolve="(PhysicsService,any,CFrame,number,number)=>()",
    IsA="(PhysicsService,string)=>(boolean)",
    IsAncestorOf="(PhysicsService,any)=>(boolean)",
    IsDescendantOf="(PhysicsService,any)=>(boolean)",
    LocalIkSolve="(PhysicsService,any,CFrame,number,number)=>()",
    Name="string",
    Parent="any",
    Remove="(PhysicsService)=>()",
    RemoveCollisionGroup="(PhysicsService,string)=>()",
    RenameCollisionGroup="(PhysicsService,string,string)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PhysicsService,string,any)=>()",
    SetPartCollisionGroup="(PhysicsService,any,string)=>()",
    Tags="any",
    WaitForChild="(PhysicsService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PhysicsService)=>(any)",
    className="string",
    clone="(PhysicsService)=>(any)",
    destroy="(PhysicsService)=>()",
    findFirstChild="(PhysicsService,string,boolean)=>(any)",
    getChildren="(PhysicsService)=>(any)",
    isA="(PhysicsService,string)=>(boolean)",
    isDescendantOf="(PhysicsService,any)=>(boolean)",
    remove="(PhysicsService)=>()"}


, CoreScriptSyncService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(CoreScriptSyncService)=>()",
    Clone="(CoreScriptSyncService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(CoreScriptSyncService)=>()",
    FindFirstAncestor="(CoreScriptSyncService,string)=>(any)",
    FindFirstAncestorOfClass="(CoreScriptSyncService,string)=>(any)",
    FindFirstAncestorWhichIsA="(CoreScriptSyncService,string)=>(any)",
    FindFirstChild="(CoreScriptSyncService,string,boolean)=>(any)",
    FindFirstChildOfClass="(CoreScriptSyncService,string)=>(any)",
    FindFirstChildWhichIsA="(CoreScriptSyncService,string,boolean)=>(any)",
    GetAttribute="(CoreScriptSyncService,string)=>(any)",
    GetAttributeChangedSignal="(CoreScriptSyncService,string)=>(any)",
    GetAttributes="(CoreScriptSyncService)=>(any)",
    GetChildren="(CoreScriptSyncService)=>(any)",
    GetDebugId="(CoreScriptSyncService,number)=>(string)",
    GetDescendants="(CoreScriptSyncService)=>(any)",
    GetFullName="(CoreScriptSyncService)=>(string)",
    GetPropertyChangedSignal="(CoreScriptSyncService,string)=>(any)",
    GetScriptFilePath="(CoreScriptSyncService,any)=>(string)",
    IsA="(CoreScriptSyncService,string)=>(boolean)",
    IsAncestorOf="(CoreScriptSyncService,any)=>(boolean)",
    IsDescendantOf="(CoreScriptSyncService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(CoreScriptSyncService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(CoreScriptSyncService,string,any)=>()",
    Tags="any",
    WaitForChild="(CoreScriptSyncService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(CoreScriptSyncService)=>(any)",
    className="string",
    clone="(CoreScriptSyncService)=>(any)",
    destroy="(CoreScriptSyncService)=>()",
    findFirstChild="(CoreScriptSyncService,string,boolean)=>(any)",
    getChildren="(CoreScriptSyncService)=>(any)",
    isA="(CoreScriptSyncService,string)=>(boolean)",
    isDescendantOf="(CoreScriptSyncService,any)=>(boolean)",
    remove="(CoreScriptSyncService)=>()"}


, TaskScheduler={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(TaskScheduler)=>()",
    Clone="(TaskScheduler)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(TaskScheduler)=>()",
    FindFirstAncestor="(TaskScheduler,string)=>(any)",
    FindFirstAncestorOfClass="(TaskScheduler,string)=>(any)",
    FindFirstAncestorWhichIsA="(TaskScheduler,string)=>(any)",
    FindFirstChild="(TaskScheduler,string,boolean)=>(any)",
    FindFirstChildOfClass="(TaskScheduler,string)=>(any)",
    FindFirstChildWhichIsA="(TaskScheduler,string,boolean)=>(any)",
    GetAttribute="(TaskScheduler,string)=>(any)",
    GetAttributeChangedSignal="(TaskScheduler,string)=>(any)",
    GetAttributes="(TaskScheduler)=>(any)",
    GetChildren="(TaskScheduler)=>(any)",
    GetDebugId="(TaskScheduler,number)=>(string)",
    GetDescendants="(TaskScheduler)=>(any)",
    GetFullName="(TaskScheduler)=>(string)",
    GetPropertyChangedSignal="(TaskScheduler,string)=>(any)",
    IsA="(TaskScheduler,string)=>(boolean)",
    IsAncestorOf="(TaskScheduler,any)=>(boolean)",
    IsDescendantOf="(TaskScheduler,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(TaskScheduler)=>()",
    RobloxLocked="boolean",
    SchedulerDutyCycle="number",
    SchedulerRate="number",
    SetAttribute="(TaskScheduler,string,any)=>()",
    Tags="any",
    ThreadPoolConfig="any",
    ThreadPoolSize="number",
    WaitForChild="(TaskScheduler,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(TaskScheduler)=>(any)",
    className="string",
    clone="(TaskScheduler)=>(any)",
    destroy="(TaskScheduler)=>()",
    findFirstChild="(TaskScheduler,string,boolean)=>(any)",
    getChildren="(TaskScheduler)=>(any)",
    isA="(TaskScheduler,string)=>(boolean)",
    isDescendantOf="(TaskScheduler,any)=>(boolean)",
    remove="(TaskScheduler)=>()"}


, CornerWedgePart={
    AncestryChanged="Event",
    Anchored="boolean",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BackParamA="number",
    BackParamB="number",
    BackSurface="any",
    BackSurfaceInput="any",
    BottomParamA="number",
    BottomParamB="number",
    BottomSurface="any",
    BottomSurfaceInput="any",
    BreakJoints="(CornerWedgePart)=>()",
    BrickColor="any",
    CFrame="CFrame",
    CanCollide="boolean",
    CanCollideWith="(CornerWedgePart,any)=>(boolean)",
    CanSetNetworkOwnership="(CornerWedgePart)=>(any)",
    CastShadow="boolean",
    CenterOfMass="Vector3",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(CornerWedgePart)=>()",
    Clone="(CornerWedgePart)=>(any)",
    CollisionGroupId="number",
    Color="Color3",
    Color3uint8="any",
    CustomPhysicalProperties="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(CornerWedgePart)=>()",
    DraggingV1="boolean",
    Elasticity="number",
    FindFirstAncestor="(CornerWedgePart,string)=>(any)",
    FindFirstAncestorOfClass="(CornerWedgePart,string)=>(any)",
    FindFirstAncestorWhichIsA="(CornerWedgePart,string)=>(any)",
    FindFirstChild="(CornerWedgePart,string,boolean)=>(any)",
    FindFirstChildOfClass="(CornerWedgePart,string)=>(any)",
    FindFirstChildWhichIsA="(CornerWedgePart,string,boolean)=>(any)",
    Friction="number",
    FrontParamA="number",
    FrontParamB="number",
    FrontSurface="any",
    FrontSurfaceInput="any",
    GetAttribute="(CornerWedgePart,string)=>(any)",
    GetAttributeChangedSignal="(CornerWedgePart,string)=>(any)",
    GetAttributes="(CornerWedgePart)=>(any)",
    GetChildren="(CornerWedgePart)=>(any)",
    GetConnectedParts="(CornerWedgePart,boolean)=>(any)",
    GetDebugId="(CornerWedgePart,number)=>(string)",
    GetDescendants="(CornerWedgePart)=>(any)",
    GetFullName="(CornerWedgePart)=>(string)",
    GetJoints="(CornerWedgePart)=>(any)",
    GetMass="(CornerWedgePart)=>(number)",
    GetNetworkOwner="(CornerWedgePart)=>(any)",
    GetNetworkOwnershipAuto="(CornerWedgePart)=>(boolean)",
    GetPropertyChangedSignal="(CornerWedgePart,string)=>(any)",
    GetRenderCFrame="(CornerWedgePart)=>(CFrame)",
    GetRootPart="(CornerWedgePart)=>(any)",
    GetTouchingParts="(CornerWedgePart)=>(any)",
    IsA="(CornerWedgePart,string)=>(boolean)",
    IsAncestorOf="(CornerWedgePart,any)=>(boolean)",
    IsDescendantOf="(CornerWedgePart,any)=>(boolean)",
    IsGrounded="(CornerWedgePart)=>(boolean)",
    LeftParamA="number",
    LeftParamB="number",
    LeftSurface="any",
    LeftSurfaceInput="any",
    LocalSimulationTouched="Event",
    LocalTransparencyModifier="number",
    Locked="boolean",
    MakeJoints="(CornerWedgePart)=>()",
    Massless="boolean",
    Material="any",
    Name="string",
    NetworkIsSleeping="boolean",
    NetworkOwnerChanged="Event",
    NetworkOwnerV3="any",
    NetworkOwnershipRule="any",
    Orientation="Vector3",
    OutfitChanged="Event",
    Parent="any",
    Position="Vector3",
    ReceiveAge="number",
    Reflectance="number",
    Remove="(CornerWedgePart)=>()",
    Resize="(CornerWedgePart,any,number)=>(boolean)",
    ResizeIncrement="number",
    ResizeableFaces="any",
    RightParamA="number",
    RightParamB="number",
    RightSurface="any",
    RightSurfaceInput="any",
    RobloxLocked="boolean",
    RootPriority="number",
    RotVelocity="Vector3",
    Rotation="Vector3",
    SetAttribute="(CornerWedgePart,string,any)=>()",
    SetNetworkOwner="(CornerWedgePart,any)=>()",
    SetNetworkOwnershipAuto="(CornerWedgePart)=>()",
    Size="Vector3",
    SpecificGravity="number",
    StoppedTouching="Event",
    SubtractAsync="(CornerWedgePart,any,any,any)=>(any)",
    Tags="any",
    TopParamA="number",
    TopParamB="number",
    TopSurface="any",
    TopSurfaceInput="any",
    TouchEnded="Event",
    Touched="Event",
    Transparency="number",
    UnionAsync="(CornerWedgePart,any,any,any)=>(any)",
    Velocity="Vector3",
    WaitForChild="(CornerWedgePart,string,number)=>(any)",
    archivable="boolean",
    breakJoints="(CornerWedgePart)=>()",
    brickColor="any",
    childAdded="Event",
    children="(CornerWedgePart)=>(any)",
    className="string",
    clone="(CornerWedgePart)=>(any)",
    destroy="(CornerWedgePart)=>()",
    findFirstChild="(CornerWedgePart,string,boolean)=>(any)",
    getChildren="(CornerWedgePart)=>(any)",
    getMass="(CornerWedgePart)=>(number)",
    isA="(CornerWedgePart,string)=>(boolean)",
    isDescendantOf="(CornerWedgePart,any)=>(boolean)",
    makeJoints="(CornerWedgePart)=>()",
    remove="(CornerWedgePart)=>()",
    resize="(CornerWedgePart,any,number)=>(boolean)",
    siz="Vector3",
    size="Vector3",
    touched="Event"}


, ValueBase={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ValueBase)=>()",
    Clone="(ValueBase)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ValueBase)=>()",
    FindFirstAncestor="(ValueBase,string)=>(any)",
    FindFirstAncestorOfClass="(ValueBase,string)=>(any)",
    FindFirstAncestorWhichIsA="(ValueBase,string)=>(any)",
    FindFirstChild="(ValueBase,string,boolean)=>(any)",
    FindFirstChildOfClass="(ValueBase,string)=>(any)",
    FindFirstChildWhichIsA="(ValueBase,string,boolean)=>(any)",
    GetAttribute="(ValueBase,string)=>(any)",
    GetAttributeChangedSignal="(ValueBase,string)=>(any)",
    GetAttributes="(ValueBase)=>(any)",
    GetChildren="(ValueBase)=>(any)",
    GetDebugId="(ValueBase,number)=>(string)",
    GetDescendants="(ValueBase)=>(any)",
    GetFullName="(ValueBase)=>(string)",
    GetPropertyChangedSignal="(ValueBase,string)=>(any)",
    IsA="(ValueBase,string)=>(boolean)",
    IsAncestorOf="(ValueBase,any)=>(boolean)",
    IsDescendantOf="(ValueBase,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(ValueBase)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ValueBase,string,any)=>()",
    Tags="any",
    WaitForChild="(ValueBase,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ValueBase)=>(any)",
    className="string",
    clone="(ValueBase)=>(any)",
    destroy="(ValueBase)=>()",
    findFirstChild="(ValueBase,string,boolean)=>(any)",
    getChildren="(ValueBase)=>(any)",
    isA="(ValueBase,string)=>(boolean)",
    isDescendantOf="(ValueBase,any)=>(boolean)",
    remove="(ValueBase)=>()"}


, CustomEventReceiver={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(CustomEventReceiver)=>()",
    Clone="(CustomEventReceiver)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(CustomEventReceiver)=>()",
    EventConnected="Event",
    EventDisconnected="Event",
    FindFirstAncestor="(CustomEventReceiver,string)=>(any)",
    FindFirstAncestorOfClass="(CustomEventReceiver,string)=>(any)",
    FindFirstAncestorWhichIsA="(CustomEventReceiver,string)=>(any)",
    FindFirstChild="(CustomEventReceiver,string,boolean)=>(any)",
    FindFirstChildOfClass="(CustomEventReceiver,string)=>(any)",
    FindFirstChildWhichIsA="(CustomEventReceiver,string,boolean)=>(any)",
    GetAttribute="(CustomEventReceiver,string)=>(any)",
    GetAttributeChangedSignal="(CustomEventReceiver,string)=>(any)",
    GetAttributes="(CustomEventReceiver)=>(any)",
    GetChildren="(CustomEventReceiver)=>(any)",
    GetCurrentValue="(CustomEventReceiver)=>(number)",
    GetDebugId="(CustomEventReceiver,number)=>(string)",
    GetDescendants="(CustomEventReceiver)=>(any)",
    GetFullName="(CustomEventReceiver)=>(string)",
    GetPropertyChangedSignal="(CustomEventReceiver,string)=>(any)",
    IsA="(CustomEventReceiver,string)=>(boolean)",
    IsAncestorOf="(CustomEventReceiver,any)=>(boolean)",
    IsDescendantOf="(CustomEventReceiver,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(CustomEventReceiver)=>()",
    RobloxLocked="boolean",
    SetAttribute="(CustomEventReceiver,string,any)=>()",
    Source="any",
    SourceValueChanged="Event",
    Tags="any",
    WaitForChild="(CustomEventReceiver,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(CustomEventReceiver)=>(any)",
    className="string",
    clone="(CustomEventReceiver)=>(any)",
    destroy="(CustomEventReceiver)=>()",
    findFirstChild="(CustomEventReceiver,string,boolean)=>(any)",
    getChildren="(CustomEventReceiver)=>(any)",
    isA="(CustomEventReceiver,string)=>(boolean)",
    isDescendantOf="(CustomEventReceiver,any)=>(boolean)",
    remove="(CustomEventReceiver)=>()"}


, CylinderHandleAdornment={
    Adornee="any",
    AlwaysOnTop="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CFrame="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(CylinderHandleAdornment)=>()",
    Clone="(CylinderHandleAdornment)=>(any)",
    Color="any",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(CylinderHandleAdornment)=>()",
    FindFirstAncestor="(CylinderHandleAdornment,string)=>(any)",
    FindFirstAncestorOfClass="(CylinderHandleAdornment,string)=>(any)",
    FindFirstAncestorWhichIsA="(CylinderHandleAdornment,string)=>(any)",
    FindFirstChild="(CylinderHandleAdornment,string,boolean)=>(any)",
    FindFirstChildOfClass="(CylinderHandleAdornment,string)=>(any)",
    FindFirstChildWhichIsA="(CylinderHandleAdornment,string,boolean)=>(any)",
    GetAttribute="(CylinderHandleAdornment,string)=>(any)",
    GetAttributeChangedSignal="(CylinderHandleAdornment,string)=>(any)",
    GetAttributes="(CylinderHandleAdornment)=>(any)",
    GetChildren="(CylinderHandleAdornment)=>(any)",
    GetDebugId="(CylinderHandleAdornment,number)=>(string)",
    GetDescendants="(CylinderHandleAdornment)=>(any)",
    GetFullName="(CylinderHandleAdornment)=>(string)",
    GetPropertyChangedSignal="(CylinderHandleAdornment,string)=>(any)",
    Height="number",
    IsA="(CylinderHandleAdornment,string)=>(boolean)",
    IsAncestorOf="(CylinderHandleAdornment,any)=>(boolean)",
    IsDescendantOf="(CylinderHandleAdornment,any)=>(boolean)",
    MouseButton1Down="Event",
    MouseButton1Up="Event",
    MouseEnter="Event",
    MouseLeave="Event",
    Name="string",
    Parent="any",
    Radius="number",
    Remove="(CylinderHandleAdornment)=>()",
    RobloxLocked="boolean",
    SetAttribute="(CylinderHandleAdornment,string,any)=>()",
    SizeRelativeOffset="Vector3",
    Tags="any",
    Transparency="number",
    Visible="boolean",
    WaitForChild="(CylinderHandleAdornment,string,number)=>(any)",
    ZIndex="number",
    archivable="boolean",
    childAdded="Event",
    children="(CylinderHandleAdornment)=>(any)",
    className="string",
    clone="(CylinderHandleAdornment)=>(any)",
    destroy="(CylinderHandleAdornment)=>()",
    findFirstChild="(CylinderHandleAdornment,string,boolean)=>(any)",
    getChildren="(CylinderHandleAdornment)=>(any)",
    isA="(CylinderHandleAdornment,string)=>(boolean)",
    isDescendantOf="(CylinderHandleAdornment,any)=>(boolean)",
    remove="(CylinderHandleAdornment)=>()"}


, MotorFeature={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(MotorFeature)=>()",
    Clone="(MotorFeature)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(MotorFeature)=>()",
    FaceId="any",
    FindFirstAncestor="(MotorFeature,string)=>(any)",
    FindFirstAncestorOfClass="(MotorFeature,string)=>(any)",
    FindFirstAncestorWhichIsA="(MotorFeature,string)=>(any)",
    FindFirstChild="(MotorFeature,string,boolean)=>(any)",
    FindFirstChildOfClass="(MotorFeature,string)=>(any)",
    FindFirstChildWhichIsA="(MotorFeature,string,boolean)=>(any)",
    GetAttribute="(MotorFeature,string)=>(any)",
    GetAttributeChangedSignal="(MotorFeature,string)=>(any)",
    GetAttributes="(MotorFeature)=>(any)",
    GetChildren="(MotorFeature)=>(any)",
    GetDebugId="(MotorFeature,number)=>(string)",
    GetDescendants="(MotorFeature)=>(any)",
    GetFullName="(MotorFeature)=>(string)",
    GetPropertyChangedSignal="(MotorFeature,string)=>(any)",
    InOut="any",
    IsA="(MotorFeature,string)=>(boolean)",
    IsAncestorOf="(MotorFeature,any)=>(boolean)",
    IsDescendantOf="(MotorFeature,any)=>(boolean)",
    LeftRight="any",
    Name="string",
    Parent="any",
    Remove="(MotorFeature)=>()",
    RobloxLocked="boolean",
    SetAttribute="(MotorFeature,string,any)=>()",
    Tags="any",
    TopBottom="any",
    WaitForChild="(MotorFeature,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(MotorFeature)=>(any)",
    className="string",
    clone="(MotorFeature)=>(any)",
    destroy="(MotorFeature)=>()",
    findFirstChild="(MotorFeature,string,boolean)=>(any)",
    getChildren="(MotorFeature)=>(any)",
    isA="(MotorFeature,string)=>(boolean)",
    isDescendantOf="(MotorFeature,any)=>(boolean)",
    remove="(MotorFeature)=>()"}


, CylindricalConstraint={
    Active="boolean",
    Actuator,="any",
    AncestryChanged="Event",
    AngularActuator,="any",
    AngularLimitsEnabled="boolean",
    AngularRestitution="number",
    AngularSpeed="number",
    AngularVelocity="number",
    Archivable="boolean",
    Attachment0="any",
    Attachment1="any",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(CylindricalConstraint)=>()",
    Clone="(CylindricalConstraint)=>(any)",
    Color="any",
    CurrentAngle="number",
    CurrentPosition="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(CylindricalConstraint)=>()",
    Enabled="boolean",
    FindFirstAncestor="(CylindricalConstraint,string)=>(any)",
    FindFirstAncestorOfClass="(CylindricalConstraint,string)=>(any)",
    FindFirstAncestorWhichIsA="(CylindricalConstraint,string)=>(any)",
    FindFirstChild="(CylindricalConstraint,string,boolean)=>(any)",
    FindFirstChildOfClass="(CylindricalConstraint,string)=>(any)",
    FindFirstChildWhichIsA="(CylindricalConstraint,string,boolean)=>(any)",
    GetAttribute="(CylindricalConstraint,string)=>(any)",
    GetAttributeChangedSignal="(CylindricalConstraint,string)=>(any)",
    GetAttributes="(CylindricalConstraint)=>(any)",
    GetChildren="(CylindricalConstraint)=>(any)",
    GetDebugId="(CylindricalConstraint,number)=>(string)",
    GetDescendants="(CylindricalConstraint)=>(any)",
    GetFullName="(CylindricalConstraint)=>(string)",
    GetPropertyChangedSignal="(CylindricalConstraint,string)=>(any)",
    InclinationAngle="number",
    IsA="(CylindricalConstraint,string)=>(boolean)",
    IsAncestorOf="(CylindricalConstraint,any)=>(boolean)",
    IsDescendantOf="(CylindricalConstraint,any)=>(boolean)",
    LimitsEnabled="boolean",
    LowerAngle="number",
    LowerLimit="number",
    MotorMaxAcceleration="number",
    MotorMaxAngularAcceleration="number",
    MotorMaxForce="number",
    MotorMaxTorque="number",
    Name="string",
    Parent="any",
    Remove="(CylindricalConstraint)=>()",
    Restitution="number",
    RobloxLocked="boolean",
    RotationAxisVisible="boolean",
    ServoMaxForce="number",
    ServoMaxTorque="number",
    SetAttribute="(CylindricalConstraint,string,any)=>()",
    Size="number",
    Speed="number",
    Tags="any",
    TargetAngle="number",
    TargetPosition="number",
    UpperAngle="number",
    UpperLimit="number",
    Velocity="number",
    Visible="boolean",
    WaitForChild="(CylindricalConstraint,string,number)=>(any)",
    WorldRotationAxis="Vector3",
    archivable="boolean",
    childAdded="Event",
    children="(CylindricalConstraint)=>(any)",
    className="string",
    clone="(CylindricalConstraint)=>(any)",
    destroy="(CylindricalConstraint)=>()",
    findFirstChild="(CylindricalConstraint,string,boolean)=>(any)",
    getChildren="(CylindricalConstraint)=>(any)",
    isA="(CylindricalConstraint,string)=>(boolean)",
    isDescendantOf="(CylindricalConstraint,any)=>(boolean)",
    remove="(CylindricalConstraint)=>()"}


, DataModelMesh={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(DataModelMesh)=>()",
    Clone="(DataModelMesh)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(DataModelMesh)=>()",
    FindFirstAncestor="(DataModelMesh,string)=>(any)",
    FindFirstAncestorOfClass="(DataModelMesh,string)=>(any)",
    FindFirstAncestorWhichIsA="(DataModelMesh,string)=>(any)",
    FindFirstChild="(DataModelMesh,string,boolean)=>(any)",
    FindFirstChildOfClass="(DataModelMesh,string)=>(any)",
    FindFirstChildWhichIsA="(DataModelMesh,string,boolean)=>(any)",
    GetAttribute="(DataModelMesh,string)=>(any)",
    GetAttributeChangedSignal="(DataModelMesh,string)=>(any)",
    GetAttributes="(DataModelMesh)=>(any)",
    GetChildren="(DataModelMesh)=>(any)",
    GetDebugId="(DataModelMesh,number)=>(string)",
    GetDescendants="(DataModelMesh)=>(any)",
    GetFullName="(DataModelMesh)=>(string)",
    GetPropertyChangedSignal="(DataModelMesh,string)=>(any)",
    IsA="(DataModelMesh,string)=>(boolean)",
    IsAncestorOf="(DataModelMesh,any)=>(boolean)",
    IsDescendantOf="(DataModelMesh,any)=>(boolean)",
    LODX="any",
    LODY="any",
    Name="string",
    Offset="Vector3",
    Parent="any",
    Remove="(DataModelMesh)=>()",
    RobloxLocked="boolean",
    Scale="Vector3",
    SetAttribute="(DataModelMesh,string,any)=>()",
    Tags="any",
    VertexColor="Vector3",
    WaitForChild="(DataModelMesh,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(DataModelMesh)=>(any)",
    className="string",
    clone="(DataModelMesh)=>(any)",
    destroy="(DataModelMesh)=>()",
    findFirstChild="(DataModelMesh,string,boolean)=>(any)",
    getChildren="(DataModelMesh)=>(any)",
    isA="(DataModelMesh,string)=>(boolean)",
    isDescendantOf="(DataModelMesh,any)=>(boolean)",
    remove="(DataModelMesh)=>()"}


, TextButton={
    AbsolutePosition="Vector2",
    AbsoluteRotation="number",
    AbsoluteSize="Vector2",
    Activated="Event",
    Active="boolean",
    AncestryChanged="Event",
    AnchorPoint="Vector2",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoButtonColor="boolean",
    AutoLocalize="boolean",
    BackgroundColor="any",
    BackgroundColor3="Color3",
    BackgroundTransparency="number",
    BorderColor="any",
    BorderColor3="Color3",
    BorderMode="any",
    BorderSizePixel="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(TextButton)=>()",
    ClipsDescendants="boolean",
    Clone="(TextButton)=>(any)",
    Confidential="boolean",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(TextButton)=>()",
    DragBegin="Event",
    DragBeginConnectionCount="number",
    DragStopped="Event",
    DragStoppedConnectionCount="number",
    Draggable="boolean",
    FindFirstAncestor="(TextButton,string)=>(any)",
    FindFirstAncestorOfClass="(TextButton,string)=>(any)",
    FindFirstAncestorWhichIsA="(TextButton,string)=>(any)",
    FindFirstChild="(TextButton,string,boolean)=>(any)",
    FindFirstChildOfClass="(TextButton,string)=>(any)",
    FindFirstChildWhichIsA="(TextButton,string,boolean)=>(any)",
    Font="any",
    FontSize="any",
    GetAttribute="(TextButton,string)=>(any)",
    GetAttributeChangedSignal="(TextButton,string)=>(any)",
    GetAttributes="(TextButton)=>(any)",
    GetChildren="(TextButton)=>(any)",
    GetDebugId="(TextButton,number)=>(string)",
    GetDescendants="(TextButton)=>(any)",
    GetFullName="(TextButton)=>(string)",
    GetPropertyChangedSignal="(TextButton,string)=>(any)",
    InputBegan="Event",
    InputChanged="Event",
    InputEnded="Event",
    IsA="(TextButton,string)=>(boolean)",
    IsAncestorOf="(TextButton,any)=>(boolean)",
    IsDescendantOf="(TextButton,any)=>(boolean)",
    IsNotOccluded="boolean",
    LayoutOrder="number",
    LineHeight="number",
    Localize="boolean",
    LocalizedText="string",
    Modal="boolean",
    MouseButton1Click="Event",
    MouseButton1ClickConnectionCount="number",
    MouseButton1Down="Event",
    MouseButton1DownConnectionCount="number",
    MouseButton1Up="Event",
    MouseButton1UpConnectionCount="number",
    MouseButton2Click="Event",
    MouseButton2ClickConnectionCount="number",
    MouseButton2Down="Event",
    MouseButton2DownConnectionCount="number",
    MouseButton2Up="Event",
    MouseButton2UpConnectionCount="number",
    MouseEnter="Event",
    MouseEnterConnectionCount="number",
    MouseLeave="Event",
    MouseLeaveConnectionCount="number",
    MouseMoved="Event",
    MouseMovedConnectionCount="number",
    MouseWheelBackward="Event",
    MouseWheelBackwardConnectionCount="number",
    MouseWheelForward="Event",
    MouseWheelForwardConnectionCount="number",
    Name="string",
    NextSelectionDown="any",
    NextSelectionLeft="any",
    NextSelectionRight="any",
    NextSelectionUp="any",
    Parent="any",
    Position="UDim2",
    Remove="(TextButton)=>()",
    RobloxLocked="boolean",
    RootLocalizationTable="any",
    Rotation="number",
    Selectable="boolean",
    Selected="boolean",
    SelectionGained="Event",
    SelectionImageObject="any",
    SelectionLost="Event",
    SetAttribute="(TextButton,string,any)=>()",
    SetTextFromInput="(TextButton,string)=>()",
    Size="UDim2",
    SizeConstraint="any",
    Style="any",
    Tags="any",
    Text="string",
    TextBounds="Vector2",
    TextColor="any",
    TextColor3="Color3",
    TextFits="boolean",
    TextScaled="boolean",
    TextSize="number",
    TextStrokeColor3="Color3",
    TextStrokeTransparency="number",
    TextTransparency="number",
    TextTruncate="any",
    TextWrap="boolean",
    TextWrapped="boolean",
    TextXAlignment="any",
    TextYAlignment="any",
    TouchLongPress="Event",
    TouchPan="Event",
    TouchPinch="Event",
    TouchRotate="Event",
    TouchSwipe="Event",
    TouchTap="Event",
    Transparency="number",
    TweenPosition="(TextButton,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSize="(TextButton,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSizeAndPosition="(TextButton,UDim2,UDim2,any,any,number,boolean,any)=>(boolean)",
    Visible="boolean",
    WaitForChild="(TextButton,string,number)=>(any)",
    ZIndex="number",
    archivable="boolean",
    childAdded="Event",
    children="(TextButton)=>(any)",
    className="string",
    clone="(TextButton)=>(any)",
    destroy="(TextButton)=>()",
    findFirstChild="(TextButton,string,boolean)=>(any)",
    getChildren="(TextButton)=>(any)",
    isA="(TextButton,string)=>(boolean)",
    isDescendantOf="(TextButton,any)=>(boolean)",
    remove="(TextButton)=>()"}


, DataModelSession={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(DataModelSession)=>()",
    Clone="(DataModelSession)=>(any)",
    CurrentDataModel,="any",
    CurrentDataModel,AboutToChange="Event",
    CurrentDataModel,Changed="Event",
    DataCost="number",
    DataModelCreated="Event",
    DataModelWillBeDestroyed="Event",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(DataModelSession)=>()",
    FindFirstAncestor="(DataModelSession,string)=>(any)",
    FindFirstAncestorOfClass="(DataModelSession,string)=>(any)",
    FindFirstAncestorWhichIsA="(DataModelSession,string)=>(any)",
    FindFirstChild="(DataModelSession,string,boolean)=>(any)",
    FindFirstChildOfClass="(DataModelSession,string)=>(any)",
    FindFirstChildWhichIsA="(DataModelSession,string,boolean)=>(any)",
    GetAttribute="(DataModelSession,string)=>(any)",
    GetAttributeChangedSignal="(DataModelSession,string)=>(any)",
    GetAttributes="(DataModelSession)=>(any)",
    GetChildren="(DataModelSession)=>(any)",
    GetDebugId="(DataModelSession,number)=>(string)",
    GetDescendants="(DataModelSession)=>(any)",
    GetFullName="(DataModelSession)=>(string)",
    GetPropertyChangedSignal="(DataModelSession,string)=>(any)",
    IsA="(DataModelSession,string)=>(boolean)",
    IsAncestorOf="(DataModelSession,any)=>(boolean)",
    IsDescendantOf="(DataModelSession,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(DataModelSession)=>()",
    RobloxLocked="boolean",
    SessionId="string",
    SetAttribute="(DataModelSession,string,any)=>()",
    Tags="any",
    WaitForChild="(DataModelSession,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(DataModelSession)=>(any)",
    className="string",
    clone="(DataModelSession)=>(any)",
    destroy="(DataModelSession)=>()",
    findFirstChild="(DataModelSession,string,boolean)=>(any)",
    getChildren="(DataModelSession)=>(any)",
    isA="(DataModelSession,string)=>(boolean)",
    isDescendantOf="(DataModelSession,any)=>(boolean)",
    remove="(DataModelSession)=>()"}


, Vector2int16=Vector2

, GuiBase3d={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(GuiBase3d)=>()",
    Clone="(GuiBase3d)=>(any)",
    Color="any",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(GuiBase3d)=>()",
    FindFirstAncestor="(GuiBase3d,string)=>(any)",
    FindFirstAncestorOfClass="(GuiBase3d,string)=>(any)",
    FindFirstAncestorWhichIsA="(GuiBase3d,string)=>(any)",
    FindFirstChild="(GuiBase3d,string,boolean)=>(any)",
    FindFirstChildOfClass="(GuiBase3d,string)=>(any)",
    FindFirstChildWhichIsA="(GuiBase3d,string,boolean)=>(any)",
    GetAttribute="(GuiBase3d,string)=>(any)",
    GetAttributeChangedSignal="(GuiBase3d,string)=>(any)",
    GetAttributes="(GuiBase3d)=>(any)",
    GetChildren="(GuiBase3d)=>(any)",
    GetDebugId="(GuiBase3d,number)=>(string)",
    GetDescendants="(GuiBase3d)=>(any)",
    GetFullName="(GuiBase3d)=>(string)",
    GetPropertyChangedSignal="(GuiBase3d,string)=>(any)",
    IsA="(GuiBase3d,string)=>(boolean)",
    IsAncestorOf="(GuiBase3d,any)=>(boolean)",
    IsDescendantOf="(GuiBase3d,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(GuiBase3d)=>()",
    RobloxLocked="boolean",
    SetAttribute="(GuiBase3d,string,any)=>()",
    Tags="any",
    Transparency="number",
    Visible="boolean",
    WaitForChild="(GuiBase3d,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(GuiBase3d)=>(any)",
    className="string",
    clone="(GuiBase3d)=>(any)",
    destroy="(GuiBase3d)=>()",
    findFirstChild="(GuiBase3d,string,boolean)=>(any)",
    getChildren="(GuiBase3d)=>(any)",
    isA="(GuiBase3d,string)=>(boolean)",
    isDescendantOf="(GuiBase3d,any)=>(boolean)",
    remove="(GuiBase3d)=>()"}


, DataStorePages={
    AdvanceToNextPageAsync="(DataStorePages)=>()",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(DataStorePages)=>()",
    Clone="(DataStorePages)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(DataStorePages)=>()",
    FindFirstAncestor="(DataStorePages,string)=>(any)",
    FindFirstAncestorOfClass="(DataStorePages,string)=>(any)",
    FindFirstAncestorWhichIsA="(DataStorePages,string)=>(any)",
    FindFirstChild="(DataStorePages,string,boolean)=>(any)",
    FindFirstChildOfClass="(DataStorePages,string)=>(any)",
    FindFirstChildWhichIsA="(DataStorePages,string,boolean)=>(any)",
    GetAttribute="(DataStorePages,string)=>(any)",
    GetAttributeChangedSignal="(DataStorePages,string)=>(any)",
    GetAttributes="(DataStorePages)=>(any)",
    GetChildren="(DataStorePages)=>(any)",
    GetCurrentPage="(DataStorePages)=>(any)",
    GetDebugId="(DataStorePages,number)=>(string)",
    GetDescendants="(DataStorePages)=>(any)",
    GetFullName="(DataStorePages)=>(string)",
    GetPropertyChangedSignal="(DataStorePages,string)=>(any)",
    IsA="(DataStorePages,string)=>(boolean)",
    IsAncestorOf="(DataStorePages,any)=>(boolean)",
    IsDescendantOf="(DataStorePages,any)=>(boolean)",
    IsFinished="boolean",
    Name="string",
    Parent="any",
    Remove="(DataStorePages)=>()",
    RobloxLocked="boolean",
    SetAttribute="(DataStorePages,string,any)=>()",
    Tags="any",
    WaitForChild="(DataStorePages,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(DataStorePages)=>(any)",
    className="string",
    clone="(DataStorePages)=>(any)",
    destroy="(DataStorePages)=>()",
    findFirstChild="(DataStorePages,string,boolean)=>(any)",
    getChildren="(DataStorePages)=>(any)",
    isA="(DataStorePages,string)=>(boolean)",
    isDescendantOf="(DataStorePages,any)=>(boolean)",
    remove="(DataStorePages)=>()"}


, TrussPart={
    AncestryChanged="Event",
    Anchored="boolean",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BackParamA="number",
    BackParamB="number",
    BackSurface="any",
    BackSurfaceInput="any",
    BottomParamA="number",
    BottomParamB="number",
    BottomSurface="any",
    BottomSurfaceInput="any",
    BreakJoints="(TrussPart)=>()",
    BrickColor="any",
    CFrame="CFrame",
    CanCollide="boolean",
    CanCollideWith="(TrussPart,any)=>(boolean)",
    CanSetNetworkOwnership="(TrussPart)=>(any)",
    CastShadow="boolean",
    CenterOfMass="Vector3",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(TrussPart)=>()",
    Clone="(TrussPart)=>(any)",
    CollisionGroupId="number",
    Color="Color3",
    Color3uint8="any",
    CustomPhysicalProperties="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(TrussPart)=>()",
    DraggingV1="boolean",
    Elasticity="number",
    FindFirstAncestor="(TrussPart,string)=>(any)",
    FindFirstAncestorOfClass="(TrussPart,string)=>(any)",
    FindFirstAncestorWhichIsA="(TrussPart,string)=>(any)",
    FindFirstChild="(TrussPart,string,boolean)=>(any)",
    FindFirstChildOfClass="(TrussPart,string)=>(any)",
    FindFirstChildWhichIsA="(TrussPart,string,boolean)=>(any)",
    Friction="number",
    FrontParamA="number",
    FrontParamB="number",
    FrontSurface="any",
    FrontSurfaceInput="any",
    GetAttribute="(TrussPart,string)=>(any)",
    GetAttributeChangedSignal="(TrussPart,string)=>(any)",
    GetAttributes="(TrussPart)=>(any)",
    GetChildren="(TrussPart)=>(any)",
    GetConnectedParts="(TrussPart,boolean)=>(any)",
    GetDebugId="(TrussPart,number)=>(string)",
    GetDescendants="(TrussPart)=>(any)",
    GetFullName="(TrussPart)=>(string)",
    GetJoints="(TrussPart)=>(any)",
    GetMass="(TrussPart)=>(number)",
    GetNetworkOwner="(TrussPart)=>(any)",
    GetNetworkOwnershipAuto="(TrussPart)=>(boolean)",
    GetPropertyChangedSignal="(TrussPart,string)=>(any)",
    GetRenderCFrame="(TrussPart)=>(CFrame)",
    GetRootPart="(TrussPart)=>(any)",
    GetTouchingParts="(TrussPart)=>(any)",
    IsA="(TrussPart,string)=>(boolean)",
    IsAncestorOf="(TrussPart,any)=>(boolean)",
    IsDescendantOf="(TrussPart,any)=>(boolean)",
    IsGrounded="(TrussPart)=>(boolean)",
    LeftParamA="number",
    LeftParamB="number",
    LeftSurface="any",
    LeftSurfaceInput="any",
    LocalSimulationTouched="Event",
    LocalTransparencyModifier="number",
    Locked="boolean",
    MakeJoints="(TrussPart)=>()",
    Massless="boolean",
    Material="any",
    Name="string",
    NetworkIsSleeping="boolean",
    NetworkOwnerChanged="Event",
    NetworkOwnerV3="any",
    NetworkOwnershipRule="any",
    Orientation="Vector3",
    OutfitChanged="Event",
    Parent="any",
    Position="Vector3",
    ReceiveAge="number",
    Reflectance="number",
    Remove="(TrussPart)=>()",
    Resize="(TrussPart,any,number)=>(boolean)",
    ResizeIncrement="number",
    ResizeableFaces="any",
    RightParamA="number",
    RightParamB="number",
    RightSurface="any",
    RightSurfaceInput="any",
    RobloxLocked="boolean",
    RootPriority="number",
    RotVelocity="Vector3",
    Rotation="Vector3",
    SetAttribute="(TrussPart,string,any)=>()",
    SetNetworkOwner="(TrussPart,any)=>()",
    SetNetworkOwnershipAuto="(TrussPart)=>()",
    Size="Vector3",
    SpecificGravity="number",
    StoppedTouching="Event",
    Style="any",
    SubtractAsync="(TrussPart,any,any,any)=>(any)",
    Tags="any",
    TopParamA="number",
    TopParamB="number",
    TopSurface="any",
    TopSurfaceInput="any",
    TouchEnded="Event",
    Touched="Event",
    Transparency="number",
    UnionAsync="(TrussPart,any,any,any)=>(any)",
    Velocity="Vector3",
    WaitForChild="(TrussPart,string,number)=>(any)",
    archivable="boolean",
    breakJoints="(TrussPart)=>()",
    brickColor="any",
    childAdded="Event",
    children="(TrussPart)=>(any)",
    className="string",
    clone="(TrussPart)=>(any)",
    destroy="(TrussPart)=>()",
    findFirstChild="(TrussPart,string,boolean)=>(any)",
    getChildren="(TrussPart)=>(any)",
    getMass="(TrussPart)=>(number)",
    isA="(TrussPart,string)=>(boolean)",
    isDescendantOf="(TrussPart,any)=>(boolean)",
    makeJoints="(TrussPart)=>()",
    remove="(TrussPart)=>()",
    resize="(TrussPart,any,number)=>(boolean)",
    siz="Vector3",
    size="Vector3",
    style="any",
    touched="Event"}


, HandlesBase={
    Adornee="any",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(HandlesBase)=>()",
    Clone="(HandlesBase)=>(any)",
    Color="any",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(HandlesBase)=>()",
    FindFirstAncestor="(HandlesBase,string)=>(any)",
    FindFirstAncestorOfClass="(HandlesBase,string)=>(any)",
    FindFirstAncestorWhichIsA="(HandlesBase,string)=>(any)",
    FindFirstChild="(HandlesBase,string,boolean)=>(any)",
    FindFirstChildOfClass="(HandlesBase,string)=>(any)",
    FindFirstChildWhichIsA="(HandlesBase,string,boolean)=>(any)",
    GetAttribute="(HandlesBase,string)=>(any)",
    GetAttributeChangedSignal="(HandlesBase,string)=>(any)",
    GetAttributes="(HandlesBase)=>(any)",
    GetChildren="(HandlesBase)=>(any)",
    GetDebugId="(HandlesBase,number)=>(string)",
    GetDescendants="(HandlesBase)=>(any)",
    GetFullName="(HandlesBase)=>(string)",
    GetPropertyChangedSignal="(HandlesBase,string)=>(any)",
    IsA="(HandlesBase,string)=>(boolean)",
    IsAncestorOf="(HandlesBase,any)=>(boolean)",
    IsDescendantOf="(HandlesBase,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(HandlesBase)=>()",
    RobloxLocked="boolean",
    SetAttribute="(HandlesBase,string,any)=>()",
    Tags="any",
    Transparency="number",
    Visible="boolean",
    WaitForChild="(HandlesBase,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(HandlesBase)=>(any)",
    className="string",
    clone="(HandlesBase)=>(any)",
    destroy="(HandlesBase)=>()",
    findFirstChild="(HandlesBase,string,boolean)=>(any)",
    getChildren="(HandlesBase)=>(any)",
    isA="(HandlesBase,string)=>(boolean)",
    isDescendantOf="(HandlesBase,any)=>(boolean)",
    remove="(HandlesBase)=>()"}


, DataStoreService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutomaticRetry="boolean",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(DataStoreService)=>()",
    Clone="(DataStoreService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(DataStoreService)=>()",
    FindFirstAncestor="(DataStoreService,string)=>(any)",
    FindFirstAncestorOfClass="(DataStoreService,string)=>(any)",
    FindFirstAncestorWhichIsA="(DataStoreService,string)=>(any)",
    FindFirstChild="(DataStoreService,string,boolean)=>(any)",
    FindFirstChildOfClass="(DataStoreService,string)=>(any)",
    FindFirstChildWhichIsA="(DataStoreService,string,boolean)=>(any)",
    GetAttribute="(DataStoreService,string)=>(any)",
    GetAttributeChangedSignal="(DataStoreService,string)=>(any)",
    GetAttributes="(DataStoreService)=>(any)",
    GetChildren="(DataStoreService)=>(any)",
    GetDataStore="(DataStoreService,string,string)=>(any)",
    GetDebugId="(DataStoreService,number)=>(string)",
    GetDescendants="(DataStoreService)=>(any)",
    GetFullName="(DataStoreService)=>(string)",
    GetGlobalDataStore="(DataStoreService)=>(any)",
    GetOrderedDataStore="(DataStoreService,string,string)=>(any)",
    GetPropertyChangedSignal="(DataStoreService,string)=>(any)",
    GetRequestBudgetForRequest,="(DataStoreService,any)=>(number)",
    IsA="(DataStoreService,string)=>(boolean)",
    IsAncestorOf="(DataStoreService,any)=>(boolean)",
    IsDescendantOf="(DataStoreService,any)=>(boolean)",
    LegacyNamingScheme="boolean",
    Name="string",
    Parent="any",
    Remove="(DataStoreService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(DataStoreService,string,any)=>()",
    Tags="any",
    WaitForChild="(DataStoreService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(DataStoreService)=>(any)",
    className="string",
    clone="(DataStoreService)=>(any)",
    destroy="(DataStoreService)=>()",
    findFirstChild="(DataStoreService,string,boolean)=>(any)",
    getChildren="(DataStoreService)=>(any)",
    isA="(DataStoreService,string)=>(boolean)",
    isDescendantOf="(DataStoreService,any)=>(boolean)",
    remove="(DataStoreService)=>()"}


, Debris={
    AddItem="(Debris,any,number)=>()",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Debris)=>()",
    Clone="(Debris)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Debris)=>()",
    FindFirstAncestor="(Debris,string)=>(any)",
    FindFirstAncestorOfClass="(Debris,string)=>(any)",
    FindFirstAncestorWhichIsA="(Debris,string)=>(any)",
    FindFirstChild="(Debris,string,boolean)=>(any)",
    FindFirstChildOfClass="(Debris,string)=>(any)",
    FindFirstChildWhichIsA="(Debris,string,boolean)=>(any)",
    GetAttribute="(Debris,string)=>(any)",
    GetAttributeChangedSignal="(Debris,string)=>(any)",
    GetAttributes="(Debris)=>(any)",
    GetChildren="(Debris)=>(any)",
    GetDebugId="(Debris,number)=>(string)",
    GetDescendants="(Debris)=>(any)",
    GetFullName="(Debris)=>(string)",
    GetPropertyChangedSignal="(Debris,string)=>(any)",
    IsA="(Debris,string)=>(boolean)",
    IsAncestorOf="(Debris,any)=>(boolean)",
    IsDescendantOf="(Debris,any)=>(boolean)",
    MaxItems="number",
    Name="string",
    Parent="any",
    Remove="(Debris)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Debris,string,any)=>()",
    SetLegacyMaxItems="(Debris,boolean)=>()",
    Tags="any",
    WaitForChild="(Debris,string,number)=>(any)",
    addItem="(Debris,any,number)=>()",
    archivable="boolean",
    childAdded="Event",
    children="(Debris)=>(any)",
    className="string",
    clone="(Debris)=>(any)",
    destroy="(Debris)=>()",
    findFirstChild="(Debris,string,boolean)=>(any)",
    getChildren="(Debris)=>(any)",
    isA="(Debris,string)=>(boolean)",
    isDescendantOf="(Debris,any)=>(boolean)",
    remove="(Debris)=>()"}


, DebugSettings={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(DebugSettings)=>()",
    Clone="(DebugSettings)=>(any)",
    DataCost="number",
    DataModel="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(DebugSettings)=>()",
    FindFirstAncestor="(DebugSettings,string)=>(any)",
    FindFirstAncestorOfClass="(DebugSettings,string)=>(any)",
    FindFirstAncestorWhichIsA="(DebugSettings,string)=>(any)",
    FindFirstChild="(DebugSettings,string,boolean)=>(any)",
    FindFirstChildOfClass="(DebugSettings,string)=>(any)",
    FindFirstChildWhichIsA="(DebugSettings,string,boolean)=>(any)",
    GetAttribute="(DebugSettings,string)=>(any)",
    GetAttributeChangedSignal="(DebugSettings,string)=>(any)",
    GetAttributes="(DebugSettings)=>(any)",
    GetChildren="(DebugSettings)=>(any)",
    GetDebugId="(DebugSettings,number)=>(string)",
    GetDescendants="(DebugSettings)=>(any)",
    GetFullName="(DebugSettings)=>(string)",
    GetPropertyChangedSignal="(DebugSettings,string)=>(any)",
    InstanceCount="number",
    IsA="(DebugSettings,string)=>(boolean)",
    IsAncestorOf="(DebugSettings,any)=>(boolean)",
    IsDescendantOf="(DebugSettings,any)=>(boolean)",
    IsFmodProfilingEnabled="boolean",
    IsScriptStackTracingEnabled="boolean",
    JobCount="number",
    Name="string",
    Parent="any",
    PlayerCount="number",
    Remove="(DebugSettings)=>()",
    ReportSoundWarnings="boolean",
    RobloxLocked="boolean",
    RobloxVersion="string",
    SetAttribute="(DebugSettings,string,any)=>()",
    Tags="any",
    TickCountPreciseOverride="any",
    WaitForChild="(DebugSettings,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(DebugSettings)=>(any)",
    className="string",
    clone="(DebugSettings)=>(any)",
    destroy="(DebugSettings)=>()",
    findFirstChild="(DebugSettings,string,boolean)=>(any)",
    getChildren="(DebugSettings)=>(any)",
    isA="(DebugSettings,string)=>(boolean)",
    isDescendantOf="(DebugSettings,any)=>(boolean)",
    remove="(DebugSettings)=>()"}


, SoundEffect={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SoundEffect)=>()",
    Clone="(SoundEffect)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SoundEffect)=>()",
    Enabled="boolean",
    FindFirstAncestor="(SoundEffect,string)=>(any)",
    FindFirstAncestorOfClass="(SoundEffect,string)=>(any)",
    FindFirstAncestorWhichIsA="(SoundEffect,string)=>(any)",
    FindFirstChild="(SoundEffect,string,boolean)=>(any)",
    FindFirstChildOfClass="(SoundEffect,string)=>(any)",
    FindFirstChildWhichIsA="(SoundEffect,string,boolean)=>(any)",
    GetAttribute="(SoundEffect,string)=>(any)",
    GetAttributeChangedSignal="(SoundEffect,string)=>(any)",
    GetAttributes="(SoundEffect)=>(any)",
    GetChildren="(SoundEffect)=>(any)",
    GetDebugId="(SoundEffect,number)=>(string)",
    GetDescendants="(SoundEffect)=>(any)",
    GetFullName="(SoundEffect)=>(string)",
    GetPropertyChangedSignal="(SoundEffect,string)=>(any)",
    IsA="(SoundEffect,string)=>(boolean)",
    IsAncestorOf="(SoundEffect,any)=>(boolean)",
    IsDescendantOf="(SoundEffect,any)=>(boolean)",
    Name="string",
    Parent="any",
    Priority="number",
    Remove="(SoundEffect)=>()",
    RobloxLocked="boolean",
    SetAttribute="(SoundEffect,string,any)=>()",
    Tags="any",
    WaitForChild="(SoundEffect,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(SoundEffect)=>(any)",
    className="string",
    clone="(SoundEffect)=>(any)",
    destroy="(SoundEffect)=>()",
    findFirstChild="(SoundEffect,string,boolean)=>(any)",
    getChildren="(SoundEffect)=>(any)",
    isA="(SoundEffect,string)=>(boolean)",
    isDescendantOf="(SoundEffect,any)=>(boolean)",
    remove="(SoundEffect)=>()"}


, PluginMenu={
    AddAction="(PluginMenu,any)=>()",
    AddMenu="(PluginMenu,any)=>()",
    AddNewAction="(PluginMenu,string,string,string)=>(any)",
    AddSeparator="(PluginMenu)=>()",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    Clear="(PluginMenu)=>()",
    ClearAllChildren="(PluginMenu)=>()",
    Clone="(PluginMenu)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PluginMenu)=>()",
    FindFirstAncestor="(PluginMenu,string)=>(any)",
    FindFirstAncestorOfClass="(PluginMenu,string)=>(any)",
    FindFirstAncestorWhichIsA="(PluginMenu,string)=>(any)",
    FindFirstChild="(PluginMenu,string,boolean)=>(any)",
    FindFirstChildOfClass="(PluginMenu,string)=>(any)",
    FindFirstChildWhichIsA="(PluginMenu,string,boolean)=>(any)",
    GetAttribute="(PluginMenu,string)=>(any)",
    GetAttributeChangedSignal="(PluginMenu,string)=>(any)",
    GetAttributes="(PluginMenu)=>(any)",
    GetChildren="(PluginMenu)=>(any)",
    GetDebugId="(PluginMenu,number)=>(string)",
    GetDescendants="(PluginMenu)=>(any)",
    GetFullName="(PluginMenu)=>(string)",
    GetPropertyChangedSignal="(PluginMenu,string)=>(any)",
    Icon="string",
    IsA="(PluginMenu,string)=>(boolean)",
    IsAncestorOf="(PluginMenu,any)=>(boolean)",
    IsDescendantOf="(PluginMenu,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(PluginMenu)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PluginMenu,string,any)=>()",
    ShowAsync="(PluginMenu)=>(any)",
    Tags="any",
    Title="string",
    WaitForChild="(PluginMenu,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PluginMenu)=>(any)",
    className="string",
    clone="(PluginMenu)=>(any)",
    destroy="(PluginMenu)=>()",
    findFirstChild="(PluginMenu,string,boolean)=>(any)",
    getChildren="(PluginMenu)=>(any)",
    isA="(PluginMenu,string)=>(boolean)",
    isDescendantOf="(PluginMenu,any)=>(boolean)",
    remove="(PluginMenu)=>()"}


, DebuggerWatch={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(DebuggerWatch)=>()",
    Clone="(DebuggerWatch)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(DebuggerWatch)=>()",
    Expression="string",
    FindFirstAncestor="(DebuggerWatch,string)=>(any)",
    FindFirstAncestorOfClass="(DebuggerWatch,string)=>(any)",
    FindFirstAncestorWhichIsA="(DebuggerWatch,string)=>(any)",
    FindFirstChild="(DebuggerWatch,string,boolean)=>(any)",
    FindFirstChildOfClass="(DebuggerWatch,string)=>(any)",
    FindFirstChildWhichIsA="(DebuggerWatch,string,boolean)=>(any)",
    GetAttribute="(DebuggerWatch,string)=>(any)",
    GetAttributeChangedSignal="(DebuggerWatch,string)=>(any)",
    GetAttributes="(DebuggerWatch)=>(any)",
    GetChildren="(DebuggerWatch)=>(any)",
    GetDebugId="(DebuggerWatch,number)=>(string)",
    GetDescendants="(DebuggerWatch)=>(any)",
    GetFullName="(DebuggerWatch)=>(string)",
    GetPropertyChangedSignal="(DebuggerWatch,string)=>(any)",
    IsA="(DebuggerWatch,string)=>(boolean)",
    IsAncestorOf="(DebuggerWatch,any)=>(boolean)",
    IsDescendantOf="(DebuggerWatch,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(DebuggerWatch)=>()",
    RobloxLocked="boolean",
    SetAttribute="(DebuggerWatch,string,any)=>()",
    Tags="any",
    WaitForChild="(DebuggerWatch,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(DebuggerWatch)=>(any)",
    className="string",
    clone="(DebuggerWatch)=>(any)",
    destroy="(DebuggerWatch)=>()",
    findFirstChild="(DebuggerWatch,string,boolean)=>(any)",
    getChildren="(DebuggerWatch)=>(any)",
    isA="(DebuggerWatch,string)=>(boolean)",
    isDescendantOf="(DebuggerWatch,any)=>(boolean)",
    remove="(DebuggerWatch)=>()"}


, MemStorageService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Bind="(MemStorageService,string,any)=>(any)",
    BindAndFire="(MemStorageService,string,any)=>(any)",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(MemStorageService)=>()",
    Clone="(MemStorageService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(MemStorageService)=>()",
    FindFirstAncestor="(MemStorageService,string)=>(any)",
    FindFirstAncestorOfClass="(MemStorageService,string)=>(any)",
    FindFirstAncestorWhichIsA="(MemStorageService,string)=>(any)",
    FindFirstChild="(MemStorageService,string,boolean)=>(any)",
    FindFirstChildOfClass="(MemStorageService,string)=>(any)",
    FindFirstChildWhichIsA="(MemStorageService,string,boolean)=>(any)",
    Fire="(MemStorageService,string,string)=>()",
    GetAttribute="(MemStorageService,string)=>(any)",
    GetAttributeChangedSignal="(MemStorageService,string)=>(any)",
    GetAttributes="(MemStorageService)=>(any)",
    GetChildren="(MemStorageService)=>(any)",
    GetDebugId="(MemStorageService,number)=>(string)",
    GetDescendants="(MemStorageService)=>(any)",
    GetFullName="(MemStorageService)=>(string)",
    GetItem="(MemStorageService,string,string)=>(string)",
    GetPropertyChangedSignal="(MemStorageService,string)=>(any)",
    HasItem="(MemStorageService,string)=>(boolean)",
    IsA="(MemStorageService,string)=>(boolean)",
    IsAncestorOf="(MemStorageService,any)=>(boolean)",
    IsDescendantOf="(MemStorageService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(MemStorageService)=>()",
    RemoveItem="(MemStorageService,string)=>(boolean)",
    RobloxLocked="boolean",
    SetAttribute="(MemStorageService,string,any)=>()",
    SetItem="(MemStorageService,string,string)=>()",
    Tags="any",
    WaitForChild="(MemStorageService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(MemStorageService)=>(any)",
    className="string",
    clone="(MemStorageService)=>(any)",
    destroy="(MemStorageService)=>()",
    findFirstChild="(MemStorageService,string,boolean)=>(any)",
    getChildren="(MemStorageService)=>(any)",
    isA="(MemStorageService,string)=>(boolean)",
    isDescendantOf="(MemStorageService,any)=>(boolean)",
    remove="(MemStorageService)=>()"}


, Decal={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Decal)=>()",
    Clone="(Decal)=>(any)",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Decal)=>()",
    Face="any",
    FindFirstAncestor="(Decal,string)=>(any)",
    FindFirstAncestorOfClass="(Decal,string)=>(any)",
    FindFirstAncestorWhichIsA="(Decal,string)=>(any)",
    FindFirstChild="(Decal,string,boolean)=>(any)",
    FindFirstChildOfClass="(Decal,string)=>(any)",
    FindFirstChildWhichIsA="(Decal,string,boolean)=>(any)",
    GetAttribute="(Decal,string)=>(any)",
    GetAttributeChangedSignal="(Decal,string)=>(any)",
    GetAttributes="(Decal)=>(any)",
    GetChildren="(Decal)=>(any)",
    GetDebugId="(Decal,number)=>(string)",
    GetDescendants="(Decal)=>(any)",
    GetFullName="(Decal)=>(string)",
    GetPropertyChangedSignal="(Decal,string)=>(any)",
    IsA="(Decal,string)=>(boolean)",
    IsAncestorOf="(Decal,any)=>(boolean)",
    IsDescendantOf="(Decal,any)=>(boolean)",
    LocalTransparencyModifier="number",
    Name="string",
    Parent="any",
    Remove="(Decal)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Decal,string,any)=>()",
    Shiny="number",
    Specular="number",
    Tags="any",
    Texture="any",
    Transparency="number",
    WaitForChild="(Decal,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Decal)=>(any)",
    className="string",
    clone="(Decal)=>(any)",
    destroy="(Decal)=>()",
    findFirstChild="(Decal,string,boolean)=>(any)",
    getChildren="(Decal)=>(any)",
    isA="(Decal,string)=>(boolean)",
    isDescendantOf="(Decal,any)=>(boolean)",
    remove="(Decal)=>()"}


, Dialog={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Behavior,="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Dialog)=>()",
    Clone="(Dialog)=>(any)",
    ConversationDistance="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Dialog)=>()",
    DialogChoiceSelected="Event",
    FindFirstAncestor="(Dialog,string)=>(any)",
    FindFirstAncestorOfClass="(Dialog,string)=>(any)",
    FindFirstAncestorWhichIsA="(Dialog,string)=>(any)",
    FindFirstChild="(Dialog,string,boolean)=>(any)",
    FindFirstChildOfClass="(Dialog,string)=>(any)",
    FindFirstChildWhichIsA="(Dialog,string,boolean)=>(any)",
    GetAttribute="(Dialog,string)=>(any)",
    GetAttributeChangedSignal="(Dialog,string)=>(any)",
    GetAttributes="(Dialog)=>(any)",
    GetChildren="(Dialog)=>(any)",
    GetCurrentPlayers="(Dialog)=>(any)",
    GetDebugId="(Dialog,number)=>(string)",
    GetDescendants="(Dialog)=>(any)",
    GetFullName="(Dialog)=>(string)",
    GetPropertyChangedSignal="(Dialog,string)=>(any)",
    GoodbyeChoiceActive="boolean",
    GoodbyeDialog="string",
    InUse="boolean",
    InitialPrompt="string",
    IsA="(Dialog,string)=>(boolean)",
    IsAncestorOf="(Dialog,any)=>(boolean)",
    IsDescendantOf="(Dialog,any)=>(boolean)",
    Name="string",
    Parent="any",
    Purpose="any",
    Remove="(Dialog)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Dialog,string,any)=>()",
    SetPlayerIsUsing="(Dialog,any,boolean)=>()",
    SignalDialogChoiceSelected="(Dialog,any,any)=>()",
    Tags="any",
    Tone="any",
    TriggerDistance="number",
    TriggerOffset="Vector3",
    WaitForChild="(Dialog,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Dialog)=>(any)",
    className="string",
    clone="(Dialog)=>(any)",
    destroy="(Dialog)=>()",
    findFirstChild="(Dialog,string,boolean)=>(any)",
    getChildren="(Dialog)=>(any)",
    isA="(Dialog,string)=>(boolean)",
    isDescendantOf="(Dialog,any)=>(boolean)",
    remove="(Dialog)=>()"}


, DialogChoice={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(DialogChoice)=>()",
    Clone="(DialogChoice)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(DialogChoice)=>()",
    FindFirstAncestor="(DialogChoice,string)=>(any)",
    FindFirstAncestorOfClass="(DialogChoice,string)=>(any)",
    FindFirstAncestorWhichIsA="(DialogChoice,string)=>(any)",
    FindFirstChild="(DialogChoice,string,boolean)=>(any)",
    FindFirstChildOfClass="(DialogChoice,string)=>(any)",
    FindFirstChildWhichIsA="(DialogChoice,string,boolean)=>(any)",
    GetAttribute="(DialogChoice,string)=>(any)",
    GetAttributeChangedSignal="(DialogChoice,string)=>(any)",
    GetAttributes="(DialogChoice)=>(any)",
    GetChildren="(DialogChoice)=>(any)",
    GetDebugId="(DialogChoice,number)=>(string)",
    GetDescendants="(DialogChoice)=>(any)",
    GetFullName="(DialogChoice)=>(string)",
    GetPropertyChangedSignal="(DialogChoice,string)=>(any)",
    GoodbyeChoiceActive="boolean",
    GoodbyeDialog="string",
    IsA="(DialogChoice,string)=>(boolean)",
    IsAncestorOf="(DialogChoice,any)=>(boolean)",
    IsDescendantOf="(DialogChoice,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(DialogChoice)=>()",
    ResponseDialog="string",
    RobloxLocked="boolean",
    SetAttribute="(DialogChoice,string,any)=>()",
    Tags="any",
    UserDialog="string",
    WaitForChild="(DialogChoice,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(DialogChoice)=>(any)",
    className="string",
    clone="(DialogChoice)=>(any)",
    destroy="(DialogChoice)=>()",
    findFirstChild="(DialogChoice,string,boolean)=>(any)",
    getChildren="(DialogChoice)=>(any)",
    isA="(DialogChoice,string)=>(boolean)",
    isDescendantOf="(DialogChoice,any)=>(boolean)",
    remove="(DialogChoice)=>()"}


, Axes=any

, DistortionSoundEffect={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(DistortionSoundEffect)=>()",
    Clone="(DistortionSoundEffect)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(DistortionSoundEffect)=>()",
    Enabled="boolean",
    FindFirstAncestor="(DistortionSoundEffect,string)=>(any)",
    FindFirstAncestorOfClass="(DistortionSoundEffect,string)=>(any)",
    FindFirstAncestorWhichIsA="(DistortionSoundEffect,string)=>(any)",
    FindFirstChild="(DistortionSoundEffect,string,boolean)=>(any)",
    FindFirstChildOfClass="(DistortionSoundEffect,string)=>(any)",
    FindFirstChildWhichIsA="(DistortionSoundEffect,string,boolean)=>(any)",
    GetAttribute="(DistortionSoundEffect,string)=>(any)",
    GetAttributeChangedSignal="(DistortionSoundEffect,string)=>(any)",
    GetAttributes="(DistortionSoundEffect)=>(any)",
    GetChildren="(DistortionSoundEffect)=>(any)",
    GetDebugId="(DistortionSoundEffect,number)=>(string)",
    GetDescendants="(DistortionSoundEffect)=>(any)",
    GetFullName="(DistortionSoundEffect)=>(string)",
    GetPropertyChangedSignal="(DistortionSoundEffect,string)=>(any)",
    IsA="(DistortionSoundEffect,string)=>(boolean)",
    IsAncestorOf="(DistortionSoundEffect,any)=>(boolean)",
    IsDescendantOf="(DistortionSoundEffect,any)=>(boolean)",
    Level="number",
    Name="string",
    Parent="any",
    Priority="number",
    Remove="(DistortionSoundEffect)=>()",
    RobloxLocked="boolean",
    SetAttribute="(DistortionSoundEffect,string,any)=>()",
    Tags="any",
    WaitForChild="(DistortionSoundEffect,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(DistortionSoundEffect)=>(any)",
    className="string",
    clone="(DistortionSoundEffect)=>(any)",
    destroy="(DistortionSoundEffect)=>()",
    findFirstChild="(DistortionSoundEffect,string,boolean)=>(any)",
    getChildren="(DistortionSoundEffect)=>(any)",
    isA="(DistortionSoundEffect,string)=>(boolean)",
    isDescendantOf="(DistortionSoundEffect,any)=>(boolean)",
    remove="(DistortionSoundEffect)=>()"}


, RayValue={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(RayValue)=>()",
    Clone="(RayValue)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(RayValue)=>()",
    FindFirstAncestor="(RayValue,string)=>(any)",
    FindFirstAncestorOfClass="(RayValue,string)=>(any)",
    FindFirstAncestorWhichIsA="(RayValue,string)=>(any)",
    FindFirstChild="(RayValue,string,boolean)=>(any)",
    FindFirstChildOfClass="(RayValue,string)=>(any)",
    FindFirstChildWhichIsA="(RayValue,string,boolean)=>(any)",
    GetAttribute="(RayValue,string)=>(any)",
    GetAttributeChangedSignal="(RayValue,string)=>(any)",
    GetAttributes="(RayValue)=>(any)",
    GetChildren="(RayValue)=>(any)",
    GetDebugId="(RayValue,number)=>(string)",
    GetDescendants="(RayValue)=>(any)",
    GetFullName="(RayValue)=>(string)",
    GetPropertyChangedSignal="(RayValue,string)=>(any)",
    IsA="(RayValue,string)=>(boolean)",
    IsAncestorOf="(RayValue,any)=>(boolean)",
    IsDescendantOf="(RayValue,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(RayValue)=>()",
    RobloxLocked="boolean",
    SetAttribute="(RayValue,string,any)=>()",
    Tags="any",
    Value="Ray",
    WaitForChild="(RayValue,string,number)=>(any)",
    archivable="boolean",
    changed="Event",
    childAdded="Event",
    children="(RayValue)=>(any)",
    className="string",
    clone="(RayValue)=>(any)",
    destroy="(RayValue)=>()",
    findFirstChild="(RayValue,string,boolean)=>(any)",
    getChildren="(RayValue)=>(any)",
    isA="(RayValue,string)=>(boolean)",
    isDescendantOf="(RayValue,any)=>(boolean)",
    remove="(RayValue)=>()"}


, DockWidgetPluginGui={
    AbsolutePosition="Vector2",
    AbsoluteRotation="number",
    AbsoluteSize="Vector2",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoLocalize="boolean",
    BindToClose="(DockWidgetPluginGui,any)=>()",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(DockWidgetPluginGui)=>()",
    Clone="(DockWidgetPluginGui)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(DockWidgetPluginGui)=>()",
    Enabled="boolean",
    FindFirstAncestor="(DockWidgetPluginGui,string)=>(any)",
    FindFirstAncestorOfClass="(DockWidgetPluginGui,string)=>(any)",
    FindFirstAncestorWhichIsA="(DockWidgetPluginGui,string)=>(any)",
    FindFirstChild="(DockWidgetPluginGui,string,boolean)=>(any)",
    FindFirstChildOfClass="(DockWidgetPluginGui,string)=>(any)",
    FindFirstChildWhichIsA="(DockWidgetPluginGui,string,boolean)=>(any)",
    GetAttribute="(DockWidgetPluginGui,string)=>(any)",
    GetAttributeChangedSignal="(DockWidgetPluginGui,string)=>(any)",
    GetAttributes="(DockWidgetPluginGui)=>(any)",
    GetChildren="(DockWidgetPluginGui)=>(any)",
    GetDebugId="(DockWidgetPluginGui,number)=>(string)",
    GetDescendants="(DockWidgetPluginGui)=>(any)",
    GetFullName="(DockWidgetPluginGui)=>(string)",
    GetPropertyChangedSignal="(DockWidgetPluginGui,string)=>(any)",
    GetRelativeMousePosition="(DockWidgetPluginGui)=>(Vector2)",
    HostWidgetWasRestored="boolean",
    IsA="(DockWidgetPluginGui,string)=>(boolean)",
    IsAncestorOf="(DockWidgetPluginGui,any)=>(boolean)",
    IsDescendantOf="(DockWidgetPluginGui,any)=>(boolean)",
    IsNotOccluded="boolean",
    Localize="boolean",
    Name="string",
    Parent="any",
    PluginDragDropped="Event",
    PluginDragEntered="Event",
    PluginDragLeft="Event",
    PluginDragMoved="Event",
    Remove="(DockWidgetPluginGui)=>()",
    ResetOnSpawn="boolean",
    RobloxLocked="boolean",
    RootLocalizationTable="any",
    SetAttribute="(DockWidgetPluginGui,string,any)=>()",
    Tags="any",
    Title="string",
    WaitForChild="(DockWidgetPluginGui,string,number)=>(any)",
    WindowFocusReleased="Event",
    WindowFocused="Event",
    ZIndexBehavior="any",
    archivable="boolean",
    childAdded="Event",
    children="(DockWidgetPluginGui)=>(any)",
    className="string",
    clone="(DockWidgetPluginGui)=>(any)",
    destroy="(DockWidgetPluginGui)=>()",
    findFirstChild="(DockWidgetPluginGui,string,boolean)=>(any)",
    getChildren="(DockWidgetPluginGui)=>(any)",
    isA="(DockWidgetPluginGui,string)=>(boolean)",
    isDescendantOf="(DockWidgetPluginGui,any)=>(boolean)",
    remove="(DockWidgetPluginGui)=>()"}


, Dragger={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AxisRotate="(Dragger,any)=>()",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Dragger)=>()",
    Clone="(Dragger)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Dragger)=>()",
    FindFirstAncestor="(Dragger,string)=>(any)",
    FindFirstAncestorOfClass="(Dragger,string)=>(any)",
    FindFirstAncestorWhichIsA="(Dragger,string)=>(any)",
    FindFirstChild="(Dragger,string,boolean)=>(any)",
    FindFirstChildOfClass="(Dragger,string)=>(any)",
    FindFirstChildWhichIsA="(Dragger,string,boolean)=>(any)",
    GetAttribute="(Dragger,string)=>(any)",
    GetAttributeChangedSignal="(Dragger,string)=>(any)",
    GetAttributes="(Dragger)=>(any)",
    GetChildren="(Dragger)=>(any)",
    GetDebugId="(Dragger,number)=>(string)",
    GetDescendants="(Dragger)=>(any)",
    GetFullName="(Dragger)=>(string)",
    GetPropertyChangedSignal="(Dragger,string)=>(any)",
    IsA="(Dragger,string)=>(boolean)",
    IsAncestorOf="(Dragger,any)=>(boolean)",
    IsDescendantOf="(Dragger,any)=>(boolean)",
    MouseDown="(Dragger,any,Vector3,any)=>()",
    MouseMove="(Dragger,Ray)=>()",
    MouseUp="(Dragger)=>()",
    Name="string",
    Parent="any",
    Remove="(Dragger)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Dragger,string,any)=>()",
    Tags="any",
    WaitForChild="(Dragger,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Dragger)=>(any)",
    className="string",
    clone="(Dragger)=>(any)",
    destroy="(Dragger)=>()",
    findFirstChild="(Dragger,string,boolean)=>(any)",
    getChildren="(Dragger)=>(any)",
    isA="(Dragger,string)=>(boolean)",
    isDescendantOf="(Dragger,any)=>(boolean)",
    remove="(Dragger)=>()"}


, DynamicRotate={
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BaseAngle="number",
    C0="CFrame",
    C1="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(DynamicRotate)=>()",
    Clone="(DynamicRotate)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(DynamicRotate)=>()",
    Enabled="boolean",
    FindFirstAncestor="(DynamicRotate,string)=>(any)",
    FindFirstAncestorOfClass="(DynamicRotate,string)=>(any)",
    FindFirstAncestorWhichIsA="(DynamicRotate,string)=>(any)",
    FindFirstChild="(DynamicRotate,string,boolean)=>(any)",
    FindFirstChildOfClass="(DynamicRotate,string)=>(any)",
    FindFirstChildWhichIsA="(DynamicRotate,string,boolean)=>(any)",
    GetAttribute="(DynamicRotate,string)=>(any)",
    GetAttributeChangedSignal="(DynamicRotate,string)=>(any)",
    GetAttributes="(DynamicRotate)=>(any)",
    GetChildren="(DynamicRotate)=>(any)",
    GetDebugId="(DynamicRotate,number)=>(string)",
    GetDescendants="(DynamicRotate)=>(any)",
    GetFullName="(DynamicRotate)=>(string)",
    GetPropertyChangedSignal="(DynamicRotate,string)=>(any)",
    IsA="(DynamicRotate,string)=>(boolean)",
    IsAncestorOf="(DynamicRotate,any)=>(boolean)",
    IsAutoJoint="boolean",
    IsDescendantOf="(DynamicRotate,any)=>(boolean)",
    Name="string",
    Parent="any",
    Part0="any",
    Part1="any",
    Remove="(DynamicRotate)=>()",
    RobloxLocked="boolean",
    SetAttribute="(DynamicRotate,string,any)=>()",
    Tags="any",
    WaitForChild="(DynamicRotate,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(DynamicRotate)=>(any)",
    className="string",
    clone="(DynamicRotate)=>(any)",
    destroy="(DynamicRotate)=>()",
    findFirstChild="(DynamicRotate,string,boolean)=>(any)",
    getChildren="(DynamicRotate)=>(any)",
    isA="(DynamicRotate,string)=>(boolean)",
    isDescendantOf="(DynamicRotate,any)=>(boolean)",
    part1="any",
    remove="(DynamicRotate)=>()"}


, GuidRegistryService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(GuidRegistryService)=>()",
    Clone="(GuidRegistryService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(GuidRegistryService)=>()",
    FindFirstAncestor="(GuidRegistryService,string)=>(any)",
    FindFirstAncestorOfClass="(GuidRegistryService,string)=>(any)",
    FindFirstAncestorWhichIsA="(GuidRegistryService,string)=>(any)",
    FindFirstChild="(GuidRegistryService,string,boolean)=>(any)",
    FindFirstChildOfClass="(GuidRegistryService,string)=>(any)",
    FindFirstChildWhichIsA="(GuidRegistryService,string,boolean)=>(any)",
    GetAttribute="(GuidRegistryService,string)=>(any)",
    GetAttributeChangedSignal="(GuidRegistryService,string)=>(any)",
    GetAttributes="(GuidRegistryService)=>(any)",
    GetChildren="(GuidRegistryService)=>(any)",
    GetDebugId="(GuidRegistryService,number)=>(string)",
    GetDescendants="(GuidRegistryService)=>(any)",
    GetFullName="(GuidRegistryService)=>(string)",
    GetPropertyChangedSignal="(GuidRegistryService,string)=>(any)",
    IsA="(GuidRegistryService,string)=>(boolean)",
    IsAncestorOf="(GuidRegistryService,any)=>(boolean)",
    IsDescendantOf="(GuidRegistryService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(GuidRegistryService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(GuidRegistryService,string,any)=>()",
    Tags="any",
    WaitForChild="(GuidRegistryService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(GuidRegistryService)=>(any)",
    className="string",
    clone="(GuidRegistryService)=>(any)",
    destroy="(GuidRegistryService)=>()",
    findFirstChild="(GuidRegistryService,string,boolean)=>(any)",
    getChildren="(GuidRegistryService)=>(any)",
    isA="(GuidRegistryService,string)=>(boolean)",
    isDescendantOf="(GuidRegistryService,any)=>(boolean)",
    remove="(GuidRegistryService)=>()"}


, EchoSoundEffect={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(EchoSoundEffect)=>()",
    Clone="(EchoSoundEffect)=>(any)",
    DataCost="number",
    Delay="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(EchoSoundEffect)=>()",
    DryLevel="number",
    Enabled="boolean",
    Feedback="number",
    FindFirstAncestor="(EchoSoundEffect,string)=>(any)",
    FindFirstAncestorOfClass="(EchoSoundEffect,string)=>(any)",
    FindFirstAncestorWhichIsA="(EchoSoundEffect,string)=>(any)",
    FindFirstChild="(EchoSoundEffect,string,boolean)=>(any)",
    FindFirstChildOfClass="(EchoSoundEffect,string)=>(any)",
    FindFirstChildWhichIsA="(EchoSoundEffect,string,boolean)=>(any)",
    GetAttribute="(EchoSoundEffect,string)=>(any)",
    GetAttributeChangedSignal="(EchoSoundEffect,string)=>(any)",
    GetAttributes="(EchoSoundEffect)=>(any)",
    GetChildren="(EchoSoundEffect)=>(any)",
    GetDebugId="(EchoSoundEffect,number)=>(string)",
    GetDescendants="(EchoSoundEffect)=>(any)",
    GetFullName="(EchoSoundEffect)=>(string)",
    GetPropertyChangedSignal="(EchoSoundEffect,string)=>(any)",
    IsA="(EchoSoundEffect,string)=>(boolean)",
    IsAncestorOf="(EchoSoundEffect,any)=>(boolean)",
    IsDescendantOf="(EchoSoundEffect,any)=>(boolean)",
    Name="string",
    Parent="any",
    Priority="number",
    Remove="(EchoSoundEffect)=>()",
    RobloxLocked="boolean",
    SetAttribute="(EchoSoundEffect,string,any)=>()",
    Tags="any",
    WaitForChild="(EchoSoundEffect,string,number)=>(any)",
    WetLevel="number",
    archivable="boolean",
    childAdded="Event",
    children="(EchoSoundEffect)=>(any)",
    className="string",
    clone="(EchoSoundEffect)=>(any)",
    destroy="(EchoSoundEffect)=>()",
    findFirstChild="(EchoSoundEffect,string,boolean)=>(any)",
    getChildren="(EchoSoundEffect)=>(any)",
    isA="(EchoSoundEffect,string)=>(boolean)",
    isDescendantOf="(EchoSoundEffect,any)=>(boolean)",
    remove="(EchoSoundEffect)=>()"}


, EmotesPages={
    AdvanceToNextPageAsync="(EmotesPages)=>()",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(EmotesPages)=>()",
    Clone="(EmotesPages)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(EmotesPages)=>()",
    FindFirstAncestor="(EmotesPages,string)=>(any)",
    FindFirstAncestorOfClass="(EmotesPages,string)=>(any)",
    FindFirstAncestorWhichIsA="(EmotesPages,string)=>(any)",
    FindFirstChild="(EmotesPages,string,boolean)=>(any)",
    FindFirstChildOfClass="(EmotesPages,string)=>(any)",
    FindFirstChildWhichIsA="(EmotesPages,string,boolean)=>(any)",
    GetAttribute="(EmotesPages,string)=>(any)",
    GetAttributeChangedSignal="(EmotesPages,string)=>(any)",
    GetAttributes="(EmotesPages)=>(any)",
    GetChildren="(EmotesPages)=>(any)",
    GetCurrentPage="(EmotesPages)=>(any)",
    GetDebugId="(EmotesPages,number)=>(string)",
    GetDescendants="(EmotesPages)=>(any)",
    GetFullName="(EmotesPages)=>(string)",
    GetPropertyChangedSignal="(EmotesPages,string)=>(any)",
    IsA="(EmotesPages,string)=>(boolean)",
    IsAncestorOf="(EmotesPages,any)=>(boolean)",
    IsDescendantOf="(EmotesPages,any)=>(boolean)",
    IsFinished="boolean",
    Name="string",
    Parent="any",
    Remove="(EmotesPages)=>()",
    RobloxLocked="boolean",
    SetAttribute="(EmotesPages,string,any)=>()",
    Tags="any",
    WaitForChild="(EmotesPages,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(EmotesPages)=>(any)",
    className="string",
    clone="(EmotesPages)=>(any)",
    destroy="(EmotesPages)=>()",
    findFirstChild="(EmotesPages,string,boolean)=>(any)",
    getChildren="(EmotesPages)=>(any)",
    isA="(EmotesPages,string)=>(boolean)",
    isDescendantOf="(EmotesPages,any)=>(boolean)",
    remove="(EmotesPages)=>()"}


, KeyframeMarker={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(KeyframeMarker)=>()",
    Clone="(KeyframeMarker)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(KeyframeMarker)=>()",
    FindFirstAncestor="(KeyframeMarker,string)=>(any)",
    FindFirstAncestorOfClass="(KeyframeMarker,string)=>(any)",
    FindFirstAncestorWhichIsA="(KeyframeMarker,string)=>(any)",
    FindFirstChild="(KeyframeMarker,string,boolean)=>(any)",
    FindFirstChildOfClass="(KeyframeMarker,string)=>(any)",
    FindFirstChildWhichIsA="(KeyframeMarker,string,boolean)=>(any)",
    GetAttribute="(KeyframeMarker,string)=>(any)",
    GetAttributeChangedSignal="(KeyframeMarker,string)=>(any)",
    GetAttributes="(KeyframeMarker)=>(any)",
    GetChildren="(KeyframeMarker)=>(any)",
    GetDebugId="(KeyframeMarker,number)=>(string)",
    GetDescendants="(KeyframeMarker)=>(any)",
    GetFullName="(KeyframeMarker)=>(string)",
    GetPropertyChangedSignal="(KeyframeMarker,string)=>(any)",
    IsA="(KeyframeMarker,string)=>(boolean)",
    IsAncestorOf="(KeyframeMarker,any)=>(boolean)",
    IsDescendantOf="(KeyframeMarker,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(KeyframeMarker)=>()",
    RobloxLocked="boolean",
    SetAttribute="(KeyframeMarker,string,any)=>()",
    Tags="any",
    Value="string",
    WaitForChild="(KeyframeMarker,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(KeyframeMarker)=>(any)",
    className="string",
    clone="(KeyframeMarker)=>(any)",
    destroy="(KeyframeMarker)=>()",
    findFirstChild="(KeyframeMarker,string,boolean)=>(any)",
    getChildren="(KeyframeMarker)=>(any)",
    isA="(KeyframeMarker,string)=>(boolean)",
    isDescendantOf="(KeyframeMarker,any)=>(boolean)",
    remove="(KeyframeMarker)=>()"}


, EqualizerSoundEffect={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(EqualizerSoundEffect)=>()",
    Clone="(EqualizerSoundEffect)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(EqualizerSoundEffect)=>()",
    Enabled="boolean",
    FindFirstAncestor="(EqualizerSoundEffect,string)=>(any)",
    FindFirstAncestorOfClass="(EqualizerSoundEffect,string)=>(any)",
    FindFirstAncestorWhichIsA="(EqualizerSoundEffect,string)=>(any)",
    FindFirstChild="(EqualizerSoundEffect,string,boolean)=>(any)",
    FindFirstChildOfClass="(EqualizerSoundEffect,string)=>(any)",
    FindFirstChildWhichIsA="(EqualizerSoundEffect,string,boolean)=>(any)",
    GetAttribute="(EqualizerSoundEffect,string)=>(any)",
    GetAttributeChangedSignal="(EqualizerSoundEffect,string)=>(any)",
    GetAttributes="(EqualizerSoundEffect)=>(any)",
    GetChildren="(EqualizerSoundEffect)=>(any)",
    GetDebugId="(EqualizerSoundEffect,number)=>(string)",
    GetDescendants="(EqualizerSoundEffect)=>(any)",
    GetFullName="(EqualizerSoundEffect)=>(string)",
    GetPropertyChangedSignal="(EqualizerSoundEffect,string)=>(any)",
    HighGain="number",
    IsA="(EqualizerSoundEffect,string)=>(boolean)",
    IsAncestorOf="(EqualizerSoundEffect,any)=>(boolean)",
    IsDescendantOf="(EqualizerSoundEffect,any)=>(boolean)",
    LowGain="number",
    MidGain="number",
    Name="string",
    Parent="any",
    Priority="number",
    Remove="(EqualizerSoundEffect)=>()",
    RobloxLocked="boolean",
    SetAttribute="(EqualizerSoundEffect,string,any)=>()",
    Tags="any",
    WaitForChild="(EqualizerSoundEffect,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(EqualizerSoundEffect)=>(any)",
    className="string",
    clone="(EqualizerSoundEffect)=>(any)",
    destroy="(EqualizerSoundEffect)=>()",
    findFirstChild="(EqualizerSoundEffect,string,boolean)=>(any)",
    getChildren="(EqualizerSoundEffect)=>(any)",
    isA="(EqualizerSoundEffect,string)=>(boolean)",
    isDescendantOf="(EqualizerSoundEffect,any)=>(boolean)",
    remove="(EqualizerSoundEffect)=>()"}


, UIPadding={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(UIPadding)=>()",
    Clone="(UIPadding)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(UIPadding)=>()",
    FindFirstAncestor="(UIPadding,string)=>(any)",
    FindFirstAncestorOfClass="(UIPadding,string)=>(any)",
    FindFirstAncestorWhichIsA="(UIPadding,string)=>(any)",
    FindFirstChild="(UIPadding,string,boolean)=>(any)",
    FindFirstChildOfClass="(UIPadding,string)=>(any)",
    FindFirstChildWhichIsA="(UIPadding,string,boolean)=>(any)",
    GetAttribute="(UIPadding,string)=>(any)",
    GetAttributeChangedSignal="(UIPadding,string)=>(any)",
    GetAttributes="(UIPadding)=>(any)",
    GetChildren="(UIPadding)=>(any)",
    GetDebugId="(UIPadding,number)=>(string)",
    GetDescendants="(UIPadding)=>(any)",
    GetFullName="(UIPadding)=>(string)",
    GetPropertyChangedSignal="(UIPadding,string)=>(any)",
    IsA="(UIPadding,string)=>(boolean)",
    IsAncestorOf="(UIPadding,any)=>(boolean)",
    IsDescendantOf="(UIPadding,any)=>(boolean)",
    Name="string",
    PaddingBottom="UDim",
    PaddingLeft="UDim",
    PaddingRight="UDim",
    PaddingTop="UDim",
    Parent="any",
    Remove="(UIPadding)=>()",
    RobloxLocked="boolean",
    SetAttribute="(UIPadding,string,any)=>()",
    Tags="any",
    WaitForChild="(UIPadding,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(UIPadding)=>(any)",
    className="string",
    clone="(UIPadding)=>(any)",
    destroy="(UIPadding)=>()",
    findFirstChild="(UIPadding,string,boolean)=>(any)",
    getChildren="(UIPadding)=>(any)",
    isA="(UIPadding,string)=>(boolean)",
    isDescendantOf="(UIPadding,any)=>(boolean)",
    remove="(UIPadding)=>()"}


, ImageLabel={
    AbsolutePosition="Vector2",
    AbsoluteRotation="number",
    AbsoluteSize="Vector2",
    Active="boolean",
    AncestryChanged="Event",
    AnchorPoint="Vector2",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoLocalize="boolean",
    BackgroundColor="any",
    BackgroundColor3="Color3",
    BackgroundTransparency="number",
    BorderColor="any",
    BorderColor3="Color3",
    BorderMode="any",
    BorderSizePixel="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ImageLabel)=>()",
    ClipsDescendants="boolean",
    Clone="(ImageLabel)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ImageLabel)=>()",
    DragBegin="Event",
    DragBeginConnectionCount="number",
    DragStopped="Event",
    DragStoppedConnectionCount="number",
    Draggable="boolean",
    FindFirstAncestor="(ImageLabel,string)=>(any)",
    FindFirstAncestorOfClass="(ImageLabel,string)=>(any)",
    FindFirstAncestorWhichIsA="(ImageLabel,string)=>(any)",
    FindFirstChild="(ImageLabel,string,boolean)=>(any)",
    FindFirstChildOfClass="(ImageLabel,string)=>(any)",
    FindFirstChildWhichIsA="(ImageLabel,string,boolean)=>(any)",
    GetAttribute="(ImageLabel,string)=>(any)",
    GetAttributeChangedSignal="(ImageLabel,string)=>(any)",
    GetAttributes="(ImageLabel)=>(any)",
    GetChildren="(ImageLabel)=>(any)",
    GetDebugId="(ImageLabel,number)=>(string)",
    GetDescendants="(ImageLabel)=>(any)",
    GetFullName="(ImageLabel)=>(string)",
    GetPropertyChangedSignal="(ImageLabel,string)=>(any)",
    Image="any",
    ImageColor3="Color3",
    ImageRectOffset="Vector2",
    ImageRectSize="Vector2",
    ImageTransparency="number",
    InputBegan="Event",
    InputChanged="Event",
    InputEnded="Event",
    IsA="(ImageLabel,string)=>(boolean)",
    IsAncestorOf="(ImageLabel,any)=>(boolean)",
    IsDescendantOf="(ImageLabel,any)=>(boolean)",
    IsLoaded="boolean",
    IsNotOccluded="boolean",
    LayoutOrder="number",
    Localize="boolean",
    MouseEnter="Event",
    MouseEnterConnectionCount="number",
    MouseLeave="Event",
    MouseLeaveConnectionCount="number",
    MouseMoved="Event",
    MouseMovedConnectionCount="number",
    MouseWheelBackward="Event",
    MouseWheelBackwardConnectionCount="number",
    MouseWheelForward="Event",
    MouseWheelForwardConnectionCount="number",
    Name="string",
    NextSelectionDown="any",
    NextSelectionLeft="any",
    NextSelectionRight="any",
    NextSelectionUp="any",
    Parent="any",
    Position="UDim2",
    Remove="(ImageLabel)=>()",
    RobloxLocked="boolean",
    RootLocalizationTable="any",
    Rotation="number",
    Scale,="any",
    Selectable="boolean",
    SelectionGained="Event",
    SelectionImageObject="any",
    SelectionLost="Event",
    SetAttribute="(ImageLabel,string,any)=>()",
    Size="UDim2",
    SizeConstraint="any",
    SliceCenter="Rect",
    SliceScale="number",
    Tags="any",
    TileSize="UDim2",
    TouchLongPress="Event",
    TouchPan="Event",
    TouchPinch="Event",
    TouchRotate="Event",
    TouchSwipe="Event",
    TouchTap="Event",
    Transparency="number",
    TweenPosition="(ImageLabel,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSize="(ImageLabel,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSizeAndPosition="(ImageLabel,UDim2,UDim2,any,any,number,boolean,any)=>(boolean)",
    Visible="boolean",
    WaitForChild="(ImageLabel,string,number)=>(any)",
    ZIndex="number",
    archivable="boolean",
    childAdded="Event",
    children="(ImageLabel)=>(any)",
    className="string",
    clone="(ImageLabel)=>(any)",
    destroy="(ImageLabel)=>()",
    findFirstChild="(ImageLabel,string,boolean)=>(any)",
    getChildren="(ImageLabel)=>(any)",
    isA="(ImageLabel,string)=>(boolean)",
    isDescendantOf="(ImageLabel,any)=>(boolean)",
    remove="(ImageLabel)=>()"}


, Explosion={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BlastPressure="number",
    BlastRadius="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Explosion)=>()",
    Clone="(Explosion)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Explosion)=>()",
    DestroyJointRadiusPercent="number",
    Explosion,="any",
    FindFirstAncestor="(Explosion,string)=>(any)",
    FindFirstAncestorOfClass="(Explosion,string)=>(any)",
    FindFirstAncestorWhichIsA="(Explosion,string)=>(any)",
    FindFirstChild="(Explosion,string,boolean)=>(any)",
    FindFirstChildOfClass="(Explosion,string)=>(any)",
    FindFirstChildWhichIsA="(Explosion,string,boolean)=>(any)",
    GetAttribute="(Explosion,string)=>(any)",
    GetAttributeChangedSignal="(Explosion,string)=>(any)",
    GetAttributes="(Explosion)=>(any)",
    GetChildren="(Explosion)=>(any)",
    GetDebugId="(Explosion,number)=>(string)",
    GetDescendants="(Explosion)=>(any)",
    GetFullName="(Explosion)=>(string)",
    GetPropertyChangedSignal="(Explosion,string)=>(any)",
    Hit="Event",
    IsA="(Explosion,string)=>(boolean)",
    IsAncestorOf="(Explosion,any)=>(boolean)",
    IsDescendantOf="(Explosion,any)=>(boolean)",
    Name="string",
    Parent="any",
    Position="Vector3",
    Remove="(Explosion)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Explosion,string,any)=>()",
    Tags="any",
    Visible="boolean",
    WaitForChild="(Explosion,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Explosion)=>(any)",
    className="string",
    clone="(Explosion)=>(any)",
    destroy="(Explosion)=>()",
    findFirstChild="(Explosion,string,boolean)=>(any)",
    getChildren="(Explosion)=>(any)",
    isA="(Explosion,string)=>(boolean)",
    isDescendantOf="(Explosion,any)=>(boolean)",
    remove="(Explosion)=>()"}


, FaceInstance={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(FaceInstance)=>()",
    Clone="(FaceInstance)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(FaceInstance)=>()",
    Face="any",
    FindFirstAncestor="(FaceInstance,string)=>(any)",
    FindFirstAncestorOfClass="(FaceInstance,string)=>(any)",
    FindFirstAncestorWhichIsA="(FaceInstance,string)=>(any)",
    FindFirstChild="(FaceInstance,string,boolean)=>(any)",
    FindFirstChildOfClass="(FaceInstance,string)=>(any)",
    FindFirstChildWhichIsA="(FaceInstance,string,boolean)=>(any)",
    GetAttribute="(FaceInstance,string)=>(any)",
    GetAttributeChangedSignal="(FaceInstance,string)=>(any)",
    GetAttributes="(FaceInstance)=>(any)",
    GetChildren="(FaceInstance)=>(any)",
    GetDebugId="(FaceInstance,number)=>(string)",
    GetDescendants="(FaceInstance)=>(any)",
    GetFullName="(FaceInstance)=>(string)",
    GetPropertyChangedSignal="(FaceInstance,string)=>(any)",
    IsA="(FaceInstance,string)=>(boolean)",
    IsAncestorOf="(FaceInstance,any)=>(boolean)",
    IsDescendantOf="(FaceInstance,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(FaceInstance)=>()",
    RobloxLocked="boolean",
    SetAttribute="(FaceInstance,string,any)=>()",
    Tags="any",
    WaitForChild="(FaceInstance,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(FaceInstance)=>(any)",
    className="string",
    clone="(FaceInstance)=>(any)",
    destroy="(FaceInstance)=>()",
    findFirstChild="(FaceInstance,string,boolean)=>(any)",
    getChildren="(FaceInstance)=>(any)",
    isA="(FaceInstance,string)=>(boolean)",
    isDescendantOf="(FaceInstance,any)=>(boolean)",
    remove="(FaceInstance)=>()"}


, Feature={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Feature)=>()",
    Clone="(Feature)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Feature)=>()",
    FaceId="any",
    FindFirstAncestor="(Feature,string)=>(any)",
    FindFirstAncestorOfClass="(Feature,string)=>(any)",
    FindFirstAncestorWhichIsA="(Feature,string)=>(any)",
    FindFirstChild="(Feature,string,boolean)=>(any)",
    FindFirstChildOfClass="(Feature,string)=>(any)",
    FindFirstChildWhichIsA="(Feature,string,boolean)=>(any)",
    GetAttribute="(Feature,string)=>(any)",
    GetAttributeChangedSignal="(Feature,string)=>(any)",
    GetAttributes="(Feature)=>(any)",
    GetChildren="(Feature)=>(any)",
    GetDebugId="(Feature,number)=>(string)",
    GetDescendants="(Feature)=>(any)",
    GetFullName="(Feature)=>(string)",
    GetPropertyChangedSignal="(Feature,string)=>(any)",
    InOut="any",
    IsA="(Feature,string)=>(boolean)",
    IsAncestorOf="(Feature,any)=>(boolean)",
    IsDescendantOf="(Feature,any)=>(boolean)",
    LeftRight="any",
    Name="string",
    Parent="any",
    Remove="(Feature)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Feature,string,any)=>()",
    Tags="any",
    TopBottom="any",
    WaitForChild="(Feature,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Feature)=>(any)",
    className="string",
    clone="(Feature)=>(any)",
    destroy="(Feature)=>()",
    findFirstChild="(Feature,string,boolean)=>(any)",
    getChildren="(Feature)=>(any)",
    isA="(Feature,string)=>(boolean)",
    isDescendantOf="(Feature,any)=>(boolean)",
    remove="(Feature)=>()"}


, FileMesh={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(FileMesh)=>()",
    Clone="(FileMesh)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(FileMesh)=>()",
    FindFirstAncestor="(FileMesh,string)=>(any)",
    FindFirstAncestorOfClass="(FileMesh,string)=>(any)",
    FindFirstAncestorWhichIsA="(FileMesh,string)=>(any)",
    FindFirstChild="(FileMesh,string,boolean)=>(any)",
    FindFirstChildOfClass="(FileMesh,string)=>(any)",
    FindFirstChildWhichIsA="(FileMesh,string,boolean)=>(any)",
    GetAttribute="(FileMesh,string)=>(any)",
    GetAttributeChangedSignal="(FileMesh,string)=>(any)",
    GetAttributes="(FileMesh)=>(any)",
    GetChildren="(FileMesh)=>(any)",
    GetDebugId="(FileMesh,number)=>(string)",
    GetDescendants="(FileMesh)=>(any)",
    GetFullName="(FileMesh)=>(string)",
    GetPropertyChangedSignal="(FileMesh,string)=>(any)",
    IsA="(FileMesh,string)=>(boolean)",
    IsAncestorOf="(FileMesh,any)=>(boolean)",
    IsDescendantOf="(FileMesh,any)=>(boolean)",
    LODX="any",
    LODY="any",
    MeshId="any",
    Name="string",
    Offset="Vector3",
    Parent="any",
    Remove="(FileMesh)=>()",
    RobloxLocked="boolean",
    Scale="Vector3",
    SetAttribute="(FileMesh,string,any)=>()",
    Tags="any",
    TextureId="any",
    VertexColor="Vector3",
    WaitForChild="(FileMesh,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(FileMesh)=>(any)",
    className="string",
    clone="(FileMesh)=>(any)",
    destroy="(FileMesh)=>()",
    findFirstChild="(FileMesh,string,boolean)=>(any)",
    getChildren="(FileMesh)=>(any)",
    isA="(FileMesh,string)=>(boolean)",
    isDescendantOf="(FileMesh,any)=>(boolean)",
    remove="(FileMesh)=>()"}


, RunService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BindToRenderStep="(RunService,string,number,any)=>()",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(RunService)=>()",
    Clone="(RunService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(RunService)=>()",
    FindFirstAncestor="(RunService,string)=>(any)",
    FindFirstAncestorOfClass="(RunService,string)=>(any)",
    FindFirstAncestorWhichIsA="(RunService,string)=>(any)",
    FindFirstChild="(RunService,string,boolean)=>(any)",
    FindFirstChildOfClass="(RunService,string)=>(any)",
    FindFirstChildWhichIsA="(RunService,string,boolean)=>(any)",
    GetAttribute="(RunService,string)=>(any)",
    GetAttributeChangedSignal="(RunService,string)=>(any)",
    GetAttributes="(RunService)=>(any)",
    GetChildren="(RunService)=>(any)",
    GetDebugId="(RunService,number)=>(string)",
    GetDescendants="(RunService)=>(any)",
    GetFullName="(RunService)=>(string)",
    GetPropertyChangedSignal="(RunService,string)=>(any)",
    GetRobloxVersion="(RunService)=>(string)",
    Heartbeat="Event",
    IsA="(RunService,string)=>(boolean)",
    IsAncestorOf="(RunService,any)=>(boolean)",
    IsClient="(RunService)=>(boolean)",
    IsDescendantOf="(RunService,any)=>(boolean)",
    IsEdit="(RunService)=>(boolean)",
    IsRunMode="(RunService)=>(boolean)",
    IsRunning="(RunService)=>(boolean)",
    IsServer="(RunService)=>(boolean)",
    IsStudio="(RunService)=>(boolean)",
    Name="string",
    Parent="any",
    Pause="(RunService)=>()",
    Remove="(RunService)=>()",
    RenderStepped="Event",
    Reset="(RunService)=>()",
    RobloxLocked="boolean",
    Run="(RunService)=>()",
    Set3dRenderingEnabled="(RunService,boolean)=>()",
    SetAttribute="(RunService,string,any)=>()",
    SetRobloxGuiFocused="(RunService,boolean)=>()",
    Stepped="Event",
    Stop="(RunService)=>()",
    Tags="any",
    UnbindFromRenderStep="(RunService,string)=>()",
    WaitForChild="(RunService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(RunService)=>(any)",
    className="string",
    clone="(RunService)=>(any)",
    destroy="(RunService)=>()",
    findFirstChild="(RunService,string,boolean)=>(any)",
    getChildren="(RunService)=>(any)",
    isA="(RunService,string)=>(boolean)",
    isDescendantOf="(RunService,any)=>(boolean)",
    remove="(RunService)=>()",
    setThrottleFramerateEnabled="(RunService,boolean)=>()"}


, FileSystemService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Canonical="(FileSystemService,string)=>(string)",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(FileSystemService)=>()",
    Clone="(FileSystemService)=>(any)",
    CopyFile="(FileSystemService,string,string)=>()",
    CurrentPath="(FileSystemService)=>(string)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(FileSystemService)=>()",
    Exists="(FileSystemService,string)=>(boolean)",
    FileSize="(FileSystemService,string)=>(number)",
    FindFirstAncestor="(FileSystemService,string)=>(any)",
    FindFirstAncestorOfClass="(FileSystemService,string)=>(any)",
    FindFirstAncestorWhichIsA="(FileSystemService,string)=>(any)",
    FindFirstChild="(FileSystemService,string,boolean)=>(any)",
    FindFirstChildOfClass="(FileSystemService,string)=>(any)",
    FindFirstChildWhichIsA="(FileSystemService,string,boolean)=>(any)",
    GetAttribute="(FileSystemService,string)=>(any)",
    GetAttributeChangedSignal="(FileSystemService,string)=>(any)",
    GetAttributes="(FileSystemService)=>(any)",
    GetChildren="(FileSystemService)=>(any)",
    GetDebugId="(FileSystemService,number)=>(string)",
    GetDescendants="(FileSystemService)=>(any)",
    GetFullName="(FileSystemService)=>(string)",
    GetPropertyChangedSignal="(FileSystemService,string)=>(any)",
    IsA="(FileSystemService,string)=>(boolean)",
    IsAncestorOf="(FileSystemService,any)=>(boolean)",
    IsDescendantOf="(FileSystemService,any)=>(boolean)",
    IsDirectory="(FileSystemService,string)=>(boolean)",
    IsEmpty="(FileSystemService,string)=>(boolean)",
    IsFile="(FileSystemService,string)=>(boolean)",
    IsSymlink="(FileSystemService,string)=>(boolean)",
    LastWriteTime="(FileSystemService,string)=>(number)",
    MakeParentPath="(FileSystemService,string)=>()",
    MakePath="(FileSystemService,string)=>()",
    Name="string",
    Normalized="(FileSystemService,string)=>(string)",
    Parent="any",
    ReadFile="(FileSystemService,string)=>(string)",
    Remove="(FileSystemService,string)=>()",
    RemoveAll="(FileSystemService,string)=>()",
    RobloxLocked="boolean",
    SetAttribute="(FileSystemService,string,any)=>()",
    SetCurrentPath="(FileSystemService,string)=>()",
    SetLastWriteTime="(FileSystemService,string,number)=>()",
    Tags="any",
    WaitForChild="(FileSystemService,string,number)=>(any)",
    WriteToFile="(FileSystemService,string,string)=>()",
    WriteToFileIfContentIsDifferent="(FileSystemService,string,string)=>()",
    archivable="boolean",
    childAdded="Event",
    children="(FileSystemService)=>(any)",
    className="string",
    clone="(FileSystemService)=>(any)",
    destroy="(FileSystemService)=>()",
    findFirstChild="(FileSystemService,string,boolean)=>(any)",
    getChildren="(FileSystemService)=>(any)",
    isA="(FileSystemService,string)=>(boolean)",
    isDescendantOf="(FileSystemService,any)=>(boolean)",
    remove="(FileSystemService)=>()"}


, Fire={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Fire)=>()",
    Clone="(Fire)=>(any)",
    Color="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Fire)=>()",
    Enabled="boolean",
    FindFirstAncestor="(Fire,string)=>(any)",
    FindFirstAncestorOfClass="(Fire,string)=>(any)",
    FindFirstAncestorWhichIsA="(Fire,string)=>(any)",
    FindFirstChild="(Fire,string,boolean)=>(any)",
    FindFirstChildOfClass="(Fire,string)=>(any)",
    FindFirstChildWhichIsA="(Fire,string,boolean)=>(any)",
    GetAttribute="(Fire,string)=>(any)",
    GetAttributeChangedSignal="(Fire,string)=>(any)",
    GetAttributes="(Fire)=>(any)",
    GetChildren="(Fire)=>(any)",
    GetDebugId="(Fire,number)=>(string)",
    GetDescendants="(Fire)=>(any)",
    GetFullName="(Fire)=>(string)",
    GetPropertyChangedSignal="(Fire,string)=>(any)",
    Heat="number",
    IsA="(Fire,string)=>(boolean)",
    IsAncestorOf="(Fire,any)=>(boolean)",
    IsDescendantOf="(Fire,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Fire)=>()",
    RobloxLocked="boolean",
    SecondaryColor="Color3",
    SetAttribute="(Fire,string,any)=>()",
    Size="number",
    Tags="any",
    WaitForChild="(Fire,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Fire)=>(any)",
    className="string",
    clone="(Fire)=>(any)",
    destroy="(Fire)=>()",
    findFirstChild="(Fire,string,boolean)=>(any)",
    getChildren="(Fire)=>(any)",
    heat_xml="number",
    isA="(Fire,string)=>(boolean)",
    isDescendantOf="(Fire,any)=>(boolean)",
    remove="(Fire)=>()",
    size="number",
    size_xml="number"}


, Flag={
    Activate="(Flag)=>()",
    Activated="Event",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CanBeDropped="boolean",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Flag)=>()",
    Clone="(Flag)=>(any)",
    DataCost="number",
    Deactivate="(Flag)=>()",
    Deactivated="Event",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Flag)=>()",
    Enabled="boolean",
    Equipped="Event",
    FindFirstAncestor="(Flag,string)=>(any)",
    FindFirstAncestorOfClass="(Flag,string)=>(any)",
    FindFirstAncestorWhichIsA="(Flag,string)=>(any)",
    FindFirstChild="(Flag,string,boolean)=>(any)",
    FindFirstChildOfClass="(Flag,string)=>(any)",
    FindFirstChildWhichIsA="(Flag,string,boolean)=>(any)",
    GetAttribute="(Flag,string)=>(any)",
    GetAttributeChangedSignal="(Flag,string)=>(any)",
    GetAttributes="(Flag)=>(any)",
    GetChildren="(Flag)=>(any)",
    GetDebugId="(Flag,number)=>(string)",
    GetDescendants="(Flag)=>(any)",
    GetFullName="(Flag)=>(string)",
    GetPropertyChangedSignal="(Flag,string)=>(any)",
    Grip="CFrame",
    GripForward="Vector3",
    GripPos="Vector3",
    GripRight="Vector3",
    GripUp="Vector3",
    IsA="(Flag,string)=>(boolean)",
    IsAncestorOf="(Flag,any)=>(boolean)",
    IsDescendantOf="(Flag,any)=>(boolean)",
    ManualActivationOnly="boolean",
    Name="string",
    Parent="any",
    Remove="(Flag)=>()",
    RequiresHandle="boolean",
    RobloxLocked="boolean",
    SetAttribute="(Flag,string,any)=>()",
    Tags="any",
    TeamColor="any",
    TextureId="any",
    ToolTip="string",
    Unequipped="Event",
    WaitForChild="(Flag,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Flag)=>(any)",
    className="string",
    clone="(Flag)=>(any)",
    destroy="(Flag)=>()",
    findFirstChild="(Flag,string,boolean)=>(any)",
    getChildren="(Flag)=>(any)",
    isA="(Flag,string)=>(boolean)",
    isDescendantOf="(Flag,any)=>(boolean)",
    remove="(Flag)=>()"}


, FlagStand={
    AncestryChanged="Event",
    Anchored="boolean",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BackParamA="number",
    BackParamB="number",
    BackSurface="any",
    BackSurfaceInput="any",
    BottomParamA="number",
    BottomParamB="number",
    BottomSurface="any",
    BottomSurfaceInput="any",
    BreakJoints="(FlagStand)=>()",
    BrickColor="any",
    CFrame="CFrame",
    CanCollide="boolean",
    CanCollideWith="(FlagStand,any)=>(boolean)",
    CanSetNetworkOwnership="(FlagStand)=>(any)",
    CastShadow="boolean",
    CenterOfMass="Vector3",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(FlagStand)=>()",
    Clone="(FlagStand)=>(any)",
    CollisionGroupId="number",
    Color="Color3",
    Color3uint8="any",
    CustomPhysicalProperties="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(FlagStand)=>()",
    DraggingV1="boolean",
    Elasticity="number",
    FindFirstAncestor="(FlagStand,string)=>(any)",
    FindFirstAncestorOfClass="(FlagStand,string)=>(any)",
    FindFirstAncestorWhichIsA="(FlagStand,string)=>(any)",
    FindFirstChild="(FlagStand,string,boolean)=>(any)",
    FindFirstChildOfClass="(FlagStand,string)=>(any)",
    FindFirstChildWhichIsA="(FlagStand,string,boolean)=>(any)",
    FlagCaptured="Event",
    FormFactor="any",
    Friction="number",
    FrontParamA="number",
    FrontParamB="number",
    FrontSurface="any",
    FrontSurfaceInput="any",
    GetAttribute="(FlagStand,string)=>(any)",
    GetAttributeChangedSignal="(FlagStand,string)=>(any)",
    GetAttributes="(FlagStand)=>(any)",
    GetChildren="(FlagStand)=>(any)",
    GetConnectedParts="(FlagStand,boolean)=>(any)",
    GetDebugId="(FlagStand,number)=>(string)",
    GetDescendants="(FlagStand)=>(any)",
    GetFullName="(FlagStand)=>(string)",
    GetJoints="(FlagStand)=>(any)",
    GetMass="(FlagStand)=>(number)",
    GetNetworkOwner="(FlagStand)=>(any)",
    GetNetworkOwnershipAuto="(FlagStand)=>(boolean)",
    GetPropertyChangedSignal="(FlagStand,string)=>(any)",
    GetRenderCFrame="(FlagStand)=>(CFrame)",
    GetRootPart="(FlagStand)=>(any)",
    GetTouchingParts="(FlagStand)=>(any)",
    IsA="(FlagStand,string)=>(boolean)",
    IsAncestorOf="(FlagStand,any)=>(boolean)",
    IsDescendantOf="(FlagStand,any)=>(boolean)",
    IsGrounded="(FlagStand)=>(boolean)",
    LeftParamA="number",
    LeftParamB="number",
    LeftSurface="any",
    LeftSurfaceInput="any",
    LocalSimulationTouched="Event",
    LocalTransparencyModifier="number",
    Locked="boolean",
    MakeJoints="(FlagStand)=>()",
    Massless="boolean",
    Material="any",
    Name="string",
    NetworkIsSleeping="boolean",
    NetworkOwnerChanged="Event",
    NetworkOwnerV3="any",
    NetworkOwnershipRule="any",
    Orientation="Vector3",
    OutfitChanged="Event",
    Parent="any",
    Position="Vector3",
    ReceiveAge="number",
    Reflectance="number",
    Remove="(FlagStand)=>()",
    Resize="(FlagStand,any,number)=>(boolean)",
    ResizeIncrement="number",
    ResizeableFaces="any",
    RightParamA="number",
    RightParamB="number",
    RightSurface="any",
    RightSurfaceInput="any",
    RobloxLocked="boolean",
    RootPriority="number",
    RotVelocity="Vector3",
    Rotation="Vector3",
    SetAttribute="(FlagStand,string,any)=>()",
    SetNetworkOwner="(FlagStand,any)=>()",
    SetNetworkOwnershipAuto="(FlagStand)=>()",
    Shape="any",
    Size="Vector3",
    SpecificGravity="number",
    StoppedTouching="Event",
    SubtractAsync="(FlagStand,any,any,any)=>(any)",
    Tags="any",
    TeamColor="any",
    TopParamA="number",
    TopParamB="number",
    TopSurface="any",
    TopSurfaceInput="any",
    TouchEnded="Event",
    Touched="Event",
    Transparency="number",
    UnionAsync="(FlagStand,any,any,any)=>(any)",
    Velocity="Vector3",
    WaitForChild="(FlagStand,string,number)=>(any)",
    archivable="boolean",
    breakJoints="(FlagStand)=>()",
    brickColor="any",
    childAdded="Event",
    children="(FlagStand)=>(any)",
    className="string",
    clone="(FlagStand)=>(any)",
    destroy="(FlagStand)=>()",
    findFirstChild="(FlagStand,string,boolean)=>(any)",
    formFactor="any",
    formFactorRaw="any",
    getChildren="(FlagStand)=>(any)",
    getMass="(FlagStand)=>(number)",
    isA="(FlagStand,string)=>(boolean)",
    isDescendantOf="(FlagStand,any)=>(boolean)",
    makeJoints="(FlagStand)=>()",
    remove="(FlagStand)=>()",
    resize="(FlagStand,any,number)=>(boolean)",
    shap="any",
    shape="any",
    siz="Vector3",
    size="Vector3",
    touched="Event"}


, FlagStandService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(FlagStandService)=>()",
    Clone="(FlagStandService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(FlagStandService)=>()",
    FindFirstAncestor="(FlagStandService,string)=>(any)",
    FindFirstAncestorOfClass="(FlagStandService,string)=>(any)",
    FindFirstAncestorWhichIsA="(FlagStandService,string)=>(any)",
    FindFirstChild="(FlagStandService,string,boolean)=>(any)",
    FindFirstChildOfClass="(FlagStandService,string)=>(any)",
    FindFirstChildWhichIsA="(FlagStandService,string,boolean)=>(any)",
    GetAttribute="(FlagStandService,string)=>(any)",
    GetAttributeChangedSignal="(FlagStandService,string)=>(any)",
    GetAttributes="(FlagStandService)=>(any)",
    GetChildren="(FlagStandService)=>(any)",
    GetDebugId="(FlagStandService,number)=>(string)",
    GetDescendants="(FlagStandService)=>(any)",
    GetFullName="(FlagStandService)=>(string)",
    GetPropertyChangedSignal="(FlagStandService,string)=>(any)",
    IsA="(FlagStandService,string)=>(boolean)",
    IsAncestorOf="(FlagStandService,any)=>(boolean)",
    IsDescendantOf="(FlagStandService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(FlagStandService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(FlagStandService,string,any)=>()",
    Tags="any",
    WaitForChild="(FlagStandService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(FlagStandService)=>(any)",
    className="string",
    clone="(FlagStandService)=>(any)",
    destroy="(FlagStandService)=>()",
    findFirstChild="(FlagStandService,string,boolean)=>(any)",
    getChildren="(FlagStandService)=>(any)",
    isA="(FlagStandService,string)=>(boolean)",
    isDescendantOf="(FlagStandService,any)=>(boolean)",
    remove="(FlagStandService)=>()"}


, FlangeSoundEffect={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(FlangeSoundEffect)=>()",
    Clone="(FlangeSoundEffect)=>(any)",
    DataCost="number",
    Depth="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(FlangeSoundEffect)=>()",
    Enabled="boolean",
    FindFirstAncestor="(FlangeSoundEffect,string)=>(any)",
    FindFirstAncestorOfClass="(FlangeSoundEffect,string)=>(any)",
    FindFirstAncestorWhichIsA="(FlangeSoundEffect,string)=>(any)",
    FindFirstChild="(FlangeSoundEffect,string,boolean)=>(any)",
    FindFirstChildOfClass="(FlangeSoundEffect,string)=>(any)",
    FindFirstChildWhichIsA="(FlangeSoundEffect,string,boolean)=>(any)",
    GetAttribute="(FlangeSoundEffect,string)=>(any)",
    GetAttributeChangedSignal="(FlangeSoundEffect,string)=>(any)",
    GetAttributes="(FlangeSoundEffect)=>(any)",
    GetChildren="(FlangeSoundEffect)=>(any)",
    GetDebugId="(FlangeSoundEffect,number)=>(string)",
    GetDescendants="(FlangeSoundEffect)=>(any)",
    GetFullName="(FlangeSoundEffect)=>(string)",
    GetPropertyChangedSignal="(FlangeSoundEffect,string)=>(any)",
    IsA="(FlangeSoundEffect,string)=>(boolean)",
    IsAncestorOf="(FlangeSoundEffect,any)=>(boolean)",
    IsDescendantOf="(FlangeSoundEffect,any)=>(boolean)",
    Mix="number",
    Name="string",
    Parent="any",
    Priority="number",
    Rate="number",
    Remove="(FlangeSoundEffect)=>()",
    RobloxLocked="boolean",
    SetAttribute="(FlangeSoundEffect,string,any)=>()",
    Tags="any",
    WaitForChild="(FlangeSoundEffect,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(FlangeSoundEffect)=>(any)",
    className="string",
    clone="(FlangeSoundEffect)=>(any)",
    destroy="(FlangeSoundEffect)=>()",
    findFirstChild="(FlangeSoundEffect,string,boolean)=>(any)",
    getChildren="(FlangeSoundEffect)=>(any)",
    isA="(FlangeSoundEffect,string)=>(boolean)",
    isDescendantOf="(FlangeSoundEffect,any)=>(boolean)",
    remove="(FlangeSoundEffect)=>()"}


, FlyweightService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(FlyweightService)=>()",
    Clone="(FlyweightService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(FlyweightService)=>()",
    FindFirstAncestor="(FlyweightService,string)=>(any)",
    FindFirstAncestorOfClass="(FlyweightService,string)=>(any)",
    FindFirstAncestorWhichIsA="(FlyweightService,string)=>(any)",
    FindFirstChild="(FlyweightService,string,boolean)=>(any)",
    FindFirstChildOfClass="(FlyweightService,string)=>(any)",
    FindFirstChildWhichIsA="(FlyweightService,string,boolean)=>(any)",
    GetAttribute="(FlyweightService,string)=>(any)",
    GetAttributeChangedSignal="(FlyweightService,string)=>(any)",
    GetAttributes="(FlyweightService)=>(any)",
    GetChildren="(FlyweightService)=>(any)",
    GetDebugId="(FlyweightService,number)=>(string)",
    GetDescendants="(FlyweightService)=>(any)",
    GetFullName="(FlyweightService)=>(string)",
    GetPropertyChangedSignal="(FlyweightService,string)=>(any)",
    IsA="(FlyweightService,string)=>(boolean)",
    IsAncestorOf="(FlyweightService,any)=>(boolean)",
    IsDescendantOf="(FlyweightService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(FlyweightService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(FlyweightService,string,any)=>()",
    Tags="any",
    WaitForChild="(FlyweightService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(FlyweightService)=>(any)",
    className="string",
    clone="(FlyweightService)=>(any)",
    destroy="(FlyweightService)=>()",
    findFirstChild="(FlyweightService,string,boolean)=>(any)",
    getChildren="(FlyweightService)=>(any)",
    isA="(FlyweightService,string)=>(boolean)",
    isDescendantOf="(FlyweightService,any)=>(boolean)",
    remove="(FlyweightService)=>()"}


, Folder={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Folder)=>()",
    Clone="(Folder)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Folder)=>()",
    FindFirstAncestor="(Folder,string)=>(any)",
    FindFirstAncestorOfClass="(Folder,string)=>(any)",
    FindFirstAncestorWhichIsA="(Folder,string)=>(any)",
    FindFirstChild="(Folder,string,boolean)=>(any)",
    FindFirstChildOfClass="(Folder,string)=>(any)",
    FindFirstChildWhichIsA="(Folder,string,boolean)=>(any)",
    GetAttribute="(Folder,string)=>(any)",
    GetAttributeChangedSignal="(Folder,string)=>(any)",
    GetAttributes="(Folder)=>(any)",
    GetChildren="(Folder)=>(any)",
    GetDebugId="(Folder,number)=>(string)",
    GetDescendants="(Folder)=>(any)",
    GetFullName="(Folder)=>(string)",
    GetPropertyChangedSignal="(Folder,string)=>(any)",
    IsA="(Folder,string)=>(boolean)",
    IsAncestorOf="(Folder,any)=>(boolean)",
    IsDescendantOf="(Folder,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Folder)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Folder,string,any)=>()",
    Tags="any",
    WaitForChild="(Folder,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Folder)=>(any)",
    className="string",
    clone="(Folder)=>(any)",
    destroy="(Folder)=>()",
    findFirstChild="(Folder,string,boolean)=>(any)",
    getChildren="(Folder)=>(any)",
    isA="(Folder,string)=>(boolean)",
    isDescendantOf="(Folder,any)=>(boolean)",
    remove="(Folder)=>()"}


, PrismaticConstraint={
    Active="boolean",
    Actuator,="any",
    AncestryChanged="Event",
    Archivable="boolean",
    Attachment0="any",
    Attachment1="any",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PrismaticConstraint)=>()",
    Clone="(PrismaticConstraint)=>(any)",
    Color="any",
    CurrentPosition="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PrismaticConstraint)=>()",
    Enabled="boolean",
    FindFirstAncestor="(PrismaticConstraint,string)=>(any)",
    FindFirstAncestorOfClass="(PrismaticConstraint,string)=>(any)",
    FindFirstAncestorWhichIsA="(PrismaticConstraint,string)=>(any)",
    FindFirstChild="(PrismaticConstraint,string,boolean)=>(any)",
    FindFirstChildOfClass="(PrismaticConstraint,string)=>(any)",
    FindFirstChildWhichIsA="(PrismaticConstraint,string,boolean)=>(any)",
    GetAttribute="(PrismaticConstraint,string)=>(any)",
    GetAttributeChangedSignal="(PrismaticConstraint,string)=>(any)",
    GetAttributes="(PrismaticConstraint)=>(any)",
    GetChildren="(PrismaticConstraint)=>(any)",
    GetDebugId="(PrismaticConstraint,number)=>(string)",
    GetDescendants="(PrismaticConstraint)=>(any)",
    GetFullName="(PrismaticConstraint)=>(string)",
    GetPropertyChangedSignal="(PrismaticConstraint,string)=>(any)",
    IsA="(PrismaticConstraint,string)=>(boolean)",
    IsAncestorOf="(PrismaticConstraint,any)=>(boolean)",
    IsDescendantOf="(PrismaticConstraint,any)=>(boolean)",
    LimitsEnabled="boolean",
    LowerLimit="number",
    MotorMaxAcceleration="number",
    MotorMaxForce="number",
    Name="string",
    Parent="any",
    Remove="(PrismaticConstraint)=>()",
    Restitution="number",
    RobloxLocked="boolean",
    ServoMaxForce="number",
    SetAttribute="(PrismaticConstraint,string,any)=>()",
    Size="number",
    Speed="number",
    Tags="any",
    TargetPosition="number",
    UpperLimit="number",
    Velocity="number",
    Visible="boolean",
    WaitForChild="(PrismaticConstraint,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PrismaticConstraint)=>(any)",
    className="string",
    clone="(PrismaticConstraint)=>(any)",
    destroy="(PrismaticConstraint)=>()",
    findFirstChild="(PrismaticConstraint,string,boolean)=>(any)",
    getChildren="(PrismaticConstraint)=>(any)",
    isA="(PrismaticConstraint,string)=>(boolean)",
    isDescendantOf="(PrismaticConstraint,any)=>(boolean)",
    remove="(PrismaticConstraint)=>()"}


, Motor6D={
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    C0="CFrame",
    C1="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Motor6D)=>()",
    Clone="(Motor6D)=>(any)",
    CurrentAngle="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    DesiredAngle="number",
    Destroy="(Motor6D)=>()",
    Enabled="boolean",
    FindFirstAncestor="(Motor6D,string)=>(any)",
    FindFirstAncestorOfClass="(Motor6D,string)=>(any)",
    FindFirstAncestorWhichIsA="(Motor6D,string)=>(any)",
    FindFirstChild="(Motor6D,string,boolean)=>(any)",
    FindFirstChildOfClass="(Motor6D,string)=>(any)",
    FindFirstChildWhichIsA="(Motor6D,string,boolean)=>(any)",
    GetAttribute="(Motor6D,string)=>(any)",
    GetAttributeChangedSignal="(Motor6D,string)=>(any)",
    GetAttributes="(Motor6D)=>(any)",
    GetChildren="(Motor6D)=>(any)",
    GetDebugId="(Motor6D,number)=>(string)",
    GetDescendants="(Motor6D)=>(any)",
    GetFullName="(Motor6D)=>(string)",
    GetPropertyChangedSignal="(Motor6D,string)=>(any)",
    IsA="(Motor6D,string)=>(boolean)",
    IsAncestorOf="(Motor6D,any)=>(boolean)",
    IsAutoJoint="boolean",
    IsDescendantOf="(Motor6D,any)=>(boolean)",
    MaxVelocity="number",
    Name="string",
    Parent="any",
    Part0="any",
    Part1="any",
    Remove="(Motor6D)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Motor6D,string,any)=>()",
    SetDesiredAngle="(Motor6D,number)=>()",
    Tags="any",
    Transform="CFrame",
    WaitForChild="(Motor6D,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Motor6D)=>(any)",
    className="string",
    clone="(Motor6D)=>(any)",
    destroy="(Motor6D)=>()",
    findFirstChild="(Motor6D,string,boolean)=>(any)",
    getChildren="(Motor6D)=>(any)",
    isA="(Motor6D,string)=>(boolean)",
    isDescendantOf="(Motor6D,any)=>(boolean)",
    part1="any",
    remove="(Motor6D)=>()"}


, FunctionalTest={
    AllowSleep="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(FunctionalTest)=>()",
    Clone="(FunctionalTest)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Description="string",
    Destroy="(FunctionalTest)=>()",
    Error="(FunctionalTest,string)=>()",
    Failed="(FunctionalTest,string)=>()",
    FindFirstAncestor="(FunctionalTest,string)=>(any)",
    FindFirstAncestorOfClass="(FunctionalTest,string)=>(any)",
    FindFirstAncestorWhichIsA="(FunctionalTest,string)=>(any)",
    FindFirstChild="(FunctionalTest,string,boolean)=>(any)",
    FindFirstChildOfClass="(FunctionalTest,string)=>(any)",
    FindFirstChildWhichIsA="(FunctionalTest,string,boolean)=>(any)",
    GetAttribute="(FunctionalTest,string)=>(any)",
    GetAttributeChangedSignal="(FunctionalTest,string)=>(any)",
    GetAttributes="(FunctionalTest)=>(any)",
    GetChildren="(FunctionalTest)=>(any)",
    GetDebugId="(FunctionalTest,number)=>(string)",
    GetDescendants="(FunctionalTest)=>(any)",
    GetFullName="(FunctionalTest)=>(string)",
    GetPropertyChangedSignal="(FunctionalTest,string)=>(any)",
    HasMigratedSettingsToTestService="boolean",
    Is30FpsThrottleEnabled="boolean",
    IsA="(FunctionalTest,string)=>(boolean)",
    IsAncestorOf="(FunctionalTest,any)=>(boolean)",
    IsDescendantOf="(FunctionalTest,any)=>(boolean)",
    Name="string",
    Parent="any",
    Pass="(FunctionalTest,string)=>()",
    Passed="(FunctionalTest,string)=>()",
    PhysicsEnvironmentalThrottle="boolean",
    Remove="(FunctionalTest)=>()",
    RobloxLocked="boolean",
    SetAttribute="(FunctionalTest,string,any)=>()",
    Tags="any",
    Timeout="number",
    WaitForChild="(FunctionalTest,string,number)=>(any)",
    Warn="(FunctionalTest,string)=>()",
    archivable="boolean",
    childAdded="Event",
    children="(FunctionalTest)=>(any)",
    className="string",
    clone="(FunctionalTest)=>(any)",
    destroy="(FunctionalTest)=>()",
    findFirstChild="(FunctionalTest,string,boolean)=>(any)",
    getChildren="(FunctionalTest)=>(any)",
    isA="(FunctionalTest,string)=>(boolean)",
    isDescendantOf="(FunctionalTest,any)=>(boolean)",
    remove="(FunctionalTest)=>()"}


, ForceField={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ForceField)=>()",
    Clone="(ForceField)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ForceField)=>()",
    FindFirstAncestor="(ForceField,string)=>(any)",
    FindFirstAncestorOfClass="(ForceField,string)=>(any)",
    FindFirstAncestorWhichIsA="(ForceField,string)=>(any)",
    FindFirstChild="(ForceField,string,boolean)=>(any)",
    FindFirstChildOfClass="(ForceField,string)=>(any)",
    FindFirstChildWhichIsA="(ForceField,string,boolean)=>(any)",
    GetAttribute="(ForceField,string)=>(any)",
    GetAttributeChangedSignal="(ForceField,string)=>(any)",
    GetAttributes="(ForceField)=>(any)",
    GetChildren="(ForceField)=>(any)",
    GetDebugId="(ForceField,number)=>(string)",
    GetDescendants="(ForceField)=>(any)",
    GetFullName="(ForceField)=>(string)",
    GetPropertyChangedSignal="(ForceField,string)=>(any)",
    IsA="(ForceField,string)=>(boolean)",
    IsAncestorOf="(ForceField,any)=>(boolean)",
    IsDescendantOf="(ForceField,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(ForceField)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ForceField,string,any)=>()",
    Tags="any",
    Visible="boolean",
    WaitForChild="(ForceField,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ForceField)=>(any)",
    className="string",
    clone="(ForceField)=>(any)",
    destroy="(ForceField)=>()",
    findFirstChild="(ForceField,string,boolean)=>(any)",
    getChildren="(ForceField)=>(any)",
    isA="(ForceField,string)=>(boolean)",
    isDescendantOf="(ForceField,any)=>(boolean)",
    remove="(ForceField)=>()"}


, PointsService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AwardPoints="(PointsService,number,number)=>(any)",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PointsService)=>()",
    Clone="(PointsService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PointsService)=>()",
    FindFirstAncestor="(PointsService,string)=>(any)",
    FindFirstAncestorOfClass="(PointsService,string)=>(any)",
    FindFirstAncestorWhichIsA="(PointsService,string)=>(any)",
    FindFirstChild="(PointsService,string,boolean)=>(any)",
    FindFirstChildOfClass="(PointsService,string)=>(any)",
    FindFirstChildWhichIsA="(PointsService,string,boolean)=>(any)",
    GetAttribute="(PointsService,string)=>(any)",
    GetAttributeChangedSignal="(PointsService,string)=>(any)",
    GetAttributes="(PointsService)=>(any)",
    GetAwardablePoints="(PointsService)=>(number)",
    GetChildren="(PointsService)=>(any)",
    GetDebugId="(PointsService,number)=>(string)",
    GetDescendants="(PointsService)=>(any)",
    GetFullName="(PointsService)=>(string)",
    GetGamePointBalance="(PointsService,number)=>(number)",
    GetPointBalance="(PointsService,number)=>(number)",
    GetPropertyChangedSignal="(PointsService,string)=>(any)",
    IsA="(PointsService,string)=>(boolean)",
    IsAncestorOf="(PointsService,any)=>(boolean)",
    IsDescendantOf="(PointsService,any)=>(boolean)",
    Name="string",
    Parent="any",
    PointsAwarded="Event",
    Remove="(PointsService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PointsService,string,any)=>()",
    Tags="any",
    WaitForChild="(PointsService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PointsService)=>(any)",
    className="string",
    clone="(PointsService)=>(any)",
    destroy="(PointsService)=>()",
    findFirstChild="(PointsService,string,boolean)=>(any)",
    getChildren="(PointsService)=>(any)",
    isA="(PointsService,string)=>(boolean)",
    isDescendantOf="(PointsService,any)=>(boolean)",
    remove="(PointsService)=>()"}


, FormFactorPart={
    AncestryChanged="Event",
    Anchored="boolean",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BackParamA="number",
    BackParamB="number",
    BackSurface="any",
    BackSurfaceInput="any",
    BottomParamA="number",
    BottomParamB="number",
    BottomSurface="any",
    BottomSurfaceInput="any",
    BreakJoints="(FormFactorPart)=>()",
    BrickColor="any",
    CFrame="CFrame",
    CanCollide="boolean",
    CanCollideWith="(FormFactorPart,any)=>(boolean)",
    CanSetNetworkOwnership="(FormFactorPart)=>(any)",
    CastShadow="boolean",
    CenterOfMass="Vector3",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(FormFactorPart)=>()",
    Clone="(FormFactorPart)=>(any)",
    CollisionGroupId="number",
    Color="Color3",
    Color3uint8="any",
    CustomPhysicalProperties="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(FormFactorPart)=>()",
    DraggingV1="boolean",
    Elasticity="number",
    FindFirstAncestor="(FormFactorPart,string)=>(any)",
    FindFirstAncestorOfClass="(FormFactorPart,string)=>(any)",
    FindFirstAncestorWhichIsA="(FormFactorPart,string)=>(any)",
    FindFirstChild="(FormFactorPart,string,boolean)=>(any)",
    FindFirstChildOfClass="(FormFactorPart,string)=>(any)",
    FindFirstChildWhichIsA="(FormFactorPart,string,boolean)=>(any)",
    FormFactor="any",
    Friction="number",
    FrontParamA="number",
    FrontParamB="number",
    FrontSurface="any",
    FrontSurfaceInput="any",
    GetAttribute="(FormFactorPart,string)=>(any)",
    GetAttributeChangedSignal="(FormFactorPart,string)=>(any)",
    GetAttributes="(FormFactorPart)=>(any)",
    GetChildren="(FormFactorPart)=>(any)",
    GetConnectedParts="(FormFactorPart,boolean)=>(any)",
    GetDebugId="(FormFactorPart,number)=>(string)",
    GetDescendants="(FormFactorPart)=>(any)",
    GetFullName="(FormFactorPart)=>(string)",
    GetJoints="(FormFactorPart)=>(any)",
    GetMass="(FormFactorPart)=>(number)",
    GetNetworkOwner="(FormFactorPart)=>(any)",
    GetNetworkOwnershipAuto="(FormFactorPart)=>(boolean)",
    GetPropertyChangedSignal="(FormFactorPart,string)=>(any)",
    GetRenderCFrame="(FormFactorPart)=>(CFrame)",
    GetRootPart="(FormFactorPart)=>(any)",
    GetTouchingParts="(FormFactorPart)=>(any)",
    IsA="(FormFactorPart,string)=>(boolean)",
    IsAncestorOf="(FormFactorPart,any)=>(boolean)",
    IsDescendantOf="(FormFactorPart,any)=>(boolean)",
    IsGrounded="(FormFactorPart)=>(boolean)",
    LeftParamA="number",
    LeftParamB="number",
    LeftSurface="any",
    LeftSurfaceInput="any",
    LocalSimulationTouched="Event",
    LocalTransparencyModifier="number",
    Locked="boolean",
    MakeJoints="(FormFactorPart)=>()",
    Massless="boolean",
    Material="any",
    Name="string",
    NetworkIsSleeping="boolean",
    NetworkOwnerChanged="Event",
    NetworkOwnerV3="any",
    NetworkOwnershipRule="any",
    Orientation="Vector3",
    OutfitChanged="Event",
    Parent="any",
    Position="Vector3",
    ReceiveAge="number",
    Reflectance="number",
    Remove="(FormFactorPart)=>()",
    Resize="(FormFactorPart,any,number)=>(boolean)",
    ResizeIncrement="number",
    ResizeableFaces="any",
    RightParamA="number",
    RightParamB="number",
    RightSurface="any",
    RightSurfaceInput="any",
    RobloxLocked="boolean",
    RootPriority="number",
    RotVelocity="Vector3",
    Rotation="Vector3",
    SetAttribute="(FormFactorPart,string,any)=>()",
    SetNetworkOwner="(FormFactorPart,any)=>()",
    SetNetworkOwnershipAuto="(FormFactorPart)=>()",
    Size="Vector3",
    SpecificGravity="number",
    StoppedTouching="Event",
    SubtractAsync="(FormFactorPart,any,any,any)=>(any)",
    Tags="any",
    TopParamA="number",
    TopParamB="number",
    TopSurface="any",
    TopSurfaceInput="any",
    TouchEnded="Event",
    Touched="Event",
    Transparency="number",
    UnionAsync="(FormFactorPart,any,any,any)=>(any)",
    Velocity="Vector3",
    WaitForChild="(FormFactorPart,string,number)=>(any)",
    archivable="boolean",
    breakJoints="(FormFactorPart)=>()",
    brickColor="any",
    childAdded="Event",
    children="(FormFactorPart)=>(any)",
    className="string",
    clone="(FormFactorPart)=>(any)",
    destroy="(FormFactorPart)=>()",
    findFirstChild="(FormFactorPart,string,boolean)=>(any)",
    formFactor="any",
    formFactorRaw="any",
    getChildren="(FormFactorPart)=>(any)",
    getMass="(FormFactorPart)=>(number)",
    isA="(FormFactorPart,string)=>(boolean)",
    isDescendantOf="(FormFactorPart,any)=>(boolean)",
    makeJoints="(FormFactorPart)=>()",
    remove="(FormFactorPart)=>()",
    resize="(FormFactorPart,any,number)=>(boolean)",
    siz="Vector3",
    size="Vector3",
    touched="Event"}


, Frame={
    AbsolutePosition="Vector2",
    AbsoluteRotation="number",
    AbsoluteSize="Vector2",
    Active="boolean",
    AncestryChanged="Event",
    AnchorPoint="Vector2",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoLocalize="boolean",
    BackgroundColor="any",
    BackgroundColor3="Color3",
    BackgroundTransparency="number",
    BorderColor="any",
    BorderColor3="Color3",
    BorderMode="any",
    BorderSizePixel="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Frame)=>()",
    ClipsDescendants="boolean",
    Clone="(Frame)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Frame)=>()",
    DragBegin="Event",
    DragBeginConnectionCount="number",
    DragStopped="Event",
    DragStoppedConnectionCount="number",
    Draggable="boolean",
    FindFirstAncestor="(Frame,string)=>(any)",
    FindFirstAncestorOfClass="(Frame,string)=>(any)",
    FindFirstAncestorWhichIsA="(Frame,string)=>(any)",
    FindFirstChild="(Frame,string,boolean)=>(any)",
    FindFirstChildOfClass="(Frame,string)=>(any)",
    FindFirstChildWhichIsA="(Frame,string,boolean)=>(any)",
    GetAttribute="(Frame,string)=>(any)",
    GetAttributeChangedSignal="(Frame,string)=>(any)",
    GetAttributes="(Frame)=>(any)",
    GetChildren="(Frame)=>(any)",
    GetDebugId="(Frame,number)=>(string)",
    GetDescendants="(Frame)=>(any)",
    GetFullName="(Frame)=>(string)",
    GetPropertyChangedSignal="(Frame,string)=>(any)",
    InputBegan="Event",
    InputChanged="Event",
    InputEnded="Event",
    IsA="(Frame,string)=>(boolean)",
    IsAncestorOf="(Frame,any)=>(boolean)",
    IsDescendantOf="(Frame,any)=>(boolean)",
    IsNotOccluded="boolean",
    LayoutOrder="number",
    Localize="boolean",
    MouseEnter="Event",
    MouseEnterConnectionCount="number",
    MouseLeave="Event",
    MouseLeaveConnectionCount="number",
    MouseMoved="Event",
    MouseMovedConnectionCount="number",
    MouseWheelBackward="Event",
    MouseWheelBackwardConnectionCount="number",
    MouseWheelForward="Event",
    MouseWheelForwardConnectionCount="number",
    Name="string",
    NextSelectionDown="any",
    NextSelectionLeft="any",
    NextSelectionRight="any",
    NextSelectionUp="any",
    Parent="any",
    Position="UDim2",
    Remove="(Frame)=>()",
    RobloxLocked="boolean",
    RootLocalizationTable="any",
    Rotation="number",
    Selectable="boolean",
    SelectionGained="Event",
    SelectionImageObject="any",
    SelectionLost="Event",
    SetAttribute="(Frame,string,any)=>()",
    Size="UDim2",
    SizeConstraint="any",
    Style="any",
    Tags="any",
    TouchLongPress="Event",
    TouchPan="Event",
    TouchPinch="Event",
    TouchRotate="Event",
    TouchSwipe="Event",
    TouchTap="Event",
    Transparency="number",
    TweenPosition="(Frame,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSize="(Frame,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSizeAndPosition="(Frame,UDim2,UDim2,any,any,number,boolean,any)=>(boolean)",
    Visible="boolean",
    WaitForChild="(Frame,string,number)=>(any)",
    ZIndex="number",
    archivable="boolean",
    childAdded="Event",
    children="(Frame)=>(any)",
    className="string",
    clone="(Frame)=>(any)",
    destroy="(Frame)=>()",
    findFirstChild="(Frame,string,boolean)=>(any)",
    getChildren="(Frame)=>(any)",
    isA="(Frame,string)=>(boolean)",
    isDescendantOf="(Frame,any)=>(boolean)",
    remove="(Frame)=>()"}


, StandalonePluginScripts={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(StandalonePluginScripts)=>()",
    Clone="(StandalonePluginScripts)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(StandalonePluginScripts)=>()",
    FindFirstAncestor="(StandalonePluginScripts,string)=>(any)",
    FindFirstAncestorOfClass="(StandalonePluginScripts,string)=>(any)",
    FindFirstAncestorWhichIsA="(StandalonePluginScripts,string)=>(any)",
    FindFirstChild="(StandalonePluginScripts,string,boolean)=>(any)",
    FindFirstChildOfClass="(StandalonePluginScripts,string)=>(any)",
    FindFirstChildWhichIsA="(StandalonePluginScripts,string,boolean)=>(any)",
    GetAttribute="(StandalonePluginScripts,string)=>(any)",
    GetAttributeChangedSignal="(StandalonePluginScripts,string)=>(any)",
    GetAttributes="(StandalonePluginScripts)=>(any)",
    GetChildren="(StandalonePluginScripts)=>(any)",
    GetDebugId="(StandalonePluginScripts,number)=>(string)",
    GetDescendants="(StandalonePluginScripts)=>(any)",
    GetFullName="(StandalonePluginScripts)=>(string)",
    GetPropertyChangedSignal="(StandalonePluginScripts,string)=>(any)",
    IsA="(StandalonePluginScripts,string)=>(boolean)",
    IsAncestorOf="(StandalonePluginScripts,any)=>(boolean)",
    IsDescendantOf="(StandalonePluginScripts,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(StandalonePluginScripts)=>()",
    RobloxLocked="boolean",
    SetAttribute="(StandalonePluginScripts,string,any)=>()",
    Tags="any",
    WaitForChild="(StandalonePluginScripts,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(StandalonePluginScripts)=>(any)",
    className="string",
    clone="(StandalonePluginScripts)=>(any)",
    destroy="(StandalonePluginScripts)=>()",
    findFirstChild="(StandalonePluginScripts,string,boolean)=>(any)",
    getChildren="(StandalonePluginScripts)=>(any)",
    isA="(StandalonePluginScripts,string)=>(boolean)",
    isDescendantOf="(StandalonePluginScripts,any)=>(boolean)",
    remove="(StandalonePluginScripts)=>()"}


, FriendPages={
    AdvanceToNextPageAsync="(FriendPages)=>()",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(FriendPages)=>()",
    Clone="(FriendPages)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(FriendPages)=>()",
    FindFirstAncestor="(FriendPages,string)=>(any)",
    FindFirstAncestorOfClass="(FriendPages,string)=>(any)",
    FindFirstAncestorWhichIsA="(FriendPages,string)=>(any)",
    FindFirstChild="(FriendPages,string,boolean)=>(any)",
    FindFirstChildOfClass="(FriendPages,string)=>(any)",
    FindFirstChildWhichIsA="(FriendPages,string,boolean)=>(any)",
    GetAttribute="(FriendPages,string)=>(any)",
    GetAttributeChangedSignal="(FriendPages,string)=>(any)",
    GetAttributes="(FriendPages)=>(any)",
    GetChildren="(FriendPages)=>(any)",
    GetCurrentPage="(FriendPages)=>(any)",
    GetDebugId="(FriendPages,number)=>(string)",
    GetDescendants="(FriendPages)=>(any)",
    GetFullName="(FriendPages)=>(string)",
    GetPropertyChangedSignal="(FriendPages,string)=>(any)",
    IsA="(FriendPages,string)=>(boolean)",
    IsAncestorOf="(FriendPages,any)=>(boolean)",
    IsDescendantOf="(FriendPages,any)=>(boolean)",
    IsFinished="boolean",
    Name="string",
    Parent="any",
    Remove="(FriendPages)=>()",
    RobloxLocked="boolean",
    SetAttribute="(FriendPages,string,any)=>()",
    Tags="any",
    WaitForChild="(FriendPages,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(FriendPages)=>(any)",
    className="string",
    clone="(FriendPages)=>(any)",
    destroy="(FriendPages)=>()",
    findFirstChild="(FriendPages,string,boolean)=>(any)",
    getChildren="(FriendPages)=>(any)",
    isA="(FriendPages,string)=>(boolean)",
    isDescendantOf="(FriendPages,any)=>(boolean)",
    remove="(FriendPages)=>()"}


, FriendService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(FriendService)=>()",
    Clone="(FriendService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(FriendService)=>()",
    FindFirstAncestor="(FriendService,string)=>(any)",
    FindFirstAncestorOfClass="(FriendService,string)=>(any)",
    FindFirstAncestorWhichIsA="(FriendService,string)=>(any)",
    FindFirstChild="(FriendService,string,boolean)=>(any)",
    FindFirstChildOfClass="(FriendService,string)=>(any)",
    FindFirstChildWhichIsA="(FriendService,string,boolean)=>(any)",
    FriendsUpdated="Event",
    GetAttribute="(FriendService,string)=>(any)",
    GetAttributeChangedSignal="(FriendService,string)=>(any)",
    GetAttributes="(FriendService)=>(any)",
    GetChildren="(FriendService)=>(any)",
    GetDebugId="(FriendService,number)=>(string)",
    GetDescendants="(FriendService)=>(any)",
    GetFullName="(FriendService)=>(string)",
    GetPlatformFriends="(FriendService)=>(any)",
    GetPropertyChangedSignal="(FriendService,string)=>(any)",
    IsA="(FriendService,string)=>(boolean)",
    IsAncestorOf="(FriendService,any)=>(boolean)",
    IsDescendantOf="(FriendService,any)=>(boolean)",
    Name="string",
    Parent="any",
    RemoteFriendEventSignal="Event",
    RemoteFriendStatusSignal="Event",
    Remove="(FriendService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(FriendService,string,any)=>()",
    Tags="any",
    WaitForChild="(FriendService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(FriendService)=>(any)",
    className="string",
    clone="(FriendService)=>(any)",
    destroy="(FriendService)=>()",
    findFirstChild="(FriendService,string,boolean)=>(any)",
    getChildren="(FriendService)=>(any)",
    isA="(FriendService,string)=>(boolean)",
    isDescendantOf="(FriendService,any)=>(boolean)",
    remove="(FriendService)=>()"}


, SelectionPartLasso={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SelectionPartLasso)=>()",
    Clone="(SelectionPartLasso)=>(any)",
    Color="any",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SelectionPartLasso)=>()",
    FindFirstAncestor="(SelectionPartLasso,string)=>(any)",
    FindFirstAncestorOfClass="(SelectionPartLasso,string)=>(any)",
    FindFirstAncestorWhichIsA="(SelectionPartLasso,string)=>(any)",
    FindFirstChild="(SelectionPartLasso,string,boolean)=>(any)",
    FindFirstChildOfClass="(SelectionPartLasso,string)=>(any)",
    FindFirstChildWhichIsA="(SelectionPartLasso,string,boolean)=>(any)",
    GetAttribute="(SelectionPartLasso,string)=>(any)",
    GetAttributeChangedSignal="(SelectionPartLasso,string)=>(any)",
    GetAttributes="(SelectionPartLasso)=>(any)",
    GetChildren="(SelectionPartLasso)=>(any)",
    GetDebugId="(SelectionPartLasso,number)=>(string)",
    GetDescendants="(SelectionPartLasso)=>(any)",
    GetFullName="(SelectionPartLasso)=>(string)",
    GetPropertyChangedSignal="(SelectionPartLasso,string)=>(any)",
    Humanoid="any",
    IsA="(SelectionPartLasso,string)=>(boolean)",
    IsAncestorOf="(SelectionPartLasso,any)=>(boolean)",
    IsDescendantOf="(SelectionPartLasso,any)=>(boolean)",
    Name="string",
    Parent="any",
    Part="any",
    Remove="(SelectionPartLasso)=>()",
    RobloxLocked="boolean",
    SetAttribute="(SelectionPartLasso,string,any)=>()",
    Tags="any",
    Transparency="number",
    Visible="boolean",
    WaitForChild="(SelectionPartLasso,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(SelectionPartLasso)=>(any)",
    className="string",
    clone="(SelectionPartLasso)=>(any)",
    destroy="(SelectionPartLasso)=>()",
    findFirstChild="(SelectionPartLasso,string,boolean)=>(any)",
    getChildren="(SelectionPartLasso)=>(any)",
    isA="(SelectionPartLasso,string)=>(boolean)",
    isDescendantOf="(SelectionPartLasso,any)=>(boolean)",
    remove="(SelectionPartLasso)=>()"}


, MessagingService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(MessagingService)=>()",
    Clone="(MessagingService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(MessagingService)=>()",
    FindFirstAncestor="(MessagingService,string)=>(any)",
    FindFirstAncestorOfClass="(MessagingService,string)=>(any)",
    FindFirstAncestorWhichIsA="(MessagingService,string)=>(any)",
    FindFirstChild="(MessagingService,string,boolean)=>(any)",
    FindFirstChildOfClass="(MessagingService,string)=>(any)",
    FindFirstChildWhichIsA="(MessagingService,string,boolean)=>(any)",
    GetAttribute="(MessagingService,string)=>(any)",
    GetAttributeChangedSignal="(MessagingService,string)=>(any)",
    GetAttributes="(MessagingService)=>(any)",
    GetChildren="(MessagingService)=>(any)",
    GetDebugId="(MessagingService,number)=>(string)",
    GetDescendants="(MessagingService)=>(any)",
    GetFullName="(MessagingService)=>(string)",
    GetPropertyChangedSignal="(MessagingService,string)=>(any)",
    IsA="(MessagingService,string)=>(boolean)",
    IsAncestorOf="(MessagingService,any)=>(boolean)",
    IsDescendantOf="(MessagingService,any)=>(boolean)",
    Name="string",
    Parent="any",
    PublishAsync="(MessagingService,string,any)=>()",
    Remove="(MessagingService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(MessagingService,string,any)=>()",
    SubscribeAsync="(MessagingService,string,any)=>(any)",
    Tags="any",
    WaitForChild="(MessagingService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(MessagingService)=>(any)",
    className="string",
    clone="(MessagingService)=>(any)",
    destroy="(MessagingService)=>()",
    findFirstChild="(MessagingService,string,boolean)=>(any)",
    getChildren="(MessagingService)=>(any)",
    isA="(MessagingService,string)=>(boolean)",
    isDescendantOf="(MessagingService,any)=>(boolean)",
    remove="(MessagingService)=>()"}


, GameSettings={
    AdditionalCoreIncludeDirs="string",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BubbleChatLifetime="number",
    BubbleChatMaxBubbles="number",
    Changed="Event",
    ChatHistory="number",
    ChatScrollLength="number",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(GameSettings)=>()",
    Clone="(GameSettings)=>(any)",
    CollisionSoundEnabled="boolean",
    CollisionSoundVolume="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(GameSettings)=>()",
    FindFirstAncestor="(GameSettings,string)=>(any)",
    FindFirstAncestorOfClass="(GameSettings,string)=>(any)",
    FindFirstAncestorWhichIsA="(GameSettings,string)=>(any)",
    FindFirstChild="(GameSettings,string,boolean)=>(any)",
    FindFirstChildOfClass="(GameSettings,string)=>(any)",
    FindFirstChildWhichIsA="(GameSettings,string,boolean)=>(any)",
    GetAttribute="(GameSettings,string)=>(any)",
    GetAttributeChangedSignal="(GameSettings,string)=>(any)",
    GetAttributes="(GameSettings)=>(any)",
    GetChildren="(GameSettings)=>(any)",
    GetDebugId="(GameSettings,number)=>(string)",
    GetDescendants="(GameSettings)=>(any)",
    GetFullName="(GameSettings)=>(string)",
    GetPropertyChangedSignal="(GameSettings,string)=>(any)",
    HardwareMouse="boolean",
    IsA="(GameSettings,string)=>(boolean)",
    IsAncestorOf="(GameSettings,any)=>(boolean)",
    IsDescendantOf="(GameSettings,any)=>(boolean)",
    MaxCollisionSounds="number",
    Name="string",
    OverrideStarterScript="string",
    Parent="any",
    Remove="(GameSettings)=>()",
    ReportAbuseChatHistory="number",
    RobloxLocked="boolean",
    SetAttribute="(GameSettings,string,any)=>()",
    SoftwareSound="boolean",
    Tags="any",
    VideoCaptureEnabled="boolean",
    VideoQuality="any",
    VideoRecordingChangeRequest="Event",
    WaitForChild="(GameSettings,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(GameSettings)=>(any)",
    className="string",
    clone="(GameSettings)=>(any)",
    destroy="(GameSettings)=>()",
    findFirstChild="(GameSettings,string,boolean)=>(any)",
    getChildren="(GameSettings)=>(any)",
    isA="(GameSettings,string)=>(boolean)",
    isDescendantOf="(GameSettings,any)=>(boolean)",
    remove="(GameSettings)=>()"}


, InsertService={
    AllowClientInsertModels="boolean",
    AllowInsertFreeModels="boolean",
    AncestryChanged="Event",
    ApproveAssetId="(InsertService,number)=>()",
    ApproveAssetVersionId="(InsertService,number)=>()",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(InsertService)=>()",
    Clone="(InsertService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(InsertService)=>()",
    FindFirstAncestor="(InsertService,string)=>(any)",
    FindFirstAncestorOfClass="(InsertService,string)=>(any)",
    FindFirstAncestorWhichIsA="(InsertService,string)=>(any)",
    FindFirstChild="(InsertService,string,boolean)=>(any)",
    FindFirstChildOfClass="(InsertService,string)=>(any)",
    FindFirstChildWhichIsA="(InsertService,string,boolean)=>(any)",
    GetAttribute="(InsertService,string)=>(any)",
    GetAttributeChangedSignal="(InsertService,string)=>(any)",
    GetAttributes="(InsertService)=>(any)",
    GetBaseCategories="(InsertService)=>(any)",
    GetBaseSets="(InsertService)=>(any)",
    GetChildren="(InsertService)=>(any)",
    GetCollection="(InsertService,number)=>(any)",
    GetDebugId="(InsertService,number)=>(string)",
    GetDescendants="(InsertService)=>(any)",
    GetFreeDecals="(InsertService,string,number)=>(any)",
    GetFreeModels="(InsertService,string,number)=>(any)",
    GetFullName="(InsertService)=>(string)",
    GetLatestAssetVersionAsync="(InsertService,number)=>(number)",
    GetPropertyChangedSignal="(InsertService,string)=>(any)",
    GetUserCategories="(InsertService,number)=>(any)",
    GetUserSets="(InsertService,number)=>(any)",
    Insert="(InsertService,any)=>()",
    InternalDelete="Event",
    IsA="(InsertService,string)=>(boolean)",
    IsAncestorOf="(InsertService,any)=>(boolean)",
    IsDescendantOf="(InsertService,any)=>(boolean)",
    LoadAsset="(InsertService,number)=>(any)",
    LoadAssetVersion="(InsertService,number)=>(any)",
    LoadLocalAsset="(InsertService,string)=>(any)",
    LoadPackageAsset="(InsertService,any)=>(any)",
    Name="string",
    Parent="any",
    Remove="(InsertService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(InsertService,string,any)=>()",
    Tags="any",
    WaitForChild="(InsertService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(InsertService)=>(any)",
    className="string",
    clone="(InsertService)=>(any)",
    destroy="(InsertService)=>()",
    findFirstChild="(InsertService,string,boolean)=>(any)",
    getChildren="(InsertService)=>(any)",
    isA="(InsertService,string)=>(boolean)",
    isDescendantOf="(InsertService,any)=>(boolean)",
    loadAsset="(InsertService,number)=>(any)",
    remove="(InsertService)=>()"}


, GamepadService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(GamepadService)=>()",
    Clone="(GamepadService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(GamepadService)=>()",
    FindFirstAncestor="(GamepadService,string)=>(any)",
    FindFirstAncestorOfClass="(GamepadService,string)=>(any)",
    FindFirstAncestorWhichIsA="(GamepadService,string)=>(any)",
    FindFirstChild="(GamepadService,string,boolean)=>(any)",
    FindFirstChildOfClass="(GamepadService,string)=>(any)",
    FindFirstChildWhichIsA="(GamepadService,string,boolean)=>(any)",
    GetAttribute="(GamepadService,string)=>(any)",
    GetAttributeChangedSignal="(GamepadService,string)=>(any)",
    GetAttributes="(GamepadService)=>(any)",
    GetChildren="(GamepadService)=>(any)",
    GetDebugId="(GamepadService,number)=>(string)",
    GetDescendants="(GamepadService)=>(any)",
    GetFullName="(GamepadService)=>(string)",
    GetPropertyChangedSignal="(GamepadService,string)=>(any)",
    IsA="(GamepadService,string)=>(boolean)",
    IsAncestorOf="(GamepadService,any)=>(boolean)",
    IsDescendantOf="(GamepadService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(GamepadService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(GamepadService,string,any)=>()",
    Tags="any",
    WaitForChild="(GamepadService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(GamepadService)=>(any)",
    className="string",
    clone="(GamepadService)=>(any)",
    destroy="(GamepadService)=>()",
    findFirstChild="(GamepadService,string,boolean)=>(any)",
    getChildren="(GamepadService)=>(any)",
    isA="(GamepadService,string)=>(boolean)",
    isDescendantOf="(GamepadService,any)=>(boolean)",
    remove="(GamepadService)=>()"}


, GenericSettings={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(GenericSettings)=>()",
    Clone="(GenericSettings)=>(any)",
    Close="Event",
    CloseLate="Event",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(GenericSettings)=>()",
    FindFirstAncestor="(GenericSettings,string)=>(any)",
    FindFirstAncestorOfClass="(GenericSettings,string)=>(any)",
    FindFirstAncestorWhichIsA="(GenericSettings,string)=>(any)",
    FindFirstChild="(GenericSettings,string,boolean)=>(any)",
    FindFirstChildOfClass="(GenericSettings,string)=>(any)",
    FindFirstChildWhichIsA="(GenericSettings,string,boolean)=>(any)",
    FindService="(GenericSettings,string)=>(any)",
    GetAttribute="(GenericSettings,string)=>(any)",
    GetAttributeChangedSignal="(GenericSettings,string)=>(any)",
    GetAttributes="(GenericSettings)=>(any)",
    GetChildren="(GenericSettings)=>(any)",
    GetDebugId="(GenericSettings,number)=>(string)",
    GetDescendants="(GenericSettings)=>(any)",
    GetFullName="(GenericSettings)=>(string)",
    GetPropertyChangedSignal="(GenericSettings,string)=>(any)",
    GetService="(GenericSettings,string)=>(any)",
    IsA="(GenericSettings,string)=>(boolean)",
    IsAncestorOf="(GenericSettings,any)=>(boolean)",
    IsDescendantOf="(GenericSettings,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(GenericSettings)=>()",
    RobloxLocked="boolean",
    ServiceAdded="Event",
    ServiceRemoving="Event",
    SetAttribute="(GenericSettings,string,any)=>()",
    Tags="any",
    WaitForChild="(GenericSettings,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(GenericSettings)=>(any)",
    className="string",
    clone="(GenericSettings)=>(any)",
    destroy="(GenericSettings)=>()",
    findFirstChild="(GenericSettings,string,boolean)=>(any)",
    getChildren="(GenericSettings)=>(any)",
    getService="(GenericSettings,string)=>(any)",
    isA="(GenericSettings,string)=>(boolean)",
    isDescendantOf="(GenericSettings,any)=>(boolean)",
    remove="(GenericSettings)=>()",
    service="(GenericSettings,string)=>(any)"}


, PackageLink={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoUpdate="boolean",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PackageLink)=>()",
    Clone="(PackageLink)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PackageLink)=>()",
    FindFirstAncestor="(PackageLink,string)=>(any)",
    FindFirstAncestorOfClass="(PackageLink,string)=>(any)",
    FindFirstAncestorWhichIsA="(PackageLink,string)=>(any)",
    FindFirstChild="(PackageLink,string,boolean)=>(any)",
    FindFirstChildOfClass="(PackageLink,string)=>(any)",
    FindFirstChildWhichIsA="(PackageLink,string,boolean)=>(any)",
    GetAttribute="(PackageLink,string)=>(any)",
    GetAttributeChangedSignal="(PackageLink,string)=>(any)",
    GetAttributes="(PackageLink)=>(any)",
    GetChildren="(PackageLink)=>(any)",
    GetDebugId="(PackageLink,number)=>(string)",
    GetDescendants="(PackageLink)=>(any)",
    GetFullName="(PackageLink)=>(string)",
    GetPropertyChangedSignal="(PackageLink,string)=>(any)",
    IsA="(PackageLink,string)=>(boolean)",
    IsAncestorOf="(PackageLink,any)=>(boolean)",
    IsDescendantOf="(PackageLink,any)=>(boolean)",
    ModifiedState="number",
    Name="string",
    PackageId="any",
    PackageIdSerialize="any",
    Parent="any",
    Remove="(PackageLink)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PackageLink,string,any)=>()",
    Status="string",
    SymbolicLink="string",
    Tags="any",
    VersionIdSerialize="number",
    VersionNumber="number",
    WaitForChild="(PackageLink,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PackageLink)=>(any)",
    className="string",
    clone="(PackageLink)=>(any)",
    destroy="(PackageLink)=>()",
    findFirstChild="(PackageLink,string,boolean)=>(any)",
    getChildren="(PackageLink)=>(any)",
    isA="(PackageLink,string)=>(boolean)",
    isDescendantOf="(PackageLink,any)=>(boolean)",
    remove="(PackageLink)=>()"}


, GlobalDataStore={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(GlobalDataStore)=>()",
    Clone="(GlobalDataStore)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(GlobalDataStore)=>()",
    FindFirstAncestor="(GlobalDataStore,string)=>(any)",
    FindFirstAncestorOfClass="(GlobalDataStore,string)=>(any)",
    FindFirstAncestorWhichIsA="(GlobalDataStore,string)=>(any)",
    FindFirstChild="(GlobalDataStore,string,boolean)=>(any)",
    FindFirstChildOfClass="(GlobalDataStore,string)=>(any)",
    FindFirstChildWhichIsA="(GlobalDataStore,string,boolean)=>(any)",
    GetAsync="(GlobalDataStore,string)=>(any)",
    GetAttribute="(GlobalDataStore,string)=>(any)",
    GetAttributeChangedSignal="(GlobalDataStore,string)=>(any)",
    GetAttributes="(GlobalDataStore)=>(any)",
    GetChildren="(GlobalDataStore)=>(any)",
    GetDebugId="(GlobalDataStore,number)=>(string)",
    GetDescendants="(GlobalDataStore)=>(any)",
    GetFullName="(GlobalDataStore)=>(string)",
    GetPropertyChangedSignal="(GlobalDataStore,string)=>(any)",
    IncrementAsync="(GlobalDataStore,string,number)=>(any)",
    IsA="(GlobalDataStore,string)=>(boolean)",
    IsAncestorOf="(GlobalDataStore,any)=>(boolean)",
    IsDescendantOf="(GlobalDataStore,any)=>(boolean)",
    Name="string",
    OnUpdate="(GlobalDataStore,string,any)=>(any)",
    Parent="any",
    Remove="(GlobalDataStore)=>()",
    RemoveAsync="(GlobalDataStore,string)=>(any)",
    RobloxLocked="boolean",
    SetAsync="(GlobalDataStore,string,any)=>()",
    SetAttribute="(GlobalDataStore,string,any)=>()",
    Tags="any",
    UpdateAsync="(GlobalDataStore,string,any)=>(any)",
    WaitForChild="(GlobalDataStore,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(GlobalDataStore)=>(any)",
    className="string",
    clone="(GlobalDataStore)=>(any)",
    destroy="(GlobalDataStore)=>()",
    findFirstChild="(GlobalDataStore,string,boolean)=>(any)",
    getChildren="(GlobalDataStore)=>(any)",
    isA="(GlobalDataStore,string)=>(boolean)",
    isDescendantOf="(GlobalDataStore,any)=>(boolean)",
    remove="(GlobalDataStore)=>()"}


, PlayerGui={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PlayerGui)=>()",
    Clone="(PlayerGui)=>(any)",
    CurrentScreenOrientation="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PlayerGui)=>()",
    FindFirstAncestor="(PlayerGui,string)=>(any)",
    FindFirstAncestorOfClass="(PlayerGui,string)=>(any)",
    FindFirstAncestorWhichIsA="(PlayerGui,string)=>(any)",
    FindFirstChild="(PlayerGui,string,boolean)=>(any)",
    FindFirstChildOfClass="(PlayerGui,string)=>(any)",
    FindFirstChildWhichIsA="(PlayerGui,string,boolean)=>(any)",
    GetAttribute="(PlayerGui,string)=>(any)",
    GetAttributeChangedSignal="(PlayerGui,string)=>(any)",
    GetAttributes="(PlayerGui)=>(any)",
    GetChildren="(PlayerGui)=>(any)",
    GetDebugId="(PlayerGui,number)=>(string)",
    GetDescendants="(PlayerGui)=>(any)",
    GetFullName="(PlayerGui)=>(string)",
    GetGuiObjectsAtPosition="(PlayerGui,number,number)=>(any)",
    GetPropertyChangedSignal="(PlayerGui,string)=>(any)",
    GetTopbarTransparency="(PlayerGui)=>(number)",
    IsA="(PlayerGui,string)=>(boolean)",
    IsAncestorOf="(PlayerGui,any)=>(boolean)",
    IsDescendantOf="(PlayerGui,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(PlayerGui)=>()",
    RobloxLocked="boolean",
    ScreenOrientation="any",
    SelectionImageObject="any",
    SetAttribute="(PlayerGui,string,any)=>()",
    SetTopbarTransparency="(PlayerGui,number)=>()",
    Tags="any",
    TopbarTransparencyChangedSignal="Event",
    WaitForChild="(PlayerGui,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PlayerGui)=>(any)",
    className="string",
    clone="(PlayerGui)=>(any)",
    destroy="(PlayerGui)=>()",
    findFirstChild="(PlayerGui,string,boolean)=>(any)",
    getChildren="(PlayerGui)=>(any)",
    isA="(PlayerGui,string)=>(boolean)",
    isDescendantOf="(PlayerGui,any)=>(boolean)",
    remove="(PlayerGui)=>()"}


, MemStorageConnection={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(MemStorageConnection)=>()",
    Clone="(MemStorageConnection)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(MemStorageConnection)=>()",
    Disconnect="(MemStorageConnection)=>()",
    FindFirstAncestor="(MemStorageConnection,string)=>(any)",
    FindFirstAncestorOfClass="(MemStorageConnection,string)=>(any)",
    FindFirstAncestorWhichIsA="(MemStorageConnection,string)=>(any)",
    FindFirstChild="(MemStorageConnection,string,boolean)=>(any)",
    FindFirstChildOfClass="(MemStorageConnection,string)=>(any)",
    FindFirstChildWhichIsA="(MemStorageConnection,string,boolean)=>(any)",
    GetAttribute="(MemStorageConnection,string)=>(any)",
    GetAttributeChangedSignal="(MemStorageConnection,string)=>(any)",
    GetAttributes="(MemStorageConnection)=>(any)",
    GetChildren="(MemStorageConnection)=>(any)",
    GetDebugId="(MemStorageConnection,number)=>(string)",
    GetDescendants="(MemStorageConnection)=>(any)",
    GetFullName="(MemStorageConnection)=>(string)",
    GetPropertyChangedSignal="(MemStorageConnection,string)=>(any)",
    IsA="(MemStorageConnection,string)=>(boolean)",
    IsAncestorOf="(MemStorageConnection,any)=>(boolean)",
    IsDescendantOf="(MemStorageConnection,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(MemStorageConnection)=>()",
    RobloxLocked="boolean",
    SetAttribute="(MemStorageConnection,string,any)=>()",
    Tags="any",
    WaitForChild="(MemStorageConnection,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(MemStorageConnection)=>(any)",
    className="string",
    clone="(MemStorageConnection)=>(any)",
    destroy="(MemStorageConnection)=>()",
    findFirstChild="(MemStorageConnection,string,boolean)=>(any)",
    getChildren="(MemStorageConnection)=>(any)",
    isA="(MemStorageConnection,string)=>(boolean)",
    isDescendantOf="(MemStorageConnection,any)=>(boolean)",
    remove="(MemStorageConnection)=>()"}


, GlobalSettings={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(GlobalSettings)=>()",
    Clone="(GlobalSettings)=>(any)",
    Close="Event",
    CloseLate="Event",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(GlobalSettings)=>()",
    FindFirstAncestor="(GlobalSettings,string)=>(any)",
    FindFirstAncestorOfClass="(GlobalSettings,string)=>(any)",
    FindFirstAncestorWhichIsA="(GlobalSettings,string)=>(any)",
    FindFirstChild="(GlobalSettings,string,boolean)=>(any)",
    FindFirstChildOfClass="(GlobalSettings,string)=>(any)",
    FindFirstChildWhichIsA="(GlobalSettings,string,boolean)=>(any)",
    FindService="(GlobalSettings,string)=>(any)",
    GetAttribute="(GlobalSettings,string)=>(any)",
    GetAttributeChangedSignal="(GlobalSettings,string)=>(any)",
    GetAttributes="(GlobalSettings)=>(any)",
    GetChildren="(GlobalSettings)=>(any)",
    GetDebugId="(GlobalSettings,number)=>(string)",
    GetDescendants="(GlobalSettings)=>(any)",
    GetFFlag="(GlobalSettings,string)=>(boolean)",
    GetFVariable="(GlobalSettings,string)=>(string)",
    GetFullName="(GlobalSettings)=>(string)",
    GetPropertyChangedSignal="(GlobalSettings,string)=>(any)",
    GetService="(GlobalSettings,string)=>(any)",
    IsA="(GlobalSettings,string)=>(boolean)",
    IsAncestorOf="(GlobalSettings,any)=>(boolean)",
    IsDescendantOf="(GlobalSettings,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(GlobalSettings)=>()",
    RobloxLocked="boolean",
    ServiceAdded="Event",
    ServiceRemoving="Event",
    SetAttribute="(GlobalSettings,string,any)=>()",
    Tags="any",
    WaitForChild="(GlobalSettings,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(GlobalSettings)=>(any)",
    className="string",
    clone="(GlobalSettings)=>(any)",
    destroy="(GlobalSettings)=>()",
    findFirstChild="(GlobalSettings,string,boolean)=>(any)",
    getChildren="(GlobalSettings)=>(any)",
    getService="(GlobalSettings,string)=>(any)",
    isA="(GlobalSettings,string)=>(boolean)",
    isDescendantOf="(GlobalSettings,any)=>(boolean)",
    remove="(GlobalSettings)=>()",
    service="(GlobalSettings,string)=>(any)"}


, Glue={
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    C0="CFrame",
    C1="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Glue)=>()",
    Clone="(Glue)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Glue)=>()",
    Enabled="boolean",
    F0="Vector3",
    F1="Vector3",
    F2="Vector3",
    F3="Vector3",
    FindFirstAncestor="(Glue,string)=>(any)",
    FindFirstAncestorOfClass="(Glue,string)=>(any)",
    FindFirstAncestorWhichIsA="(Glue,string)=>(any)",
    FindFirstChild="(Glue,string,boolean)=>(any)",
    FindFirstChildOfClass="(Glue,string)=>(any)",
    FindFirstChildWhichIsA="(Glue,string,boolean)=>(any)",
    GetAttribute="(Glue,string)=>(any)",
    GetAttributeChangedSignal="(Glue,string)=>(any)",
    GetAttributes="(Glue)=>(any)",
    GetChildren="(Glue)=>(any)",
    GetDebugId="(Glue,number)=>(string)",
    GetDescendants="(Glue)=>(any)",
    GetFullName="(Glue)=>(string)",
    GetPropertyChangedSignal="(Glue,string)=>(any)",
    IsA="(Glue,string)=>(boolean)",
    IsAncestorOf="(Glue,any)=>(boolean)",
    IsAutoJoint="boolean",
    IsDescendantOf="(Glue,any)=>(boolean)",
    Name="string",
    Parent="any",
    Part0="any",
    Part1="any",
    Remove="(Glue)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Glue,string,any)=>()",
    Tags="any",
    WaitForChild="(Glue,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Glue)=>(any)",
    className="string",
    clone="(Glue)=>(any)",
    destroy="(Glue)=>()",
    findFirstChild="(Glue,string,boolean)=>(any)",
    getChildren="(Glue)=>(any)",
    isA="(Glue,string)=>(boolean)",
    isDescendantOf="(Glue,any)=>(boolean)",
    part1="any",
    remove="(Glue)=>()"}


, GoogleAnalyticsConfiguration={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(GoogleAnalyticsConfiguration)=>()",
    Clone="(GoogleAnalyticsConfiguration)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(GoogleAnalyticsConfiguration)=>()",
    FindFirstAncestor="(GoogleAnalyticsConfiguration,string)=>(any)",
    FindFirstAncestorOfClass="(GoogleAnalyticsConfiguration,string)=>(any)",
    FindFirstAncestorWhichIsA="(GoogleAnalyticsConfiguration,string)=>(any)",
    FindFirstChild="(GoogleAnalyticsConfiguration,string,boolean)=>(any)",
    FindFirstChildOfClass="(GoogleAnalyticsConfiguration,string)=>(any)",
    FindFirstChildWhichIsA="(GoogleAnalyticsConfiguration,string,boolean)=>(any)",
    GetAttribute="(GoogleAnalyticsConfiguration,string)=>(any)",
    GetAttributeChangedSignal="(GoogleAnalyticsConfiguration,string)=>(any)",
    GetAttributes="(GoogleAnalyticsConfiguration)=>(any)",
    GetChildren="(GoogleAnalyticsConfiguration)=>(any)",
    GetDebugId="(GoogleAnalyticsConfiguration,number)=>(string)",
    GetDescendants="(GoogleAnalyticsConfiguration)=>(any)",
    GetFullName="(GoogleAnalyticsConfiguration)=>(string)",
    GetPropertyChangedSignal="(GoogleAnalyticsConfiguration,string)=>(any)",
    IsA="(GoogleAnalyticsConfiguration,string)=>(boolean)",
    IsAncestorOf="(GoogleAnalyticsConfiguration,any)=>(boolean)",
    IsDescendantOf="(GoogleAnalyticsConfiguration,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(GoogleAnalyticsConfiguration)=>()",
    RobloxLocked="boolean",
    SetAttribute="(GoogleAnalyticsConfiguration,string,any)=>()",
    Tags="any",
    WaitForChild="(GoogleAnalyticsConfiguration,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(GoogleAnalyticsConfiguration)=>(any)",
    className="string",
    clone="(GoogleAnalyticsConfiguration)=>(any)",
    destroy="(GoogleAnalyticsConfiguration)=>()",
    findFirstChild="(GoogleAnalyticsConfiguration,string,boolean)=>(any)",
    gaID="string",
    getChildren="(GoogleAnalyticsConfiguration)=>(any)",
    isA="(GoogleAnalyticsConfiguration,string)=>(boolean)",
    isDescendantOf="(GoogleAnalyticsConfiguration,any)=>(boolean)",
    remove="(GoogleAnalyticsConfiguration)=>()"}


, GuiBase={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(GuiBase)=>()",
    Clone="(GuiBase)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(GuiBase)=>()",
    FindFirstAncestor="(GuiBase,string)=>(any)",
    FindFirstAncestorOfClass="(GuiBase,string)=>(any)",
    FindFirstAncestorWhichIsA="(GuiBase,string)=>(any)",
    FindFirstChild="(GuiBase,string,boolean)=>(any)",
    FindFirstChildOfClass="(GuiBase,string)=>(any)",
    FindFirstChildWhichIsA="(GuiBase,string,boolean)=>(any)",
    GetAttribute="(GuiBase,string)=>(any)",
    GetAttributeChangedSignal="(GuiBase,string)=>(any)",
    GetAttributes="(GuiBase)=>(any)",
    GetChildren="(GuiBase)=>(any)",
    GetDebugId="(GuiBase,number)=>(string)",
    GetDescendants="(GuiBase)=>(any)",
    GetFullName="(GuiBase)=>(string)",
    GetPropertyChangedSignal="(GuiBase,string)=>(any)",
    IsA="(GuiBase,string)=>(boolean)",
    IsAncestorOf="(GuiBase,any)=>(boolean)",
    IsDescendantOf="(GuiBase,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(GuiBase)=>()",
    RobloxLocked="boolean",
    SetAttribute="(GuiBase,string,any)=>()",
    Tags="any",
    WaitForChild="(GuiBase,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(GuiBase)=>(any)",
    className="string",
    clone="(GuiBase)=>(any)",
    destroy="(GuiBase)=>()",
    findFirstChild="(GuiBase,string,boolean)=>(any)",
    getChildren="(GuiBase)=>(any)",
    isA="(GuiBase,string)=>(boolean)",
    isDescendantOf="(GuiBase,any)=>(boolean)",
    remove="(GuiBase)=>()"}


, Part={
    AncestryChanged="Event",
    Anchored="boolean",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BackParamA="number",
    BackParamB="number",
    BackSurface="any",
    BackSurfaceInput="any",
    BottomParamA="number",
    BottomParamB="number",
    BottomSurface="any",
    BottomSurfaceInput="any",
    BreakJoints="(Part)=>()",
    BrickColor="any",
    CFrame="CFrame",
    CanCollide="boolean",
    CanCollideWith="(Part,any)=>(boolean)",
    CanSetNetworkOwnership="(Part)=>(any)",
    CastShadow="boolean",
    CenterOfMass="Vector3",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Part)=>()",
    Clone="(Part)=>(any)",
    CollisionGroupId="number",
    Color="Color3",
    Color3uint8="any",
    CustomPhysicalProperties="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Part)=>()",
    DraggingV1="boolean",
    Elasticity="number",
    FindFirstAncestor="(Part,string)=>(any)",
    FindFirstAncestorOfClass="(Part,string)=>(any)",
    FindFirstAncestorWhichIsA="(Part,string)=>(any)",
    FindFirstChild="(Part,string,boolean)=>(any)",
    FindFirstChildOfClass="(Part,string)=>(any)",
    FindFirstChildWhichIsA="(Part,string,boolean)=>(any)",
    FormFactor="any",
    Friction="number",
    FrontParamA="number",
    FrontParamB="number",
    FrontSurface="any",
    FrontSurfaceInput="any",
    GetAttribute="(Part,string)=>(any)",
    GetAttributeChangedSignal="(Part,string)=>(any)",
    GetAttributes="(Part)=>(any)",
    GetChildren="(Part)=>(any)",
    GetConnectedParts="(Part,boolean)=>(any)",
    GetDebugId="(Part,number)=>(string)",
    GetDescendants="(Part)=>(any)",
    GetFullName="(Part)=>(string)",
    GetJoints="(Part)=>(any)",
    GetMass="(Part)=>(number)",
    GetNetworkOwner="(Part)=>(any)",
    GetNetworkOwnershipAuto="(Part)=>(boolean)",
    GetPropertyChangedSignal="(Part,string)=>(any)",
    GetRenderCFrame="(Part)=>(CFrame)",
    GetRootPart="(Part)=>(any)",
    GetTouchingParts="(Part)=>(any)",
    IsA="(Part,string)=>(boolean)",
    IsAncestorOf="(Part,any)=>(boolean)",
    IsDescendantOf="(Part,any)=>(boolean)",
    IsGrounded="(Part)=>(boolean)",
    LeftParamA="number",
    LeftParamB="number",
    LeftSurface="any",
    LeftSurfaceInput="any",
    LocalSimulationTouched="Event",
    LocalTransparencyModifier="number",
    Locked="boolean",
    MakeJoints="(Part)=>()",
    Massless="boolean",
    Material="any",
    Name="string",
    NetworkIsSleeping="boolean",
    NetworkOwnerChanged="Event",
    NetworkOwnerV3="any",
    NetworkOwnershipRule="any",
    Orientation="Vector3",
    OutfitChanged="Event",
    Parent="any",
    Position="Vector3",
    ReceiveAge="number",
    Reflectance="number",
    Remove="(Part)=>()",
    Resize="(Part,any,number)=>(boolean)",
    ResizeIncrement="number",
    ResizeableFaces="any",
    RightParamA="number",
    RightParamB="number",
    RightSurface="any",
    RightSurfaceInput="any",
    RobloxLocked="boolean",
    RootPriority="number",
    RotVelocity="Vector3",
    Rotation="Vector3",
    SetAttribute="(Part,string,any)=>()",
    SetNetworkOwner="(Part,any)=>()",
    SetNetworkOwnershipAuto="(Part)=>()",
    Shape="any",
    Size="Vector3",
    SpecificGravity="number",
    StoppedTouching="Event",
    SubtractAsync="(Part,any,any,any)=>(any)",
    Tags="any",
    TopParamA="number",
    TopParamB="number",
    TopSurface="any",
    TopSurfaceInput="any",
    TouchEnded="Event",
    Touched="Event",
    Transparency="number",
    UnionAsync="(Part,any,any,any)=>(any)",
    Velocity="Vector3",
    WaitForChild="(Part,string,number)=>(any)",
    archivable="boolean",
    breakJoints="(Part)=>()",
    brickColor="any",
    childAdded="Event",
    children="(Part)=>(any)",
    className="string",
    clone="(Part)=>(any)",
    destroy="(Part)=>()",
    findFirstChild="(Part,string,boolean)=>(any)",
    formFactor="any",
    formFactorRaw="any",
    getChildren="(Part)=>(any)",
    getMass="(Part)=>(number)",
    isA="(Part,string)=>(boolean)",
    isDescendantOf="(Part,any)=>(boolean)",
    makeJoints="(Part)=>()",
    remove="(Part)=>()",
    resize="(Part,any,number)=>(boolean)",
    shap="any",
    shape="any",
    siz="Vector3",
    size="Vector3",
    touched="Event"}


, GuiButton={
    AbsolutePosition="Vector2",
    AbsoluteRotation="number",
    AbsoluteSize="Vector2",
    Activated="Event",
    Active="boolean",
    AncestryChanged="Event",
    AnchorPoint="Vector2",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoButtonColor="boolean",
    AutoLocalize="boolean",
    BackgroundColor="any",
    BackgroundColor3="Color3",
    BackgroundTransparency="number",
    BorderColor="any",
    BorderColor3="Color3",
    BorderMode="any",
    BorderSizePixel="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(GuiButton)=>()",
    ClipsDescendants="boolean",
    Clone="(GuiButton)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(GuiButton)=>()",
    DragBegin="Event",
    DragBeginConnectionCount="number",
    DragStopped="Event",
    DragStoppedConnectionCount="number",
    Draggable="boolean",
    FindFirstAncestor="(GuiButton,string)=>(any)",
    FindFirstAncestorOfClass="(GuiButton,string)=>(any)",
    FindFirstAncestorWhichIsA="(GuiButton,string)=>(any)",
    FindFirstChild="(GuiButton,string,boolean)=>(any)",
    FindFirstChildOfClass="(GuiButton,string)=>(any)",
    FindFirstChildWhichIsA="(GuiButton,string,boolean)=>(any)",
    GetAttribute="(GuiButton,string)=>(any)",
    GetAttributeChangedSignal="(GuiButton,string)=>(any)",
    GetAttributes="(GuiButton)=>(any)",
    GetChildren="(GuiButton)=>(any)",
    GetDebugId="(GuiButton,number)=>(string)",
    GetDescendants="(GuiButton)=>(any)",
    GetFullName="(GuiButton)=>(string)",
    GetPropertyChangedSignal="(GuiButton,string)=>(any)",
    InputBegan="Event",
    InputChanged="Event",
    InputEnded="Event",
    IsA="(GuiButton,string)=>(boolean)",
    IsAncestorOf="(GuiButton,any)=>(boolean)",
    IsDescendantOf="(GuiButton,any)=>(boolean)",
    IsNotOccluded="boolean",
    LayoutOrder="number",
    Localize="boolean",
    Modal="boolean",
    MouseButton1Click="Event",
    MouseButton1ClickConnectionCount="number",
    MouseButton1Down="Event",
    MouseButton1DownConnectionCount="number",
    MouseButton1Up="Event",
    MouseButton1UpConnectionCount="number",
    MouseButton2Click="Event",
    MouseButton2ClickConnectionCount="number",
    MouseButton2Down="Event",
    MouseButton2DownConnectionCount="number",
    MouseButton2Up="Event",
    MouseButton2UpConnectionCount="number",
    MouseEnter="Event",
    MouseEnterConnectionCount="number",
    MouseLeave="Event",
    MouseLeaveConnectionCount="number",
    MouseMoved="Event",
    MouseMovedConnectionCount="number",
    MouseWheelBackward="Event",
    MouseWheelBackwardConnectionCount="number",
    MouseWheelForward="Event",
    MouseWheelForwardConnectionCount="number",
    Name="string",
    NextSelectionDown="any",
    NextSelectionLeft="any",
    NextSelectionRight="any",
    NextSelectionUp="any",
    Parent="any",
    Position="UDim2",
    Remove="(GuiButton)=>()",
    RobloxLocked="boolean",
    RootLocalizationTable="any",
    Rotation="number",
    Selectable="boolean",
    Selected="boolean",
    SelectionGained="Event",
    SelectionImageObject="any",
    SelectionLost="Event",
    SetAttribute="(GuiButton,string,any)=>()",
    Size="UDim2",
    SizeConstraint="any",
    Style="any",
    Tags="any",
    TouchLongPress="Event",
    TouchPan="Event",
    TouchPinch="Event",
    TouchRotate="Event",
    TouchSwipe="Event",
    TouchTap="Event",
    Transparency="number",
    TweenPosition="(GuiButton,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSize="(GuiButton,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSizeAndPosition="(GuiButton,UDim2,UDim2,any,any,number,boolean,any)=>(boolean)",
    Visible="boolean",
    WaitForChild="(GuiButton,string,number)=>(any)",
    ZIndex="number",
    archivable="boolean",
    childAdded="Event",
    children="(GuiButton)=>(any)",
    className="string",
    clone="(GuiButton)=>(any)",
    destroy="(GuiButton)=>()",
    findFirstChild="(GuiButton,string,boolean)=>(any)",
    getChildren="(GuiButton)=>(any)",
    isA="(GuiButton,string)=>(boolean)",
    isDescendantOf="(GuiButton,any)=>(boolean)",
    remove="(GuiButton)=>()"}


, GuiLabel={
    AbsolutePosition="Vector2",
    AbsoluteRotation="number",
    AbsoluteSize="Vector2",
    Active="boolean",
    AncestryChanged="Event",
    AnchorPoint="Vector2",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoLocalize="boolean",
    BackgroundColor="any",
    BackgroundColor3="Color3",
    BackgroundTransparency="number",
    BorderColor="any",
    BorderColor3="Color3",
    BorderMode="any",
    BorderSizePixel="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(GuiLabel)=>()",
    ClipsDescendants="boolean",
    Clone="(GuiLabel)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(GuiLabel)=>()",
    DragBegin="Event",
    DragBeginConnectionCount="number",
    DragStopped="Event",
    DragStoppedConnectionCount="number",
    Draggable="boolean",
    FindFirstAncestor="(GuiLabel,string)=>(any)",
    FindFirstAncestorOfClass="(GuiLabel,string)=>(any)",
    FindFirstAncestorWhichIsA="(GuiLabel,string)=>(any)",
    FindFirstChild="(GuiLabel,string,boolean)=>(any)",
    FindFirstChildOfClass="(GuiLabel,string)=>(any)",
    FindFirstChildWhichIsA="(GuiLabel,string,boolean)=>(any)",
    GetAttribute="(GuiLabel,string)=>(any)",
    GetAttributeChangedSignal="(GuiLabel,string)=>(any)",
    GetAttributes="(GuiLabel)=>(any)",
    GetChildren="(GuiLabel)=>(any)",
    GetDebugId="(GuiLabel,number)=>(string)",
    GetDescendants="(GuiLabel)=>(any)",
    GetFullName="(GuiLabel)=>(string)",
    GetPropertyChangedSignal="(GuiLabel,string)=>(any)",
    InputBegan="Event",
    InputChanged="Event",
    InputEnded="Event",
    IsA="(GuiLabel,string)=>(boolean)",
    IsAncestorOf="(GuiLabel,any)=>(boolean)",
    IsDescendantOf="(GuiLabel,any)=>(boolean)",
    IsNotOccluded="boolean",
    LayoutOrder="number",
    Localize="boolean",
    MouseEnter="Event",
    MouseEnterConnectionCount="number",
    MouseLeave="Event",
    MouseLeaveConnectionCount="number",
    MouseMoved="Event",
    MouseMovedConnectionCount="number",
    MouseWheelBackward="Event",
    MouseWheelBackwardConnectionCount="number",
    MouseWheelForward="Event",
    MouseWheelForwardConnectionCount="number",
    Name="string",
    NextSelectionDown="any",
    NextSelectionLeft="any",
    NextSelectionRight="any",
    NextSelectionUp="any",
    Parent="any",
    Position="UDim2",
    Remove="(GuiLabel)=>()",
    RobloxLocked="boolean",
    RootLocalizationTable="any",
    Rotation="number",
    Selectable="boolean",
    SelectionGained="Event",
    SelectionImageObject="any",
    SelectionLost="Event",
    SetAttribute="(GuiLabel,string,any)=>()",
    Size="UDim2",
    SizeConstraint="any",
    Tags="any",
    TouchLongPress="Event",
    TouchPan="Event",
    TouchPinch="Event",
    TouchRotate="Event",
    TouchSwipe="Event",
    TouchTap="Event",
    Transparency="number",
    TweenPosition="(GuiLabel,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSize="(GuiLabel,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSizeAndPosition="(GuiLabel,UDim2,UDim2,any,any,number,boolean,any)=>(boolean)",
    Visible="boolean",
    WaitForChild="(GuiLabel,string,number)=>(any)",
    ZIndex="number",
    archivable="boolean",
    childAdded="Event",
    children="(GuiLabel)=>(any)",
    className="string",
    clone="(GuiLabel)=>(any)",
    destroy="(GuiLabel)=>()",
    findFirstChild="(GuiLabel,string,boolean)=>(any)",
    getChildren="(GuiLabel)=>(any)",
    isA="(GuiLabel,string)=>(boolean)",
    isDescendantOf="(GuiLabel,any)=>(boolean)",
    remove="(GuiLabel)=>()"}


, LineHandleAdornment={
    Adornee="any",
    AlwaysOnTop="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CFrame="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(LineHandleAdornment)=>()",
    Clone="(LineHandleAdornment)=>(any)",
    Color="any",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(LineHandleAdornment)=>()",
    FindFirstAncestor="(LineHandleAdornment,string)=>(any)",
    FindFirstAncestorOfClass="(LineHandleAdornment,string)=>(any)",
    FindFirstAncestorWhichIsA="(LineHandleAdornment,string)=>(any)",
    FindFirstChild="(LineHandleAdornment,string,boolean)=>(any)",
    FindFirstChildOfClass="(LineHandleAdornment,string)=>(any)",
    FindFirstChildWhichIsA="(LineHandleAdornment,string,boolean)=>(any)",
    GetAttribute="(LineHandleAdornment,string)=>(any)",
    GetAttributeChangedSignal="(LineHandleAdornment,string)=>(any)",
    GetAttributes="(LineHandleAdornment)=>(any)",
    GetChildren="(LineHandleAdornment)=>(any)",
    GetDebugId="(LineHandleAdornment,number)=>(string)",
    GetDescendants="(LineHandleAdornment)=>(any)",
    GetFullName="(LineHandleAdornment)=>(string)",
    GetPropertyChangedSignal="(LineHandleAdornment,string)=>(any)",
    IsA="(LineHandleAdornment,string)=>(boolean)",
    IsAncestorOf="(LineHandleAdornment,any)=>(boolean)",
    IsDescendantOf="(LineHandleAdornment,any)=>(boolean)",
    Length="number",
    MouseButton1Down="Event",
    MouseButton1Up="Event",
    MouseEnter="Event",
    MouseLeave="Event",
    Name="string",
    Parent="any",
    Remove="(LineHandleAdornment)=>()",
    RobloxLocked="boolean",
    SetAttribute="(LineHandleAdornment,string,any)=>()",
    SizeRelativeOffset="Vector3",
    Tags="any",
    Thickness="number",
    Transparency="number",
    Visible="boolean",
    WaitForChild="(LineHandleAdornment,string,number)=>(any)",
    ZIndex="number",
    archivable="boolean",
    childAdded="Event",
    children="(LineHandleAdornment)=>(any)",
    className="string",
    clone="(LineHandleAdornment)=>(any)",
    destroy="(LineHandleAdornment)=>()",
    findFirstChild="(LineHandleAdornment,string,boolean)=>(any)",
    getChildren="(LineHandleAdornment)=>(any)",
    isA="(LineHandleAdornment,string)=>(boolean)",
    isDescendantOf="(LineHandleAdornment,any)=>(boolean)",
    remove="(LineHandleAdornment)=>()"}


, GuiMain={
    AbsolutePosition="Vector2",
    AbsoluteRotation="number",
    AbsoluteSize="Vector2",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoLocalize="boolean",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(GuiMain)=>()",
    Clone="(GuiMain)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(GuiMain)=>()",
    DisplayOrder="number",
    Enabled="boolean",
    FindFirstAncestor="(GuiMain,string)=>(any)",
    FindFirstAncestorOfClass="(GuiMain,string)=>(any)",
    FindFirstAncestorWhichIsA="(GuiMain,string)=>(any)",
    FindFirstChild="(GuiMain,string,boolean)=>(any)",
    FindFirstChildOfClass="(GuiMain,string)=>(any)",
    FindFirstChildWhichIsA="(GuiMain,string,boolean)=>(any)",
    GetAttribute="(GuiMain,string)=>(any)",
    GetAttributeChangedSignal="(GuiMain,string)=>(any)",
    GetAttributes="(GuiMain)=>(any)",
    GetChildren="(GuiMain)=>(any)",
    GetDebugId="(GuiMain,number)=>(string)",
    GetDescendants="(GuiMain)=>(any)",
    GetFullName="(GuiMain)=>(string)",
    GetPropertyChangedSignal="(GuiMain,string)=>(any)",
    IgnoreGuiInset="boolean",
    IsA="(GuiMain,string)=>(boolean)",
    IsAncestorOf="(GuiMain,any)=>(boolean)",
    IsDescendantOf="(GuiMain,any)=>(boolean)",
    IsNotOccluded="boolean",
    Localize="boolean",
    Name="string",
    OnTopOfCoreBlur="boolean",
    Parent="any",
    Remove="(GuiMain)=>()",
    ResetOnSpawn="boolean",
    RobloxLocked="boolean",
    RootLocalizationTable="any",
    SetAttribute="(GuiMain,string,any)=>()",
    Tags="any",
    WaitForChild="(GuiMain,string,number)=>(any)",
    ZIndexBehavior="any",
    archivable="boolean",
    childAdded="Event",
    children="(GuiMain)=>(any)",
    className="string",
    clone="(GuiMain)=>(any)",
    destroy="(GuiMain)=>()",
    findFirstChild="(GuiMain,string,boolean)=>(any)",
    getChildren="(GuiMain)=>(any)",
    isA="(GuiMain,string)=>(boolean)",
    isDescendantOf="(GuiMain,any)=>(boolean)",
    remove="(GuiMain)=>()"}


, UserSettings={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(UserSettings)=>()",
    Clone="(UserSettings)=>(any)",
    Close="Event",
    CloseLate="Event",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(UserSettings)=>()",
    FindFirstAncestor="(UserSettings,string)=>(any)",
    FindFirstAncestorOfClass="(UserSettings,string)=>(any)",
    FindFirstAncestorWhichIsA="(UserSettings,string)=>(any)",
    FindFirstChild="(UserSettings,string,boolean)=>(any)",
    FindFirstChildOfClass="(UserSettings,string)=>(any)",
    FindFirstChildWhichIsA="(UserSettings,string,boolean)=>(any)",
    FindService="(UserSettings,string)=>(any)",
    GetAttribute="(UserSettings,string)=>(any)",
    GetAttributeChangedSignal="(UserSettings,string)=>(any)",
    GetAttributes="(UserSettings)=>(any)",
    GetChildren="(UserSettings)=>(any)",
    GetDebugId="(UserSettings,number)=>(string)",
    GetDescendants="(UserSettings)=>(any)",
    GetFullName="(UserSettings)=>(string)",
    GetPropertyChangedSignal="(UserSettings,string)=>(any)",
    GetService="(UserSettings,string)=>(any)",
    IsA="(UserSettings,string)=>(boolean)",
    IsAncestorOf="(UserSettings,any)=>(boolean)",
    IsDescendantOf="(UserSettings,any)=>(boolean)",
    IsUserFeatureEnabled="(UserSettings,string)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(UserSettings)=>()",
    Reset="(UserSettings)=>()",
    RobloxLocked="boolean",
    ServiceAdded="Event",
    ServiceRemoving="Event",
    SetAttribute="(UserSettings,string,any)=>()",
    Tags="any",
    WaitForChild="(UserSettings,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(UserSettings)=>(any)",
    className="string",
    clone="(UserSettings)=>(any)",
    destroy="(UserSettings)=>()",
    findFirstChild="(UserSettings,string,boolean)=>(any)",
    getChildren="(UserSettings)=>(any)",
    getService="(UserSettings,string)=>(any)",
    isA="(UserSettings,string)=>(boolean)",
    isDescendantOf="(UserSettings,any)=>(boolean)",
    remove="(UserSettings)=>()",
    service="(UserSettings,string)=>(any)"}


, RobloxReplicatedStorage={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(RobloxReplicatedStorage)=>()",
    Clone="(RobloxReplicatedStorage)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(RobloxReplicatedStorage)=>()",
    FindFirstAncestor="(RobloxReplicatedStorage,string)=>(any)",
    FindFirstAncestorOfClass="(RobloxReplicatedStorage,string)=>(any)",
    FindFirstAncestorWhichIsA="(RobloxReplicatedStorage,string)=>(any)",
    FindFirstChild="(RobloxReplicatedStorage,string,boolean)=>(any)",
    FindFirstChildOfClass="(RobloxReplicatedStorage,string)=>(any)",
    FindFirstChildWhichIsA="(RobloxReplicatedStorage,string,boolean)=>(any)",
    GetAttribute="(RobloxReplicatedStorage,string)=>(any)",
    GetAttributeChangedSignal="(RobloxReplicatedStorage,string)=>(any)",
    GetAttributes="(RobloxReplicatedStorage)=>(any)",
    GetChildren="(RobloxReplicatedStorage)=>(any)",
    GetDebugId="(RobloxReplicatedStorage,number)=>(string)",
    GetDescendants="(RobloxReplicatedStorage)=>(any)",
    GetFullName="(RobloxReplicatedStorage)=>(string)",
    GetPropertyChangedSignal="(RobloxReplicatedStorage,string)=>(any)",
    IsA="(RobloxReplicatedStorage,string)=>(boolean)",
    IsAncestorOf="(RobloxReplicatedStorage,any)=>(boolean)",
    IsDescendantOf="(RobloxReplicatedStorage,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(RobloxReplicatedStorage)=>()",
    RobloxLocked="boolean",
    SetAttribute="(RobloxReplicatedStorage,string,any)=>()",
    Tags="any",
    WaitForChild="(RobloxReplicatedStorage,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(RobloxReplicatedStorage)=>(any)",
    className="string",
    clone="(RobloxReplicatedStorage)=>(any)",
    destroy="(RobloxReplicatedStorage)=>()",
    findFirstChild="(RobloxReplicatedStorage,string,boolean)=>(any)",
    getChildren="(RobloxReplicatedStorage)=>(any)",
    isA="(RobloxReplicatedStorage,string)=>(boolean)",
    isDescendantOf="(RobloxReplicatedStorage,any)=>(boolean)",
    remove="(RobloxReplicatedStorage)=>()"}


, GuiObject={
    AbsolutePosition="Vector2",
    AbsoluteRotation="number",
    AbsoluteSize="Vector2",
    Active="boolean",
    AncestryChanged="Event",
    AnchorPoint="Vector2",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoLocalize="boolean",
    BackgroundColor="any",
    BackgroundColor3="Color3",
    BackgroundTransparency="number",
    BorderColor="any",
    BorderColor3="Color3",
    BorderMode="any",
    BorderSizePixel="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(GuiObject)=>()",
    ClipsDescendants="boolean",
    Clone="(GuiObject)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(GuiObject)=>()",
    DragBegin="Event",
    DragBeginConnectionCount="number",
    DragStopped="Event",
    DragStoppedConnectionCount="number",
    Draggable="boolean",
    FindFirstAncestor="(GuiObject,string)=>(any)",
    FindFirstAncestorOfClass="(GuiObject,string)=>(any)",
    FindFirstAncestorWhichIsA="(GuiObject,string)=>(any)",
    FindFirstChild="(GuiObject,string,boolean)=>(any)",
    FindFirstChildOfClass="(GuiObject,string)=>(any)",
    FindFirstChildWhichIsA="(GuiObject,string,boolean)=>(any)",
    GetAttribute="(GuiObject,string)=>(any)",
    GetAttributeChangedSignal="(GuiObject,string)=>(any)",
    GetAttributes="(GuiObject)=>(any)",
    GetChildren="(GuiObject)=>(any)",
    GetDebugId="(GuiObject,number)=>(string)",
    GetDescendants="(GuiObject)=>(any)",
    GetFullName="(GuiObject)=>(string)",
    GetPropertyChangedSignal="(GuiObject,string)=>(any)",
    InputBegan="Event",
    InputChanged="Event",
    InputEnded="Event",
    IsA="(GuiObject,string)=>(boolean)",
    IsAncestorOf="(GuiObject,any)=>(boolean)",
    IsDescendantOf="(GuiObject,any)=>(boolean)",
    IsNotOccluded="boolean",
    LayoutOrder="number",
    Localize="boolean",
    MouseEnter="Event",
    MouseEnterConnectionCount="number",
    MouseLeave="Event",
    MouseLeaveConnectionCount="number",
    MouseMoved="Event",
    MouseMovedConnectionCount="number",
    MouseWheelBackward="Event",
    MouseWheelBackwardConnectionCount="number",
    MouseWheelForward="Event",
    MouseWheelForwardConnectionCount="number",
    Name="string",
    NextSelectionDown="any",
    NextSelectionLeft="any",
    NextSelectionRight="any",
    NextSelectionUp="any",
    Parent="any",
    Position="UDim2",
    Remove="(GuiObject)=>()",
    RobloxLocked="boolean",
    RootLocalizationTable="any",
    Rotation="number",
    Selectable="boolean",
    SelectionGained="Event",
    SelectionImageObject="any",
    SelectionLost="Event",
    SetAttribute="(GuiObject,string,any)=>()",
    Size="UDim2",
    SizeConstraint="any",
    Tags="any",
    TouchLongPress="Event",
    TouchPan="Event",
    TouchPinch="Event",
    TouchRotate="Event",
    TouchSwipe="Event",
    TouchTap="Event",
    Transparency="number",
    TweenPosition="(GuiObject,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSize="(GuiObject,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSizeAndPosition="(GuiObject,UDim2,UDim2,any,any,number,boolean,any)=>(boolean)",
    Visible="boolean",
    WaitForChild="(GuiObject,string,number)=>(any)",
    ZIndex="number",
    archivable="boolean",
    childAdded="Event",
    children="(GuiObject)=>(any)",
    className="string",
    clone="(GuiObject)=>(any)",
    destroy="(GuiObject)=>()",
    findFirstChild="(GuiObject,string,boolean)=>(any)",
    getChildren="(GuiObject)=>(any)",
    isA="(GuiObject,string)=>(boolean)",
    isDescendantOf="(GuiObject,any)=>(boolean)",
    remove="(GuiObject)=>()"}


, MarketplaceService={
    AncestryChanged="Event",
    Archivable="boolean",
    Asset,Purchased="Event",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(MarketplaceService)=>()",
    ClientLuaDialogRequested="Event",
    ClientPurchaseSuccess="Event",
    Clone="(MarketplaceService)=>(any)",
    ConfirmPlayerMembership="Event",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(MarketplaceService)=>()",
    FindFirstAncestor="(MarketplaceService,string)=>(any)",
    FindFirstAncestorOfClass="(MarketplaceService,string)=>(any)",
    FindFirstAncestorWhichIsA="(MarketplaceService,string)=>(any)",
    FindFirstChild="(MarketplaceService,string,boolean)=>(any)",
    FindFirstChildOfClass="(MarketplaceService,string)=>(any)",
    FindFirstChildWhichIsA="(MarketplaceService,string,boolean)=>(any)",
    GetAttribute="(MarketplaceService,string)=>(any)",
    GetAttributeChangedSignal="(MarketplaceService,string)=>(any)",
    GetAttributes="(MarketplaceService)=>(any)",
    GetChildren="(MarketplaceService)=>(any)",
    GetDebugId="(MarketplaceService,number)=>(string)",
    GetDescendants="(MarketplaceService)=>(any)",
    GetDeveloperProductsAsync="(MarketplaceService)=>(any)",
    GetFullName="(MarketplaceService)=>(string)",
    GetProductInfo="(MarketplaceService,number,any)=>(any)",
    GetPropertyChangedSignal="(MarketplaceService,string)=>(any)",
    GetRobuxBalance="(MarketplaceService)=>(number)",
    IsA="(MarketplaceService,string)=>(boolean)",
    IsAncestorOf="(MarketplaceService,any)=>(boolean)",
    IsDescendantOf="(MarketplaceService,any)=>(boolean)",
    IsPlayerSubscribed="(MarketplaceService,any,number)=>(boolean)",
    LuaDialogCallbackSignal="Event",
    MockPurchasePremium="Event",
    Name="string",
    NativePurchaseFinished="Event",
    Parent="any",
    PerformPurchase="(MarketplaceService,any,number,number,string)=>(any)",
    PlayerCanMakePurchases="(MarketplaceService,any)=>(boolean)",
    PlayerOwnsAsset="(MarketplaceService,any,number)=>(boolean)",
    PromptBundlePurchase="(MarketplaceService,any,number)=>()",
    PromptBundlePurchaseFinished="Event",
    PromptBundlePurchaseRequested="Event",
    PromptGamePassPurchase="(MarketplaceService,any,number)=>()",
    PromptGamePassPurchaseFinished="Event",
    PromptGamePassPurchaseRequested="Event",
    PromptNativePurchase="(MarketplaceService,any,string)=>()",
    PromptNativePurchaseRequested="Event",
    PromptPremiumPurchase="(MarketplaceService,any)=>()",
    PromptPremiumPurchaseFinished="Event",
    PromptPremiumPurchaseRequested="Event",
    PromptProductPurchase="(MarketplaceService,any,number,boolean,any)=>()",
    PromptProductPurchaseFinished="Event",
    PromptProductPurchaseRequested="Event",
    PromptPurchase="(MarketplaceService,any,number,boolean,any)=>()",
    PromptPurchaseFinished="Event",
    PromptPurchaseRequested="Event",
    PromptSubscriptionCancellation="(MarketplaceService,any,number)=>()",
    PromptSubscriptionCancellationFinished="Event",
    PromptSubscriptionCancellationRequested="Event",
    PromptSubscriptionPurchase="(MarketplaceService,any,number)=>()",
    PromptSubscriptionPurchaseFinished="Event",
    PromptSubscriptionPurchaseRequested="Event",
    PromptThirdPartyPurchase="(MarketplaceService,any,string)=>()",
    PromptThirdPartyPurchaseRequested="Event",
    Remove="(MarketplaceService)=>()",
    ReportAssetSale="(MarketplaceService,string,number)=>()",
    ReportRobuxUpsellStarted="(MarketplaceService)=>()",
    RobloxLocked="boolean",
    ServerPurchaseVerification="Event",
    SetAttribute="(MarketplaceService,string,any)=>()",
    SignalAsset,Purchased="(MarketplaceService,any,any)=>()",
    SignalClientPurchaseSuccess="(MarketplaceService,string,number,number)=>()",
    SignalMockPurchasePremium="(MarketplaceService)=>()",
    SignalPromptBundlePurchaseFinished="(MarketplaceService,any,number,boolean)=>()",
    SignalPromptGamePassPurchaseFinished="(MarketplaceService,any,number,boolean)=>()",
    SignalPromptPremiumPurchaseFinished="(MarketplaceService,boolean)=>()",
    SignalPromptProductPurchaseFinished="(MarketplaceService,number,number,boolean)=>()",
    SignalPromptPurchaseFinished="(MarketplaceService,any,number,boolean)=>()",
    SignalPromptSubscriptionCancellationFinished="(MarketplaceService,any,number,boolean)=>()",
    SignalPromptSubscriptionPurchaseFinished="(MarketplaceService,any,number,boolean)=>()",
    SignalServerLuaDialogClosed="(MarketplaceService,boolean)=>()",
    Tags="any",
    ThirdPartyPurchaseFinished="Event",
    UserOwnsGamePassAsync="(MarketplaceService,number,number)=>(boolean)",
    WaitForChild="(MarketplaceService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(MarketplaceService)=>(any)",
    className="string",
    clone="(MarketplaceService)=>(any)",
    destroy="(MarketplaceService)=>()",
    findFirstChild="(MarketplaceService,string,boolean)=>(any)",
    getChildren="(MarketplaceService)=>(any)",
    isA="(MarketplaceService,string)=>(boolean)",
    isDescendantOf="(MarketplaceService,any)=>(boolean)",
    remove="(MarketplaceService)=>()"}


, GuiService={
    AddCenterDialog="(GuiService,any,any,any,any)=>()",
    AddKey="(GuiService,string)=>()",
    AddSelectionParent="(GuiService,string,any)=>()",
    AddSelectionTuple="(GuiService,string,any)=>()",
    AddSpecialKey="(GuiService,any)=>()",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoSelectGuiEnabled="boolean",
    BroadcastNotification="(GuiService,string,number)=>()",
    BrowserWindowClosed="Event",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(GuiService)=>()",
    ClearError="(GuiService)=>()",
    Clone="(GuiService)=>(any)",
    CloseInspectMenu="(GuiService)=>()",
    CloseInspectMenuRequest="Event",
    CloseStatsBasedOnInputString="(GuiService,string)=>(boolean)",
    CoreEffectFolder="any",
    CoreGuiFolder="any",
    CoreGuiNavigationEnabled="boolean",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(GuiService)=>()",
    EmotesMenuOpenChanged="Event",
    ErrorMessageChanged="Event",
    FindFirstAncestor="(GuiService,string)=>(any)",
    FindFirstAncestorOfClass="(GuiService,string)=>(any)",
    FindFirstAncestorWhichIsA="(GuiService,string)=>(any)",
    FindFirstChild="(GuiService,string,boolean)=>(any)",
    FindFirstChildOfClass="(GuiService,string)=>(any)",
    FindFirstChildWhichIsA="(GuiService,string,boolean)=>(any)",
    ForceTenFootInterface="(GuiService,boolean)=>()",
    GetAttribute="(GuiService,string)=>(any)",
    GetAttributeChangedSignal="(GuiService,string)=>(any)",
    GetAttributes="(GuiService)=>(any)",
    GetBrickCount="(GuiService)=>(number)",
    GetChildren="(GuiService)=>(any)",
    GetClosestDialogToPosition="(GuiService,Vector3)=>(any)",
    GetDebugId="(GuiService,number)=>(string)",
    GetDescendants="(GuiService)=>(any)",
    GetEmotesMenuOpen="(GuiService)=>(boolean)",
    GetErrorCode="(GuiService)=>(any)",
    GetErrorMessage="(GuiService)=>(string)",
    GetError,="(GuiService)=>(any)",
    GetFullName="(GuiService)=>(string)",
    GetGameplayPausedNotificationEnabled="(GuiService)=>(boolean)",
    GetGuiInset="(GuiService)=>(any)",
    GetInspectMenuEnabled="(GuiService)=>(boolean)",
    GetNotification,List="(GuiService)=>(any)",
    GetPropertyChangedSignal="(GuiService,string)=>(any)",
    GetResolutionScale="(GuiService)=>(number)",
    GetSafeZoneOffsets="(GuiService)=>(any)",
    GetScreenResolution="(GuiService)=>(Vector2)",
    GetUiMessage="(GuiService)=>(string)",
    GuiNavigationEnabled="boolean",
    InspectMenuEnabledChangedSignal="Event",
    InspectPlayerFromHumanoidDescription="(GuiService,any,string)=>()",
    InspectPlayerFromHumanoidDescriptionRequest="Event",
    InspectPlayerFromUserId="(GuiService,number)=>()",
    InspectPlayerFromUserIdRequest="Event",
    InspectPlayerFromUserIdWithCtx="(GuiService,number,string)=>()",
    InspectPlayerFromUserIdWithCtxRequest="Event",
    IsA="(GuiService,string)=>(boolean)",
    IsAncestorOf="(GuiService,any)=>(boolean)",
    IsDescendantOf="(GuiService,any)=>(boolean)",
    IsMemoryTrackerEnabled="(GuiService)=>(boolean)",
    IsModalDialog="boolean",
    IsTenFootInterface="(GuiService)=>(boolean)",
    IsWindows="boolean",
    KeyPressed="Event",
    MenuClosed="Event",
    MenuIsOpen="boolean",
    MenuOpened="Event",
    Name="string",
    NetworkPausedEnabledChanged="Event",
    OpenBrowserWindow="(GuiService,string)=>()",
    OpenNativeOverlay="(GuiService,string,string)=>()",
    Parent="any",
    Remove="(GuiService)=>()",
    RemoveCenterDialog="(GuiService,any)=>()",
    RemoveKey="(GuiService,string)=>()",
    RemoveSelectionGroup="(GuiService,string)=>()",
    RemoveSpecialKey="(GuiService,any)=>()",
    RobloxLocked="boolean",
    SafeZoneOffsetsChanged="Event",
    SelectedCoreObject="any",
    SelectedObject="any",
    SetAttribute="(GuiService,string,any)=>()",
    SetEmotesMenuOpen="(GuiService,boolean)=>()",
    SetGameplayPausedNotificationEnabled="(GuiService,boolean)=>()",
    SetGlobalGuiInset="(GuiService,number,number,number,number)=>()",
    SetInspectMenuEnabled="(GuiService,boolean)=>()",
    SetMenuIsOpen="(GuiService,boolean,string)=>()",
    SetSafeZoneOffsets="(GuiService,number,number,number,number)=>()",
    SetUiMessage="(GuiService,any,string)=>()",
    ShowLeaveConfirmation="Event",
    ShowStatsBasedOnInputString="(GuiService,string)=>(boolean)",
    SpecialKeyPressed="Event",
    Tags="any",
    ToggleFullscreen="(GuiService)=>()",
    UiMessageChanged="Event",
    WaitForChild="(GuiService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(GuiService)=>(any)",
    className="string",
    clone="(GuiService)=>(any)",
    destroy="(GuiService)=>()",
    findFirstChild="(GuiService,string,boolean)=>(any)",
    getChildren="(GuiService)=>(any)",
    isA="(GuiService,string)=>(boolean)",
    isDescendantOf="(GuiService,any)=>(boolean)",
    remove="(GuiService)=>()"}


, SolidModelContentProvider={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SolidModelContentProvider)=>()",
    Clone="(SolidModelContentProvider)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SolidModelContentProvider)=>()",
    FindFirstAncestor="(SolidModelContentProvider,string)=>(any)",
    FindFirstAncestorOfClass="(SolidModelContentProvider,string)=>(any)",
    FindFirstAncestorWhichIsA="(SolidModelContentProvider,string)=>(any)",
    FindFirstChild="(SolidModelContentProvider,string,boolean)=>(any)",
    FindFirstChildOfClass="(SolidModelContentProvider,string)=>(any)",
    FindFirstChildWhichIsA="(SolidModelContentProvider,string,boolean)=>(any)",
    GetAttribute="(SolidModelContentProvider,string)=>(any)",
    GetAttributeChangedSignal="(SolidModelContentProvider,string)=>(any)",
    GetAttributes="(SolidModelContentProvider)=>(any)",
    GetChildren="(SolidModelContentProvider)=>(any)",
    GetDebugId="(SolidModelContentProvider,number)=>(string)",
    GetDescendants="(SolidModelContentProvider)=>(any)",
    GetFullName="(SolidModelContentProvider)=>(string)",
    GetPropertyChangedSignal="(SolidModelContentProvider,string)=>(any)",
    IsA="(SolidModelContentProvider,string)=>(boolean)",
    IsAncestorOf="(SolidModelContentProvider,any)=>(boolean)",
    IsDescendantOf="(SolidModelContentProvider,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(SolidModelContentProvider)=>()",
    RobloxLocked="boolean",
    SetAttribute="(SolidModelContentProvider,string,any)=>()",
    Tags="any",
    WaitForChild="(SolidModelContentProvider,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(SolidModelContentProvider)=>(any)",
    className="string",
    clone="(SolidModelContentProvider)=>(any)",
    destroy="(SolidModelContentProvider)=>()",
    findFirstChild="(SolidModelContentProvider,string,boolean)=>(any)",
    getChildren="(SolidModelContentProvider)=>(any)",
    isA="(SolidModelContentProvider,string)=>(boolean)",
    isDescendantOf="(SolidModelContentProvider,any)=>(boolean)",
    remove="(SolidModelContentProvider)=>()"}


, HandleAdornment={
    Adornee="any",
    AlwaysOnTop="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CFrame="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(HandleAdornment)=>()",
    Clone="(HandleAdornment)=>(any)",
    Color="any",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(HandleAdornment)=>()",
    FindFirstAncestor="(HandleAdornment,string)=>(any)",
    FindFirstAncestorOfClass="(HandleAdornment,string)=>(any)",
    FindFirstAncestorWhichIsA="(HandleAdornment,string)=>(any)",
    FindFirstChild="(HandleAdornment,string,boolean)=>(any)",
    FindFirstChildOfClass="(HandleAdornment,string)=>(any)",
    FindFirstChildWhichIsA="(HandleAdornment,string,boolean)=>(any)",
    GetAttribute="(HandleAdornment,string)=>(any)",
    GetAttributeChangedSignal="(HandleAdornment,string)=>(any)",
    GetAttributes="(HandleAdornment)=>(any)",
    GetChildren="(HandleAdornment)=>(any)",
    GetDebugId="(HandleAdornment,number)=>(string)",
    GetDescendants="(HandleAdornment)=>(any)",
    GetFullName="(HandleAdornment)=>(string)",
    GetPropertyChangedSignal="(HandleAdornment,string)=>(any)",
    IsA="(HandleAdornment,string)=>(boolean)",
    IsAncestorOf="(HandleAdornment,any)=>(boolean)",
    IsDescendantOf="(HandleAdornment,any)=>(boolean)",
    MouseButton1Down="Event",
    MouseButton1Up="Event",
    MouseEnter="Event",
    MouseLeave="Event",
    Name="string",
    Parent="any",
    Remove="(HandleAdornment)=>()",
    RobloxLocked="boolean",
    SetAttribute="(HandleAdornment,string,any)=>()",
    SizeRelativeOffset="Vector3",
    Tags="any",
    Transparency="number",
    Visible="boolean",
    WaitForChild="(HandleAdornment,string,number)=>(any)",
    ZIndex="number",
    archivable="boolean",
    childAdded="Event",
    children="(HandleAdornment)=>(any)",
    className="string",
    clone="(HandleAdornment)=>(any)",
    destroy="(HandleAdornment)=>()",
    findFirstChild="(HandleAdornment,string,boolean)=>(any)",
    getChildren="(HandleAdornment)=>(any)",
    isA="(HandleAdornment,string)=>(boolean)",
    isDescendantOf="(HandleAdornment,any)=>(boolean)",
    remove="(HandleAdornment)=>()"}


, HapticService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(HapticService)=>()",
    Clone="(HapticService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(HapticService)=>()",
    FindFirstAncestor="(HapticService,string)=>(any)",
    FindFirstAncestorOfClass="(HapticService,string)=>(any)",
    FindFirstAncestorWhichIsA="(HapticService,string)=>(any)",
    FindFirstChild="(HapticService,string,boolean)=>(any)",
    FindFirstChildOfClass="(HapticService,string)=>(any)",
    FindFirstChildWhichIsA="(HapticService,string,boolean)=>(any)",
    GetAttribute="(HapticService,string)=>(any)",
    GetAttributeChangedSignal="(HapticService,string)=>(any)",
    GetAttributes="(HapticService)=>(any)",
    GetChildren="(HapticService)=>(any)",
    GetDebugId="(HapticService,number)=>(string)",
    GetDescendants="(HapticService)=>(any)",
    GetFullName="(HapticService)=>(string)",
    GetMotor="(HapticService,any,any)=>(any)",
    GetPropertyChangedSignal="(HapticService,string)=>(any)",
    IsA="(HapticService,string)=>(boolean)",
    IsAncestorOf="(HapticService,any)=>(boolean)",
    IsDescendantOf="(HapticService,any)=>(boolean)",
    IsMotorSupported="(HapticService,any,any)=>(boolean)",
    IsVibrationSupported="(HapticService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(HapticService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(HapticService,string,any)=>()",
    SetMotor="(HapticService,any,any,any)=>()",
    Tags="any",
    WaitForChild="(HapticService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(HapticService)=>(any)",
    className="string",
    clone="(HapticService)=>(any)",
    destroy="(HapticService)=>()",
    findFirstChild="(HapticService,string,boolean)=>(any)",
    getChildren="(HapticService)=>(any)",
    isA="(HapticService,string)=>(boolean)",
    isDescendantOf="(HapticService,any)=>(boolean)",
    remove="(HapticService)=>()"}


, ImageHandleAdornment={
    Adornee="any",
    AlwaysOnTop="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CFrame="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ImageHandleAdornment)=>()",
    Clone="(ImageHandleAdornment)=>(any)",
    Color="any",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ImageHandleAdornment)=>()",
    FindFirstAncestor="(ImageHandleAdornment,string)=>(any)",
    FindFirstAncestorOfClass="(ImageHandleAdornment,string)=>(any)",
    FindFirstAncestorWhichIsA="(ImageHandleAdornment,string)=>(any)",
    FindFirstChild="(ImageHandleAdornment,string,boolean)=>(any)",
    FindFirstChildOfClass="(ImageHandleAdornment,string)=>(any)",
    FindFirstChildWhichIsA="(ImageHandleAdornment,string,boolean)=>(any)",
    GetAttribute="(ImageHandleAdornment,string)=>(any)",
    GetAttributeChangedSignal="(ImageHandleAdornment,string)=>(any)",
    GetAttributes="(ImageHandleAdornment)=>(any)",
    GetChildren="(ImageHandleAdornment)=>(any)",
    GetDebugId="(ImageHandleAdornment,number)=>(string)",
    GetDescendants="(ImageHandleAdornment)=>(any)",
    GetFullName="(ImageHandleAdornment)=>(string)",
    GetPropertyChangedSignal="(ImageHandleAdornment,string)=>(any)",
    Image="any",
    IsA="(ImageHandleAdornment,string)=>(boolean)",
    IsAncestorOf="(ImageHandleAdornment,any)=>(boolean)",
    IsDescendantOf="(ImageHandleAdornment,any)=>(boolean)",
    MouseButton1Down="Event",
    MouseButton1Up="Event",
    MouseEnter="Event",
    MouseLeave="Event",
    Name="string",
    Parent="any",
    Remove="(ImageHandleAdornment)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ImageHandleAdornment,string,any)=>()",
    Size="Vector2",
    SizeRelativeOffset="Vector3",
    Tags="any",
    Transparency="number",
    Visible="boolean",
    WaitForChild="(ImageHandleAdornment,string,number)=>(any)",
    ZIndex="number",
    archivable="boolean",
    childAdded="Event",
    children="(ImageHandleAdornment)=>(any)",
    className="string",
    clone="(ImageHandleAdornment)=>(any)",
    destroy="(ImageHandleAdornment)=>()",
    findFirstChild="(ImageHandleAdornment,string,boolean)=>(any)",
    getChildren="(ImageHandleAdornment)=>(any)",
    isA="(ImageHandleAdornment,string)=>(boolean)",
    isDescendantOf="(ImageHandleAdornment,any)=>(boolean)",
    remove="(ImageHandleAdornment)=>()"}


, Hat={
    AncestryChanged="Event",
    Archivable="boolean",
    AttachmentForward="Vector3",
    AttachmentPoint="CFrame",
    AttachmentPos="Vector3",
    AttachmentRight="Vector3",
    AttachmentUp="Vector3",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BackendAccoutrementState="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Hat)=>()",
    Clone="(Hat)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Hat)=>()",
    FindFirstAncestor="(Hat,string)=>(any)",
    FindFirstAncestorOfClass="(Hat,string)=>(any)",
    FindFirstAncestorWhichIsA="(Hat,string)=>(any)",
    FindFirstChild="(Hat,string,boolean)=>(any)",
    FindFirstChildOfClass="(Hat,string)=>(any)",
    FindFirstChildWhichIsA="(Hat,string,boolean)=>(any)",
    GetAttribute="(Hat,string)=>(any)",
    GetAttributeChangedSignal="(Hat,string)=>(any)",
    GetAttributes="(Hat)=>(any)",
    GetChildren="(Hat)=>(any)",
    GetDebugId="(Hat,number)=>(string)",
    GetDescendants="(Hat)=>(any)",
    GetFullName="(Hat)=>(string)",
    GetPropertyChangedSignal="(Hat,string)=>(any)",
    IsA="(Hat,string)=>(boolean)",
    IsAncestorOf="(Hat,any)=>(boolean)",
    IsDescendantOf="(Hat,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Hat)=>()",
    RobloxLocked="boolean",
    ServerEquipAccoutrement="Event",
    ServerUnequipAccoutrement="Event",
    SetAttribute="(Hat,string,any)=>()",
    Tags="any",
    WaitForChild="(Hat,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Hat)=>(any)",
    className="string",
    clone="(Hat)=>(any)",
    destroy="(Hat)=>()",
    findFirstChild="(Hat,string,boolean)=>(any)",
    getChildren="(Hat)=>(any)",
    isA="(Hat,string)=>(boolean)",
    isDescendantOf="(Hat,any)=>(boolean)",
    remove="(Hat)=>()"}


, HingeConstraint={
    Active="boolean",
    Actuator,="any",
    AncestryChanged="Event",
    AngularSpeed="number",
    AngularVelocity="number",
    Archivable="boolean",
    Attachment0="any",
    Attachment1="any",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(HingeConstraint)=>()",
    Clone="(HingeConstraint)=>(any)",
    Color="any",
    CurrentAngle="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(HingeConstraint)=>()",
    Enabled="boolean",
    FindFirstAncestor="(HingeConstraint,string)=>(any)",
    FindFirstAncestorOfClass="(HingeConstraint,string)=>(any)",
    FindFirstAncestorWhichIsA="(HingeConstraint,string)=>(any)",
    FindFirstChild="(HingeConstraint,string,boolean)=>(any)",
    FindFirstChildOfClass="(HingeConstraint,string)=>(any)",
    FindFirstChildWhichIsA="(HingeConstraint,string,boolean)=>(any)",
    GetAttribute="(HingeConstraint,string)=>(any)",
    GetAttributeChangedSignal="(HingeConstraint,string)=>(any)",
    GetAttributes="(HingeConstraint)=>(any)",
    GetChildren="(HingeConstraint)=>(any)",
    GetDebugId="(HingeConstraint,number)=>(string)",
    GetDescendants="(HingeConstraint)=>(any)",
    GetFullName="(HingeConstraint)=>(string)",
    GetPropertyChangedSignal="(HingeConstraint,string)=>(any)",
    IsA="(HingeConstraint,string)=>(boolean)",
    IsAncestorOf="(HingeConstraint,any)=>(boolean)",
    IsDescendantOf="(HingeConstraint,any)=>(boolean)",
    LimitsEnabled="boolean",
    LowerAngle="number",
    MotorMaxAcceleration="number",
    MotorMaxTorque="number",
    Name="string",
    Parent="any",
    Radius="number",
    Remove="(HingeConstraint)=>()",
    Restitution="number",
    RobloxLocked="boolean",
    ServoMaxTorque="number",
    SetAttribute="(HingeConstraint,string,any)=>()",
    Tags="any",
    TargetAngle="number",
    UpperAngle="number",
    Visible="boolean",
    WaitForChild="(HingeConstraint,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(HingeConstraint)=>(any)",
    className="string",
    clone="(HingeConstraint)=>(any)",
    destroy="(HingeConstraint)=>()",
    findFirstChild="(HingeConstraint,string,boolean)=>(any)",
    getChildren="(HingeConstraint)=>(any)",
    isA="(HingeConstraint,string)=>(boolean)",
    isDescendantOf="(HingeConstraint,any)=>(boolean)",
    remove="(HingeConstraint)=>()"}


, Hint={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Hint)=>()",
    Clone="(Hint)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Hint)=>()",
    FindFirstAncestor="(Hint,string)=>(any)",
    FindFirstAncestorOfClass="(Hint,string)=>(any)",
    FindFirstAncestorWhichIsA="(Hint,string)=>(any)",
    FindFirstChild="(Hint,string,boolean)=>(any)",
    FindFirstChildOfClass="(Hint,string)=>(any)",
    FindFirstChildWhichIsA="(Hint,string,boolean)=>(any)",
    GetAttribute="(Hint,string)=>(any)",
    GetAttributeChangedSignal="(Hint,string)=>(any)",
    GetAttributes="(Hint)=>(any)",
    GetChildren="(Hint)=>(any)",
    GetDebugId="(Hint,number)=>(string)",
    GetDescendants="(Hint)=>(any)",
    GetFullName="(Hint)=>(string)",
    GetPropertyChangedSignal="(Hint,string)=>(any)",
    IsA="(Hint,string)=>(boolean)",
    IsAncestorOf="(Hint,any)=>(boolean)",
    IsDescendantOf="(Hint,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Hint)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Hint,string,any)=>()",
    Tags="any",
    Text="string",
    WaitForChild="(Hint,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Hint)=>(any)",
    className="string",
    clone="(Hint)=>(any)",
    destroy="(Hint)=>()",
    findFirstChild="(Hint,string,boolean)=>(any)",
    getChildren="(Hint)=>(any)",
    isA="(Hint,string)=>(boolean)",
    isDescendantOf="(Hint,any)=>(boolean)",
    remove="(Hint)=>()"}


, Hole={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Hole)=>()",
    Clone="(Hole)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Hole)=>()",
    FaceId="any",
    FindFirstAncestor="(Hole,string)=>(any)",
    FindFirstAncestorOfClass="(Hole,string)=>(any)",
    FindFirstAncestorWhichIsA="(Hole,string)=>(any)",
    FindFirstChild="(Hole,string,boolean)=>(any)",
    FindFirstChildOfClass="(Hole,string)=>(any)",
    FindFirstChildWhichIsA="(Hole,string,boolean)=>(any)",
    GetAttribute="(Hole,string)=>(any)",
    GetAttributeChangedSignal="(Hole,string)=>(any)",
    GetAttributes="(Hole)=>(any)",
    GetChildren="(Hole)=>(any)",
    GetDebugId="(Hole,number)=>(string)",
    GetDescendants="(Hole)=>(any)",
    GetFullName="(Hole)=>(string)",
    GetPropertyChangedSignal="(Hole,string)=>(any)",
    InOut="any",
    IsA="(Hole,string)=>(boolean)",
    IsAncestorOf="(Hole,any)=>(boolean)",
    IsDescendantOf="(Hole,any)=>(boolean)",
    LeftRight="any",
    Name="string",
    Parent="any",
    Remove="(Hole)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Hole,string,any)=>()",
    Tags="any",
    TopBottom="any",
    WaitForChild="(Hole,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Hole)=>(any)",
    className="string",
    clone="(Hole)=>(any)",
    destroy="(Hole)=>()",
    findFirstChild="(Hole,string,boolean)=>(any)",
    getChildren="(Hole)=>(any)",
    isA="(Hole,string)=>(boolean)",
    isDescendantOf="(Hole,any)=>(boolean)",
    remove="(Hole)=>()"}


, Hopper={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Hopper)=>()",
    Clone="(Hopper)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Hopper)=>()",
    FindFirstAncestor="(Hopper,string)=>(any)",
    FindFirstAncestorOfClass="(Hopper,string)=>(any)",
    FindFirstAncestorWhichIsA="(Hopper,string)=>(any)",
    FindFirstChild="(Hopper,string,boolean)=>(any)",
    FindFirstChildOfClass="(Hopper,string)=>(any)",
    FindFirstChildWhichIsA="(Hopper,string,boolean)=>(any)",
    GetAttribute="(Hopper,string)=>(any)",
    GetAttributeChangedSignal="(Hopper,string)=>(any)",
    GetAttributes="(Hopper)=>(any)",
    GetChildren="(Hopper)=>(any)",
    GetDebugId="(Hopper,number)=>(string)",
    GetDescendants="(Hopper)=>(any)",
    GetFullName="(Hopper)=>(string)",
    GetPropertyChangedSignal="(Hopper,string)=>(any)",
    IsA="(Hopper,string)=>(boolean)",
    IsAncestorOf="(Hopper,any)=>(boolean)",
    IsDescendantOf="(Hopper,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Hopper)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Hopper,string,any)=>()",
    Tags="any",
    WaitForChild="(Hopper,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Hopper)=>(any)",
    className="string",
    clone="(Hopper)=>(any)",
    destroy="(Hopper)=>()",
    findFirstChild="(Hopper,string,boolean)=>(any)",
    getChildren="(Hopper)=>(any)",
    isA="(Hopper,string)=>(boolean)",
    isDescendantOf="(Hopper,any)=>(boolean)",
    remove="(Hopper)=>()"}


, HopperBin={
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Bin,="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(HopperBin)=>()",
    Clone="(HopperBin)=>(any)",
    Command="string",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Deselected="Event",
    Destroy="(HopperBin)=>()",
    Disable="(HopperBin)=>()",
    FindFirstAncestor="(HopperBin,string)=>(any)",
    FindFirstAncestorOfClass="(HopperBin,string)=>(any)",
    FindFirstAncestorWhichIsA="(HopperBin,string)=>(any)",
    FindFirstChild="(HopperBin,string,boolean)=>(any)",
    FindFirstChildOfClass="(HopperBin,string)=>(any)",
    FindFirstChildWhichIsA="(HopperBin,string,boolean)=>(any)",
    GetAttribute="(HopperBin,string)=>(any)",
    GetAttributeChangedSignal="(HopperBin,string)=>(any)",
    GetAttributes="(HopperBin)=>(any)",
    GetChildren="(HopperBin)=>(any)",
    GetDebugId="(HopperBin,number)=>(string)",
    GetDescendants="(HopperBin)=>(any)",
    GetFullName="(HopperBin)=>(string)",
    GetPropertyChangedSignal="(HopperBin,string)=>(any)",
    IsA="(HopperBin,string)=>(boolean)",
    IsAncestorOf="(HopperBin,any)=>(boolean)",
    IsDescendantOf="(HopperBin,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(HopperBin)=>()",
    ReplicatedSelected="Event",
    RobloxLocked="boolean",
    Selected="Event",
    SetAttribute="(HopperBin,string,any)=>()",
    Tags="any",
    TextureId="any",
    TextureName="string",
    ToggleSelect="(HopperBin)=>()",
    WaitForChild="(HopperBin,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(HopperBin)=>(any)",
    className="string",
    clone="(HopperBin)=>(any)",
    destroy="(HopperBin)=>()",
    findFirstChild="(HopperBin,string,boolean)=>(any)",
    getChildren="(HopperBin)=>(any)",
    isA="(HopperBin,string)=>(boolean)",
    isDescendantOf="(HopperBin,any)=>(boolean)",
    remove="(HopperBin)=>()"}


, HttpRbxApiService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(HttpRbxApiService)=>()",
    Clone="(HttpRbxApiService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(HttpRbxApiService)=>()",
    FindFirstAncestor="(HttpRbxApiService,string)=>(any)",
    FindFirstAncestorOfClass="(HttpRbxApiService,string)=>(any)",
    FindFirstAncestorWhichIsA="(HttpRbxApiService,string)=>(any)",
    FindFirstChild="(HttpRbxApiService,string,boolean)=>(any)",
    FindFirstChildOfClass="(HttpRbxApiService,string)=>(any)",
    FindFirstChildWhichIsA="(HttpRbxApiService,string,boolean)=>(any)",
    GetAsync="(HttpRbxApiService,string,any,any)=>(string)",
    GetAsyncFullUrl="(HttpRbxApiService,string,any,any)=>(string)",
    GetAttribute="(HttpRbxApiService,string)=>(any)",
    GetAttributeChangedSignal="(HttpRbxApiService,string)=>(any)",
    GetAttributes="(HttpRbxApiService)=>(any)",
    GetChildren="(HttpRbxApiService)=>(any)",
    GetDebugId="(HttpRbxApiService,number)=>(string)",
    GetDescendants="(HttpRbxApiService)=>(any)",
    GetDocumentationUrl="(HttpRbxApiService,string)=>(string)",
    GetFullName="(HttpRbxApiService)=>(string)",
    GetPropertyChangedSignal="(HttpRbxApiService,string)=>(any)",
    IsA="(HttpRbxApiService,string)=>(boolean)",
    IsAncestorOf="(HttpRbxApiService,any)=>(boolean)",
    IsDescendantOf="(HttpRbxApiService,any)=>(boolean)",
    Name="string",
    Parent="any",
    PostAsync="(HttpRbxApiService,string,string,any,any,any)=>(string)",
    PostAsyncFullUrl="(HttpRbxApiService,string,string,any,any,any)=>(string)",
    Remove="(HttpRbxApiService)=>()",
    RequestAsync="(HttpRbxApiService,any,any,any,any)=>(string)",
    RobloxLocked="boolean",
    SetAttribute="(HttpRbxApiService,string,any)=>()",
    Tags="any",
    WaitForChild="(HttpRbxApiService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(HttpRbxApiService)=>(any)",
    className="string",
    clone="(HttpRbxApiService)=>(any)",
    destroy="(HttpRbxApiService)=>()",
    findFirstChild="(HttpRbxApiService,string,boolean)=>(any)",
    getChildren="(HttpRbxApiService)=>(any)",
    isA="(HttpRbxApiService,string)=>(boolean)",
    isDescendantOf="(HttpRbxApiService,any)=>(boolean)",
    remove="(HttpRbxApiService)=>()"}


, Sparkles={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Sparkles)=>()",
    Clone="(Sparkles)=>(any)",
    Color="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Sparkles)=>()",
    Enabled="boolean",
    FindFirstAncestor="(Sparkles,string)=>(any)",
    FindFirstAncestorOfClass="(Sparkles,string)=>(any)",
    FindFirstAncestorWhichIsA="(Sparkles,string)=>(any)",
    FindFirstChild="(Sparkles,string,boolean)=>(any)",
    FindFirstChildOfClass="(Sparkles,string)=>(any)",
    FindFirstChildWhichIsA="(Sparkles,string,boolean)=>(any)",
    GetAttribute="(Sparkles,string)=>(any)",
    GetAttributeChangedSignal="(Sparkles,string)=>(any)",
    GetAttributes="(Sparkles)=>(any)",
    GetChildren="(Sparkles)=>(any)",
    GetDebugId="(Sparkles,number)=>(string)",
    GetDescendants="(Sparkles)=>(any)",
    GetFullName="(Sparkles)=>(string)",
    GetPropertyChangedSignal="(Sparkles,string)=>(any)",
    IsA="(Sparkles,string)=>(boolean)",
    IsAncestorOf="(Sparkles,any)=>(boolean)",
    IsDescendantOf="(Sparkles,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Sparkles)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Sparkles,string,any)=>()",
    SparkleColor="Color3",
    Tags="any",
    WaitForChild="(Sparkles,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Sparkles)=>(any)",
    className="string",
    clone="(Sparkles)=>(any)",
    destroy="(Sparkles)=>()",
    findFirstChild="(Sparkles,string,boolean)=>(any)",
    getChildren="(Sparkles)=>(any)",
    isA="(Sparkles,string)=>(boolean)",
    isDescendantOf="(Sparkles,any)=>(boolean)",
    remove="(Sparkles)=>()"}


, HttpRequest={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Cancel="(HttpRequest)=>()",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(HttpRequest)=>()",
    Clone="(HttpRequest)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(HttpRequest)=>()",
    FindFirstAncestor="(HttpRequest,string)=>(any)",
    FindFirstAncestorOfClass="(HttpRequest,string)=>(any)",
    FindFirstAncestorWhichIsA="(HttpRequest,string)=>(any)",
    FindFirstChild="(HttpRequest,string,boolean)=>(any)",
    FindFirstChildOfClass="(HttpRequest,string)=>(any)",
    FindFirstChildWhichIsA="(HttpRequest,string,boolean)=>(any)",
    GetAttribute="(HttpRequest,string)=>(any)",
    GetAttributeChangedSignal="(HttpRequest,string)=>(any)",
    GetAttributes="(HttpRequest)=>(any)",
    GetChildren="(HttpRequest)=>(any)",
    GetDebugId="(HttpRequest,number)=>(string)",
    GetDescendants="(HttpRequest)=>(any)",
    GetFullName="(HttpRequest)=>(string)",
    GetPropertyChangedSignal="(HttpRequest,string)=>(any)",
    IsA="(HttpRequest,string)=>(boolean)",
    IsAncestorOf="(HttpRequest,any)=>(boolean)",
    IsDescendantOf="(HttpRequest,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(HttpRequest)=>()",
    RobloxLocked="boolean",
    SetAttribute="(HttpRequest,string,any)=>()",
    Start="(HttpRequest,any)=>()",
    Tags="any",
    WaitForChild="(HttpRequest,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(HttpRequest)=>(any)",
    className="string",
    clone="(HttpRequest)=>(any)",
    destroy="(HttpRequest)=>()",
    findFirstChild="(HttpRequest,string,boolean)=>(any)",
    getChildren="(HttpRequest)=>(any)",
    isA="(HttpRequest,string)=>(boolean)",
    isDescendantOf="(HttpRequest,any)=>(boolean)",
    remove="(HttpRequest)=>()"}


, RbxAnalyticsService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(RbxAnalyticsService)=>()",
    Clone="(RbxAnalyticsService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(RbxAnalyticsService)=>()",
    FindFirstAncestor="(RbxAnalyticsService,string)=>(any)",
    FindFirstAncestorOfClass="(RbxAnalyticsService,string)=>(any)",
    FindFirstAncestorWhichIsA="(RbxAnalyticsService,string)=>(any)",
    FindFirstChild="(RbxAnalyticsService,string,boolean)=>(any)",
    FindFirstChildOfClass="(RbxAnalyticsService,string)=>(any)",
    FindFirstChildWhichIsA="(RbxAnalyticsService,string,boolean)=>(any)",
    GetAttribute="(RbxAnalyticsService,string)=>(any)",
    GetAttributeChangedSignal="(RbxAnalyticsService,string)=>(any)",
    GetAttributes="(RbxAnalyticsService)=>(any)",
    GetChildren="(RbxAnalyticsService)=>(any)",
    GetClientId="(RbxAnalyticsService)=>(string)",
    GetDebugId="(RbxAnalyticsService,number)=>(string)",
    GetDescendants="(RbxAnalyticsService)=>(any)",
    GetFullName="(RbxAnalyticsService)=>(string)",
    GetPropertyChangedSignal="(RbxAnalyticsService,string)=>(any)",
    GetSessionId="(RbxAnalyticsService)=>(string)",
    IsA="(RbxAnalyticsService,string)=>(boolean)",
    IsAncestorOf="(RbxAnalyticsService,any)=>(boolean)",
    IsDescendantOf="(RbxAnalyticsService,any)=>(boolean)",
    Name="string",
    Parent="any",
    ReleaseRBXEventStream="(RbxAnalyticsService,string)=>()",
    Remove="(RbxAnalyticsService)=>()",
    ReportCounter="(RbxAnalyticsService,string,number)=>()",
    ReportInfluxSeries="(RbxAnalyticsService,string,any,number)=>()",
    ReportStats="(RbxAnalyticsService,string,number)=>()",
    ReportToDiagByCountryCode="(RbxAnalyticsService,string,string,number)=>()",
    RobloxLocked="boolean",
    SendEventDeferred="(RbxAnalyticsService,string,string,string,any)=>()",
    SendEventImmediately="(RbxAnalyticsService,string,string,string,any)=>()",
    SetAttribute="(RbxAnalyticsService,string,any)=>()",
    SetRBXEvent="(RbxAnalyticsService,string,string,string,any)=>()",
    SetRBXEventStream="(RbxAnalyticsService,string,string,string,any)=>()",
    Tags="any",
    TrackEvent="(RbxAnalyticsService,string,string,string,number)=>()",
    TrackEventWithArgs="(RbxAnalyticsService,string,string,string,any,number)=>()",
    UpdateHeartbeatObject="(RbxAnalyticsService,any)=>()",
    WaitForChild="(RbxAnalyticsService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(RbxAnalyticsService)=>(any)",
    className="string",
    clone="(RbxAnalyticsService)=>(any)",
    destroy="(RbxAnalyticsService)=>()",
    findFirstChild="(RbxAnalyticsService,string,boolean)=>(any)",
    getChildren="(RbxAnalyticsService)=>(any)",
    isA="(RbxAnalyticsService,string)=>(boolean)",
    isDescendantOf="(RbxAnalyticsService,any)=>(boolean)",
    remove="(RbxAnalyticsService)=>()"}


, HttpService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(HttpService)=>()",
    Clone="(HttpService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(HttpService)=>()",
    FindFirstAncestor="(HttpService,string)=>(any)",
    FindFirstAncestorOfClass="(HttpService,string)=>(any)",
    FindFirstAncestorWhichIsA="(HttpService,string)=>(any)",
    FindFirstChild="(HttpService,string,boolean)=>(any)",
    FindFirstChildOfClass="(HttpService,string)=>(any)",
    FindFirstChildWhichIsA="(HttpService,string,boolean)=>(any)",
    GenerateGUID="(HttpService,boolean)=>(string)",
    GetAsync="(HttpService,string,boolean,any)=>(string)",
    GetAttribute="(HttpService,string)=>(any)",
    GetAttributeChangedSignal="(HttpService,string)=>(any)",
    GetAttributes="(HttpService)=>(any)",
    GetChildren="(HttpService)=>(any)",
    GetDebugId="(HttpService,number)=>(string)",
    GetDescendants="(HttpService)=>(any)",
    GetFullName="(HttpService)=>(string)",
    GetHttpEnabled="(HttpService)=>(boolean)",
    GetPropertyChangedSignal="(HttpService,string)=>(any)",
    GetUserAgent="(HttpService)=>(string)",
    HttpEnabled="boolean",
    IsA="(HttpService,string)=>(boolean)",
    IsAncestorOf="(HttpService,any)=>(boolean)",
    IsDescendantOf="(HttpService,any)=>(boolean)",
    JSONDecode="(HttpService,string)=>(any)",
    JSONEncode="(HttpService,any)=>(string)",
    Name="string",
    Parent="any",
    PostAsync="(HttpService,string,string,any,boolean,any)=>(string)",
    Remove="(HttpService)=>()",
    RequestAsync="(HttpService,any)=>(any)",
    RequestInternal="(HttpService,any)=>(any)",
    RobloxLocked="boolean",
    SetAttribute="(HttpService,string,any)=>()",
    SetHttpEnabled="(HttpService,boolean)=>()",
    Tags="any",
    UrlEncode="(HttpService,string)=>(string)",
    WaitForChild="(HttpService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(HttpService)=>(any)",
    className="string",
    clone="(HttpService)=>(any)",
    destroy="(HttpService)=>()",
    findFirstChild="(HttpService,string,boolean)=>(any)",
    getChildren="(HttpService)=>(any)",
    isA="(HttpService,string)=>(boolean)",
    isDescendantOf="(HttpService,any)=>(boolean)",
    remove="(HttpService)=>()"}


, Humanoid={
    AddAccessory="(Humanoid,any)=>()",
    AddCustomStatus="(Humanoid,string)=>(boolean)",
    AddStatus="(Humanoid,any)=>(boolean)",
    AncestryChanged="Event",
    AnimationPlayed="Event",
    ApplyDescription="(Humanoid,any)=>()",
    ApplyDescriptionClientServer="(Humanoid,any)=>()",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoJumpEnabled="boolean",
    AutoRotate="boolean",
    AutomaticScalingEnabled="boolean",
    BreakJointsOnDeath="boolean",
    BuildRigFromAttachments="(Humanoid)=>()",
    CacheDefaults="(Humanoid)=>()",
    CameraMaxDistance="number",
    CameraMinDistance="number",
    CameraMode="any",
    CameraOffset="Vector3",
    ChangeState="(Humanoid,any)=>()",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Humanoid)=>()",
    Climbing="Event",
    Clone="(Humanoid)=>(any)",
    Collision,="any",
    CustomStatusAdded="Event",
    CustomStatusRemoved="Event",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Humanoid)=>()",
    Died="Event",
    DisplayDistance,="any",
    EquipTool="(Humanoid,any)=>()",
    FallingDown="Event",
    FindFirstAncestor="(Humanoid,string)=>(any)",
    FindFirstAncestorOfClass="(Humanoid,string)=>(any)",
    FindFirstAncestorWhichIsA="(Humanoid,string)=>(any)",
    FindFirstChild="(Humanoid,string,boolean)=>(any)",
    FindFirstChildOfClass="(Humanoid,string)=>(any)",
    FindFirstChildWhichIsA="(Humanoid,string,boolean)=>(any)",
    FloorMaterial="any",
    FloorMaterialInternal="any",
    FreeFalling="Event",
    GetAccessories="(Humanoid)=>(any)",
    GetAppliedDescription="(Humanoid)=>(any)",
    GetAttribute="(Humanoid,string)=>(any)",
    GetAttributeChangedSignal="(Humanoid,string)=>(any)",
    GetAttributes="(Humanoid)=>(any)",
    GetBodyPartR15="(Humanoid,any)=>(any)",
    GetChildren="(Humanoid)=>(any)",
    GetDebugId="(Humanoid,number)=>(string)",
    GetDescendants="(Humanoid)=>(any)",
    GetFullName="(Humanoid)=>(string)",
    GetLimb="(Humanoid,any)=>(any)",
    GetPlayingAnimationTracks="(Humanoid)=>(any)",
    GetPropertyChangedSignal="(Humanoid,string)=>(any)",
    GetState="(Humanoid)=>(any)",
    GetStateEnabled="(Humanoid,any)=>(boolean)",
    GetStatuses="(Humanoid)=>(any)",
    GettingUp="Event",
    HasCustomStatus="(Humanoid,string)=>(boolean)",
    HasStatus="(Humanoid,any)=>(boolean)",
    Health="number",
    HealthChanged="Event",
    HealthDisplayDistance="number",
    HealthDisplay,="any",
    Health_XML="number",
    HipHeight="number",
    InternalBodyScale="Vector3",
    InternalHeadScale="number",
    InternalOriginalHipHeight="number",
    IsA="(Humanoid,string)=>(boolean)",
    IsAncestorOf="(Humanoid,any)=>(boolean)",
    IsDescendantOf="(Humanoid,any)=>(boolean)",
    Jump="boolean",
    JumpHeight="number",
    JumpPower="number",
    JumpReplicate="boolean",
    Jumping="Event",
    LeftLeg="any",
    LoadAnimation="(Humanoid,any)=>(any)",
    MaxHealth="number",
    MaxSlopeAngle="number",
    Move="(Humanoid,Vector3,boolean)=>()",
    MoveDirection="Vector3",
    MoveDirectionInternal="Vector3",
    MoveTo="(Humanoid,Vector3,any)=>()",
    MoveToFinished="Event",
    Name="string",
    NameDisplayDistance="number",
    NameOcclusion="any",
    Parent="any",
    PlatformStand="boolean",
    PlatformStanding="Event",
    PlayEmote="(Humanoid,string)=>(boolean)",
    PlayEmoteById="(Humanoid,string,number)=>(boolean)",
    Ragdoll="Event",
    Remove="(Humanoid)=>()",
    RemoveAccessories="(Humanoid)=>()",
    RemoveCustomStatus="(Humanoid,string)=>(boolean)",
    RemoveStatus="(Humanoid,any)=>(boolean)",
    ReplaceBodyPartR15="(Humanoid,any,any)=>(boolean)",
    Rig,="any",
    RightLeg="any",
    RobloxLocked="boolean",
    RootPart="any",
    Running="Event",
    SeatPart="any",
    Seated="Event",
    ServerApplyDescription="Event",
    ServerEquipTool="Event",
    SetAttribute="(Humanoid,string,any)=>()",
    SetClickToWalkEnabled="(Humanoid,boolean)=>()",
    SetNetworkedHumanoidState="Event",
    SetStateEnabled="(Humanoid,any,boolean)=>()",
    Sit="boolean",
    StateChanged="Event",
    StateEnabledChanged="Event",
    StatusAdded="Event",
    StatusRemoved="Event",
    Strafe="boolean",
    Strafing="Event",
    Swimming="Event",
    Tags="any",
    TakeDamage="(Humanoid,number)=>()",
    TargetPoint="Vector3",
    Torso="any",
    Touched="Event",
    UnequipTools="(Humanoid)=>()",
    UseJumpPower="boolean",
    WaitForChild="(Humanoid,string,number)=>(any)",
    WalkAngleError="number",
    WalkDirection="Vector3",
    WalkSpeed="number",
    WalkToPart="any",
    WalkToPoint="Vector3",
    archivable="boolean",
    childAdded="Event",
    children="(Humanoid)=>(any)",
    className="string",
    clone="(Humanoid)=>(any)",
    destroy="(Humanoid)=>()",
    findFirstChild="(Humanoid,string,boolean)=>(any)",
    getChildren="(Humanoid)=>(any)",
    isA="(Humanoid,string)=>(boolean)",
    isDescendantOf="(Humanoid,any)=>(boolean)",
    loadAnimation="(Humanoid,any)=>(any)",
    maxHealth="number",
    remove="(Humanoid)=>()",
    takeDamage="(Humanoid,number)=>()"}


, HumanoidController={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BindButton="(HumanoidController,any,string)=>()",
    ButtonChanged="Event",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(HumanoidController)=>()",
    Clone="(HumanoidController)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(HumanoidController)=>()",
    FindFirstAncestor="(HumanoidController,string)=>(any)",
    FindFirstAncestorOfClass="(HumanoidController,string)=>(any)",
    FindFirstAncestorWhichIsA="(HumanoidController,string)=>(any)",
    FindFirstChild="(HumanoidController,string,boolean)=>(any)",
    FindFirstChildOfClass="(HumanoidController,string)=>(any)",
    FindFirstChildWhichIsA="(HumanoidController,string,boolean)=>(any)",
    GetAttribute="(HumanoidController,string)=>(any)",
    GetAttributeChangedSignal="(HumanoidController,string)=>(any)",
    GetAttributes="(HumanoidController)=>(any)",
    GetButton="(HumanoidController,any)=>(boolean)",
    GetChildren="(HumanoidController)=>(any)",
    GetDebugId="(HumanoidController,number)=>(string)",
    GetDescendants="(HumanoidController)=>(any)",
    GetFullName="(HumanoidController)=>(string)",
    GetPropertyChangedSignal="(HumanoidController,string)=>(any)",
    IsA="(HumanoidController,string)=>(boolean)",
    IsAncestorOf="(HumanoidController,any)=>(boolean)",
    IsDescendantOf="(HumanoidController,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(HumanoidController)=>()",
    RobloxLocked="boolean",
    SetAttribute="(HumanoidController,string,any)=>()",
    Tags="any",
    UnbindButton="(HumanoidController,any)=>()",
    WaitForChild="(HumanoidController,string,number)=>(any)",
    archivable="boolean",
    bindButton="(HumanoidController,any,string)=>()",
    childAdded="Event",
    children="(HumanoidController)=>(any)",
    className="string",
    clone="(HumanoidController)=>(any)",
    destroy="(HumanoidController)=>()",
    findFirstChild="(HumanoidController,string,boolean)=>(any)",
    getButton="(HumanoidController,any)=>(boolean)",
    getChildren="(HumanoidController)=>(any)",
    isA="(HumanoidController,string)=>(boolean)",
    isDescendantOf="(HumanoidController,any)=>(boolean)",
    remove="(HumanoidController)=>()"}


, HumanoidDescription={
    AddEmote="(HumanoidDescription,string,number)=>()",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BackAccessory="string",
    Body,Scale="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(HumanoidDescription)=>()",
    ClimbAnimation="number",
    Clone="(HumanoidDescription)=>(any)",
    DataCost="number",
    DepthScale="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(HumanoidDescription)=>()",
    EmotesChanged="Event",
    EmotesDataInternal="string",
    EquippedEmotesChanged="Event",
    EquippedEmotesDataInternal="string",
    Face="number",
    FaceAccessory="string",
    FallAnimation="number",
    FindFirstAncestor="(HumanoidDescription,string)=>(any)",
    FindFirstAncestorOfClass="(HumanoidDescription,string)=>(any)",
    FindFirstAncestorWhichIsA="(HumanoidDescription,string)=>(any)",
    FindFirstChild="(HumanoidDescription,string,boolean)=>(any)",
    FindFirstChildOfClass="(HumanoidDescription,string)=>(any)",
    FindFirstChildWhichIsA="(HumanoidDescription,string,boolean)=>(any)",
    FrontAccessory="string",
    GetAttribute="(HumanoidDescription,string)=>(any)",
    GetAttributeChangedSignal="(HumanoidDescription,string)=>(any)",
    GetAttributes="(HumanoidDescription)=>(any)",
    GetChildren="(HumanoidDescription)=>(any)",
    GetDebugId="(HumanoidDescription,number)=>(string)",
    GetDescendants="(HumanoidDescription)=>(any)",
    GetEmotes="(HumanoidDescription)=>(any)",
    GetEquippedEmotes="(HumanoidDescription)=>(any)",
    GetFullName="(HumanoidDescription)=>(string)",
    GetPropertyChangedSignal="(HumanoidDescription,string)=>(any)",
    GraphicTShirt="number",
    HairAccessory="string",
    HatAccessory="string",
    Head="number",
    HeadColor="Color3",
    HeadScale="number",
    HeightScale="number",
    IdleAnimation="number",
    IsA="(HumanoidDescription,string)=>(boolean)",
    IsAncestorOf="(HumanoidDescription,any)=>(boolean)",
    IsDescendantOf="(HumanoidDescription,any)=>(boolean)",
    JumpAnimation="number",
    LeftArm="number",
    LeftArmColor="Color3",
    LeftLeg="number",
    LeftLegColor="Color3",
    Name="string",
    NeckAccessory="string",
    NumberEmotesLoaded="number",
    Pants="number",
    Parent="any",
    ProportionScale="number",
    Remove="(HumanoidDescription)=>()",
    RemoveEmote="(HumanoidDescription,string)=>()",
    RightArm="number",
    RightArmColor="Color3",
    RightLeg="number",
    RightLegColor="Color3",
    RobloxLocked="boolean",
    RunAnimation="number",
    SetAttribute="(HumanoidDescription,string,any)=>()",
    SetEmotes="(HumanoidDescription,any)=>()",
    SetEquippedEmotes="(HumanoidDescription,any)=>()",
    Shirt="number",
    ShouldersAccessory="string",
    SwimAnimation="number",
    Tags="any",
    Torso="number",
    TorsoColor="Color3",
    WaistAccessory="string",
    WaitForChild="(HumanoidDescription,string,number)=>(any)",
    WalkAnimation="number",
    WidthScale="number",
    archivable="boolean",
    childAdded="Event",
    children="(HumanoidDescription)=>(any)",
    className="string",
    clone="(HumanoidDescription)=>(any)",
    destroy="(HumanoidDescription)=>()",
    findFirstChild="(HumanoidDescription,string,boolean)=>(any)",
    getChildren="(HumanoidDescription)=>(any)",
    isA="(HumanoidDescription,string)=>(boolean)",
    isDescendantOf="(HumanoidDescription,any)=>(boolean)",
    remove="(HumanoidDescription)=>()"}


, PlayerScripts={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PlayerScripts)=>()",
    ClearComputerCameraMovementModes="(PlayerScripts)=>()",
    ClearComputerMovementModes="(PlayerScripts)=>()",
    ClearTouchCameraMovementModes="(PlayerScripts)=>()",
    ClearTouchMovementModes="(PlayerScripts)=>()",
    Clone="(PlayerScripts)=>(any)",
    ComputerCameraMovementModeRegistered="Event",
    ComputerMovementModeRegistered="Event",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PlayerScripts)=>()",
    FindFirstAncestor="(PlayerScripts,string)=>(any)",
    FindFirstAncestorOfClass="(PlayerScripts,string)=>(any)",
    FindFirstAncestorWhichIsA="(PlayerScripts,string)=>(any)",
    FindFirstChild="(PlayerScripts,string,boolean)=>(any)",
    FindFirstChildOfClass="(PlayerScripts,string)=>(any)",
    FindFirstChildWhichIsA="(PlayerScripts,string,boolean)=>(any)",
    GetAttribute="(PlayerScripts,string)=>(any)",
    GetAttributeChangedSignal="(PlayerScripts,string)=>(any)",
    GetAttributes="(PlayerScripts)=>(any)",
    GetChildren="(PlayerScripts)=>(any)",
    GetDebugId="(PlayerScripts,number)=>(string)",
    GetDescendants="(PlayerScripts)=>(any)",
    GetFullName="(PlayerScripts)=>(string)",
    GetPropertyChangedSignal="(PlayerScripts,string)=>(any)",
    GetRegisteredComputerCameraMovementModes="(PlayerScripts)=>(any)",
    GetRegisteredComputerMovementModes="(PlayerScripts)=>(any)",
    GetRegisteredTouchCameraMovementModes="(PlayerScripts)=>(any)",
    GetRegisteredTouchMovementModes="(PlayerScripts)=>(any)",
    IsA="(PlayerScripts,string)=>(boolean)",
    IsAncestorOf="(PlayerScripts,any)=>(boolean)",
    IsDescendantOf="(PlayerScripts,any)=>(boolean)",
    Name="string",
    Parent="any",
    RegisterComputerCameraMovementMode="(PlayerScripts,any)=>()",
    RegisterComputerMovementMode="(PlayerScripts,any)=>()",
    RegisterTouchCameraMovementMode="(PlayerScripts,any)=>()",
    RegisterTouchMovementMode="(PlayerScripts,any)=>()",
    Remove="(PlayerScripts)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PlayerScripts,string,any)=>()",
    Tags="any",
    TouchCameraMovementModeRegistered="Event",
    TouchMovementModeRegistered="Event",
    WaitForChild="(PlayerScripts,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PlayerScripts)=>(any)",
    className="string",
    clone="(PlayerScripts)=>(any)",
    destroy="(PlayerScripts)=>()",
    findFirstChild="(PlayerScripts,string,boolean)=>(any)",
    getChildren="(PlayerScripts)=>(any)",
    isA="(PlayerScripts,string)=>(boolean)",
    isDescendantOf="(PlayerScripts,any)=>(boolean)",
    remove="(PlayerScripts)=>()"}


, InputObject={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(InputObject)=>()",
    Clone="(InputObject)=>(any)",
    DataCost="number",
    Delta="Vector3",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(InputObject)=>()",
    FindFirstAncestor="(InputObject,string)=>(any)",
    FindFirstAncestorOfClass="(InputObject,string)=>(any)",
    FindFirstAncestorWhichIsA="(InputObject,string)=>(any)",
    FindFirstChild="(InputObject,string,boolean)=>(any)",
    FindFirstChildOfClass="(InputObject,string)=>(any)",
    FindFirstChildWhichIsA="(InputObject,string,boolean)=>(any)",
    GetAttribute="(InputObject,string)=>(any)",
    GetAttributeChangedSignal="(InputObject,string)=>(any)",
    GetAttributes="(InputObject)=>(any)",
    GetChildren="(InputObject)=>(any)",
    GetDebugId="(InputObject,number)=>(string)",
    GetDescendants="(InputObject)=>(any)",
    GetFullName="(InputObject)=>(string)",
    GetPropertyChangedSignal="(InputObject,string)=>(any)",
    IsA="(InputObject,string)=>(boolean)",
    IsAncestorOf="(InputObject,any)=>(boolean)",
    IsDescendantOf="(InputObject,any)=>(boolean)",
    IsModifierKeyDown="(InputObject,any)=>(boolean)",
    KeyCode="any",
    Name="string",
    Parent="any",
    Position="Vector3",
    Remove="(InputObject)=>()",
    RobloxLocked="boolean",
    SetAttribute="(InputObject,string,any)=>()",
    Tags="any",
    UserInputState="any",
    UserInput,="any",
    WaitForChild="(InputObject,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(InputObject)=>(any)",
    className="string",
    clone="(InputObject)=>(any)",
    destroy="(InputObject)=>()",
    findFirstChild="(InputObject,string,boolean)=>(any)",
    getChildren="(InputObject)=>(any)",
    isA="(InputObject,string)=>(boolean)",
    isDescendantOf="(InputObject,any)=>(boolean)",
    remove="(InputObject)=>()"}


, IntValue={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(IntValue)=>()",
    Clone="(IntValue)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(IntValue)=>()",
    FindFirstAncestor="(IntValue,string)=>(any)",
    FindFirstAncestorOfClass="(IntValue,string)=>(any)",
    FindFirstAncestorWhichIsA="(IntValue,string)=>(any)",
    FindFirstChild="(IntValue,string,boolean)=>(any)",
    FindFirstChildOfClass="(IntValue,string)=>(any)",
    FindFirstChildWhichIsA="(IntValue,string,boolean)=>(any)",
    GetAttribute="(IntValue,string)=>(any)",
    GetAttributeChangedSignal="(IntValue,string)=>(any)",
    GetAttributes="(IntValue)=>(any)",
    GetChildren="(IntValue)=>(any)",
    GetDebugId="(IntValue,number)=>(string)",
    GetDescendants="(IntValue)=>(any)",
    GetFullName="(IntValue)=>(string)",
    GetPropertyChangedSignal="(IntValue,string)=>(any)",
    IsA="(IntValue,string)=>(boolean)",
    IsAncestorOf="(IntValue,any)=>(boolean)",
    IsDescendantOf="(IntValue,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(IntValue)=>()",
    RobloxLocked="boolean",
    SetAttribute="(IntValue,string,any)=>()",
    Tags="any",
    Value="number",
    WaitForChild="(IntValue,string,number)=>(any)",
    archivable="boolean",
    changed="Event",
    childAdded="Event",
    children="(IntValue)=>(any)",
    className="string",
    clone="(IntValue)=>(any)",
    destroy="(IntValue)=>()",
    findFirstChild="(IntValue,string,boolean)=>(any)",
    getChildren="(IntValue)=>(any)",
    isA="(IntValue,string)=>(boolean)",
    isDescendantOf="(IntValue,any)=>(boolean)",
    remove="(IntValue)=>()"}


, TextService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(TextService)=>()",
    Clone="(TextService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(TextService)=>()",
    FilterStringAsync="(TextService,string,number,any)=>(any)",
    FindFirstAncestor="(TextService,string)=>(any)",
    FindFirstAncestorOfClass="(TextService,string)=>(any)",
    FindFirstAncestorWhichIsA="(TextService,string)=>(any)",
    FindFirstChild="(TextService,string,boolean)=>(any)",
    FindFirstChildOfClass="(TextService,string)=>(any)",
    FindFirstChildWhichIsA="(TextService,string,boolean)=>(any)",
    GetAttribute="(TextService,string)=>(any)",
    GetAttributeChangedSignal="(TextService,string)=>(any)",
    GetAttributes="(TextService)=>(any)",
    GetChildren="(TextService)=>(any)",
    GetDebugId="(TextService,number)=>(string)",
    GetDescendants="(TextService)=>(any)",
    GetFullName="(TextService)=>(string)",
    GetPropertyChangedSignal="(TextService,string)=>(any)",
    GetTextSize="(TextService,string,number,any,Vector2)=>(Vector2)",
    IsA="(TextService,string)=>(boolean)",
    IsAncestorOf="(TextService,any)=>(boolean)",
    IsDescendantOf="(TextService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(TextService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(TextService,string,any)=>()",
    Tags="any",
    WaitForChild="(TextService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(TextService)=>(any)",
    className="string",
    clone="(TextService)=>(any)",
    destroy="(TextService)=>()",
    findFirstChild="(TextService,string,boolean)=>(any)",
    getChildren="(TextService)=>(any)",
    isA="(TextService,string)=>(boolean)",
    isDescendantOf="(TextService,any)=>(boolean)",
    remove="(TextService)=>()"}


, InventoryPages={
    AdvanceToNextPageAsync="(InventoryPages)=>()",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(InventoryPages)=>()",
    Clone="(InventoryPages)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(InventoryPages)=>()",
    FindFirstAncestor="(InventoryPages,string)=>(any)",
    FindFirstAncestorOfClass="(InventoryPages,string)=>(any)",
    FindFirstAncestorWhichIsA="(InventoryPages,string)=>(any)",
    FindFirstChild="(InventoryPages,string,boolean)=>(any)",
    FindFirstChildOfClass="(InventoryPages,string)=>(any)",
    FindFirstChildWhichIsA="(InventoryPages,string,boolean)=>(any)",
    GetAttribute="(InventoryPages,string)=>(any)",
    GetAttributeChangedSignal="(InventoryPages,string)=>(any)",
    GetAttributes="(InventoryPages)=>(any)",
    GetChildren="(InventoryPages)=>(any)",
    GetCurrentPage="(InventoryPages)=>(any)",
    GetDebugId="(InventoryPages,number)=>(string)",
    GetDescendants="(InventoryPages)=>(any)",
    GetFullName="(InventoryPages)=>(string)",
    GetPropertyChangedSignal="(InventoryPages,string)=>(any)",
    IsA="(InventoryPages,string)=>(boolean)",
    IsAncestorOf="(InventoryPages,any)=>(boolean)",
    IsDescendantOf="(InventoryPages,any)=>(boolean)",
    IsFinished="boolean",
    Name="string",
    Parent="any",
    Remove="(InventoryPages)=>()",
    RobloxLocked="boolean",
    SetAttribute="(InventoryPages,string,any)=>()",
    Tags="any",
    WaitForChild="(InventoryPages,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(InventoryPages)=>(any)",
    className="string",
    clone="(InventoryPages)=>(any)",
    destroy="(InventoryPages)=>()",
    findFirstChild="(InventoryPages,string,boolean)=>(any)",
    getChildren="(InventoryPages)=>(any)",
    isA="(InventoryPages,string)=>(boolean)",
    isDescendantOf="(InventoryPages,any)=>(boolean)",
    remove="(InventoryPages)=>()"}


, TestService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoRuns="boolean",
    Changed="Event",
    Check="(TestService,boolean,string,any,number)=>()",
    Checkpoint="(TestService,string,any,number)=>()",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(TestService)=>()",
    Clone="(TestService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Description="string",
    Destroy="(TestService)=>()",
    Done="(TestService)=>()",
    Error="(TestService,string,any,number)=>()",
    ErrorCount="number",
    ExecuteWithStudioRun="boolean",
    Fail="(TestService,string,any,number)=>()",
    FindFirstAncestor="(TestService,string)=>(any)",
    FindFirstAncestorOfClass="(TestService,string)=>(any)",
    FindFirstAncestorWhichIsA="(TestService,string)=>(any)",
    FindFirstChild="(TestService,string,boolean)=>(any)",
    FindFirstChildOfClass="(TestService,string)=>(any)",
    FindFirstChildWhichIsA="(TestService,string,boolean)=>(any)",
    GetAttribute="(TestService,string)=>(any)",
    GetAttributeChangedSignal="(TestService,string)=>(any)",
    GetAttributes="(TestService)=>(any)",
    GetChildren="(TestService)=>(any)",
    GetDebugId="(TestService,number)=>(string)",
    GetDescendants="(TestService)=>(any)",
    GetFullName="(TestService)=>(string)",
    GetPropertyChangedSignal="(TestService,string)=>(any)",
    Is30FpsThrottleEnabled="boolean",
    IsA="(TestService,string)=>(boolean)",
    IsAncestorOf="(TestService,any)=>(boolean)",
    IsDescendantOf="(TestService,any)=>(boolean)",
    IsPhysicsEnvironmentalThrottled="boolean",
    IsSleepAllowed="boolean",
    Message="(TestService,string,any,number)=>()",
    Name="string",
    NumberOfPlayers="number",
    Parent="any",
    Remove="(TestService)=>()",
    Require="(TestService,boolean,string,any,number)=>()",
    RobloxLocked="boolean",
    Run="(TestService)=>()",
    ServerCollectConditionalResult="Event",
    ServerCollectResult="Event",
    SetAttribute="(TestService,string,any)=>()",
    SimulateSecondsLag="number",
    Tags="any",
    TestCount="number",
    Timeout="number",
    WaitForChild="(TestService,string,number)=>(any)",
    Warn="(TestService,boolean,string,any,number)=>()",
    WarnCount="number",
    archivable="boolean",
    childAdded="Event",
    children="(TestService)=>(any)",
    className="string",
    clone="(TestService)=>(any)",
    destroy="(TestService)=>()",
    findFirstChild="(TestService,string,boolean)=>(any)",
    getChildren="(TestService)=>(any)",
    isA="(TestService,string)=>(boolean)",
    isDescendantOf="(TestService,any)=>(boolean)",
    isFeatureEnabled="(TestService,string)=>(boolean)",
    remove="(TestService)=>()"}


, JointInstance={
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    C0="CFrame",
    C1="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(JointInstance)=>()",
    Clone="(JointInstance)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(JointInstance)=>()",
    Enabled="boolean",
    FindFirstAncestor="(JointInstance,string)=>(any)",
    FindFirstAncestorOfClass="(JointInstance,string)=>(any)",
    FindFirstAncestorWhichIsA="(JointInstance,string)=>(any)",
    FindFirstChild="(JointInstance,string,boolean)=>(any)",
    FindFirstChildOfClass="(JointInstance,string)=>(any)",
    FindFirstChildWhichIsA="(JointInstance,string,boolean)=>(any)",
    GetAttribute="(JointInstance,string)=>(any)",
    GetAttributeChangedSignal="(JointInstance,string)=>(any)",
    GetAttributes="(JointInstance)=>(any)",
    GetChildren="(JointInstance)=>(any)",
    GetDebugId="(JointInstance,number)=>(string)",
    GetDescendants="(JointInstance)=>(any)",
    GetFullName="(JointInstance)=>(string)",
    GetPropertyChangedSignal="(JointInstance,string)=>(any)",
    IsA="(JointInstance,string)=>(boolean)",
    IsAncestorOf="(JointInstance,any)=>(boolean)",
    IsAutoJoint="boolean",
    IsDescendantOf="(JointInstance,any)=>(boolean)",
    Name="string",
    Parent="any",
    Part0="any",
    Part1="any",
    Remove="(JointInstance)=>()",
    RobloxLocked="boolean",
    SetAttribute="(JointInstance,string,any)=>()",
    Tags="any",
    WaitForChild="(JointInstance,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(JointInstance)=>(any)",
    className="string",
    clone="(JointInstance)=>(any)",
    destroy="(JointInstance)=>()",
    findFirstChild="(JointInstance,string,boolean)=>(any)",
    getChildren="(JointInstance)=>(any)",
    isA="(JointInstance,string)=>(boolean)",
    isDescendantOf="(JointInstance,any)=>(boolean)",
    part1="any",
    remove="(JointInstance)=>()"}


, RemoteDebuggerServer={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(RemoteDebuggerServer)=>()",
    Clone="(RemoteDebuggerServer)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(RemoteDebuggerServer)=>()",
    FindFirstAncestor="(RemoteDebuggerServer,string)=>(any)",
    FindFirstAncestorOfClass="(RemoteDebuggerServer,string)=>(any)",
    FindFirstAncestorWhichIsA="(RemoteDebuggerServer,string)=>(any)",
    FindFirstChild="(RemoteDebuggerServer,string,boolean)=>(any)",
    FindFirstChildOfClass="(RemoteDebuggerServer,string)=>(any)",
    FindFirstChildWhichIsA="(RemoteDebuggerServer,string,boolean)=>(any)",
    GetAttribute="(RemoteDebuggerServer,string)=>(any)",
    GetAttributeChangedSignal="(RemoteDebuggerServer,string)=>(any)",
    GetAttributes="(RemoteDebuggerServer)=>(any)",
    GetChildren="(RemoteDebuggerServer)=>(any)",
    GetDebugId="(RemoteDebuggerServer,number)=>(string)",
    GetDescendants="(RemoteDebuggerServer)=>(any)",
    GetFullName="(RemoteDebuggerServer)=>(string)",
    GetPropertyChangedSignal="(RemoteDebuggerServer,string)=>(any)",
    IsA="(RemoteDebuggerServer,string)=>(boolean)",
    IsAncestorOf="(RemoteDebuggerServer,any)=>(boolean)",
    IsDescendantOf="(RemoteDebuggerServer,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(RemoteDebuggerServer)=>()",
    RobloxLocked="boolean",
    SetAttribute="(RemoteDebuggerServer,string,any)=>()",
    Tags="any",
    WaitForChild="(RemoteDebuggerServer,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(RemoteDebuggerServer)=>(any)",
    className="string",
    clone="(RemoteDebuggerServer)=>(any)",
    destroy="(RemoteDebuggerServer)=>()",
    findFirstChild="(RemoteDebuggerServer,string,boolean)=>(any)",
    getChildren="(RemoteDebuggerServer)=>(any)",
    isA="(RemoteDebuggerServer,string)=>(boolean)",
    isDescendantOf="(RemoteDebuggerServer,any)=>(boolean)",
    remove="(RemoteDebuggerServer)=>()"}


, JointsService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(JointsService)=>()",
    ClearJoinAfterMoveJoints="(JointsService)=>()",
    Clone="(JointsService)=>(any)",
    CreateJoinAfterMoveJoints="(JointsService)=>()",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(JointsService)=>()",
    FindFirstAncestor="(JointsService,string)=>(any)",
    FindFirstAncestorOfClass="(JointsService,string)=>(any)",
    FindFirstAncestorWhichIsA="(JointsService,string)=>(any)",
    FindFirstChild="(JointsService,string,boolean)=>(any)",
    FindFirstChildOfClass="(JointsService,string)=>(any)",
    FindFirstChildWhichIsA="(JointsService,string,boolean)=>(any)",
    GetAttribute="(JointsService,string)=>(any)",
    GetAttributeChangedSignal="(JointsService,string)=>(any)",
    GetAttributes="(JointsService)=>(any)",
    GetChildren="(JointsService)=>(any)",
    GetDebugId="(JointsService,number)=>(string)",
    GetDescendants="(JointsService)=>(any)",
    GetFullName="(JointsService)=>(string)",
    GetPropertyChangedSignal="(JointsService,string)=>(any)",
    IsA="(JointsService,string)=>(boolean)",
    IsAncestorOf="(JointsService,any)=>(boolean)",
    IsDescendantOf="(JointsService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(JointsService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(JointsService,string,any)=>()",
    SetJoinAfterMoveInstance="(JointsService,any)=>()",
    SetJoinAfterMoveTarget="(JointsService,any)=>()",
    ShowPermissibleJoints="(JointsService)=>()",
    Tags="any",
    WaitForChild="(JointsService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(JointsService)=>(any)",
    className="string",
    clone="(JointsService)=>(any)",
    destroy="(JointsService)=>()",
    findFirstChild="(JointsService,string,boolean)=>(any)",
    getChildren="(JointsService)=>(any)",
    isA="(JointsService,string)=>(boolean)",
    isDescendantOf="(JointsService,any)=>(boolean)",
    remove="(JointsService)=>()"}


, KeyboardService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(KeyboardService)=>()",
    Clone="(KeyboardService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(KeyboardService)=>()",
    FindFirstAncestor="(KeyboardService,string)=>(any)",
    FindFirstAncestorOfClass="(KeyboardService,string)=>(any)",
    FindFirstAncestorWhichIsA="(KeyboardService,string)=>(any)",
    FindFirstChild="(KeyboardService,string,boolean)=>(any)",
    FindFirstChildOfClass="(KeyboardService,string)=>(any)",
    FindFirstChildWhichIsA="(KeyboardService,string,boolean)=>(any)",
    GetAttribute="(KeyboardService,string)=>(any)",
    GetAttributeChangedSignal="(KeyboardService,string)=>(any)",
    GetAttributes="(KeyboardService)=>(any)",
    GetChildren="(KeyboardService)=>(any)",
    GetDebugId="(KeyboardService,number)=>(string)",
    GetDescendants="(KeyboardService)=>(any)",
    GetFullName="(KeyboardService)=>(string)",
    GetPropertyChangedSignal="(KeyboardService,string)=>(any)",
    IsA="(KeyboardService,string)=>(boolean)",
    IsAncestorOf="(KeyboardService,any)=>(boolean)",
    IsDescendantOf="(KeyboardService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(KeyboardService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(KeyboardService,string,any)=>()",
    Tags="any",
    WaitForChild="(KeyboardService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(KeyboardService)=>(any)",
    className="string",
    clone="(KeyboardService)=>(any)",
    destroy="(KeyboardService)=>()",
    findFirstChild="(KeyboardService,string,boolean)=>(any)",
    getChildren="(KeyboardService)=>(any)",
    isA="(KeyboardService,string)=>(boolean)",
    isDescendantOf="(KeyboardService,any)=>(boolean)",
    remove="(KeyboardService)=>()"}


, KeyframeSequence={
    AddKeyframe="(KeyframeSequence,any)=>()",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AuthoredHipHeight="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(KeyframeSequence)=>()",
    Clone="(KeyframeSequence)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(KeyframeSequence)=>()",
    FindFirstAncestor="(KeyframeSequence,string)=>(any)",
    FindFirstAncestorOfClass="(KeyframeSequence,string)=>(any)",
    FindFirstAncestorWhichIsA="(KeyframeSequence,string)=>(any)",
    FindFirstChild="(KeyframeSequence,string,boolean)=>(any)",
    FindFirstChildOfClass="(KeyframeSequence,string)=>(any)",
    FindFirstChildWhichIsA="(KeyframeSequence,string,boolean)=>(any)",
    GetAttribute="(KeyframeSequence,string)=>(any)",
    GetAttributeChangedSignal="(KeyframeSequence,string)=>(any)",
    GetAttributes="(KeyframeSequence)=>(any)",
    GetChildren="(KeyframeSequence)=>(any)",
    GetDebugId="(KeyframeSequence,number)=>(string)",
    GetDescendants="(KeyframeSequence)=>(any)",
    GetFullName="(KeyframeSequence)=>(string)",
    GetKeyframes="(KeyframeSequence)=>(any)",
    GetPropertyChangedSignal="(KeyframeSequence,string)=>(any)",
    IsA="(KeyframeSequence,string)=>(boolean)",
    IsAncestorOf="(KeyframeSequence,any)=>(boolean)",
    IsDescendantOf="(KeyframeSequence,any)=>(boolean)",
    Loop="boolean",
    Name="string",
    Parent="any",
    Priority="any",
    Remove="(KeyframeSequence)=>()",
    RemoveKeyframe="(KeyframeSequence,any)=>()",
    RobloxLocked="boolean",
    SetAttribute="(KeyframeSequence,string,any)=>()",
    Tags="any",
    WaitForChild="(KeyframeSequence,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(KeyframeSequence)=>(any)",
    className="string",
    clone="(KeyframeSequence)=>(any)",
    destroy="(KeyframeSequence)=>()",
    findFirstChild="(KeyframeSequence,string,boolean)=>(any)",
    getChildren="(KeyframeSequence)=>(any)",
    isA="(KeyframeSequence,string)=>(boolean)",
    isDescendantOf="(KeyframeSequence,any)=>(boolean)",
    remove="(KeyframeSequence)=>()"}


, UILayout={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(UILayout)=>()",
    Clone="(UILayout)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(UILayout)=>()",
    FindFirstAncestor="(UILayout,string)=>(any)",
    FindFirstAncestorOfClass="(UILayout,string)=>(any)",
    FindFirstAncestorWhichIsA="(UILayout,string)=>(any)",
    FindFirstChild="(UILayout,string,boolean)=>(any)",
    FindFirstChildOfClass="(UILayout,string)=>(any)",
    FindFirstChildWhichIsA="(UILayout,string,boolean)=>(any)",
    GetAttribute="(UILayout,string)=>(any)",
    GetAttributeChangedSignal="(UILayout,string)=>(any)",
    GetAttributes="(UILayout)=>(any)",
    GetChildren="(UILayout)=>(any)",
    GetDebugId="(UILayout,number)=>(string)",
    GetDescendants="(UILayout)=>(any)",
    GetFullName="(UILayout)=>(string)",
    GetPropertyChangedSignal="(UILayout,string)=>(any)",
    IsA="(UILayout,string)=>(boolean)",
    IsAncestorOf="(UILayout,any)=>(boolean)",
    IsDescendantOf="(UILayout,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(UILayout)=>()",
    RobloxLocked="boolean",
    SetAttribute="(UILayout,string,any)=>()",
    Tags="any",
    WaitForChild="(UILayout,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(UILayout)=>(any)",
    className="string",
    clone="(UILayout)=>(any)",
    destroy="(UILayout)=>()",
    findFirstChild="(UILayout,string,boolean)=>(any)",
    getChildren="(UILayout)=>(any)",
    isA="(UILayout,string)=>(boolean)",
    isDescendantOf="(UILayout,any)=>(boolean)",
    remove="(UILayout)=>()"}


, SunRaysEffect={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SunRaysEffect)=>()",
    Clone="(SunRaysEffect)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SunRaysEffect)=>()",
    Enabled="boolean",
    FindFirstAncestor="(SunRaysEffect,string)=>(any)",
    FindFirstAncestorOfClass="(SunRaysEffect,string)=>(any)",
    FindFirstAncestorWhichIsA="(SunRaysEffect,string)=>(any)",
    FindFirstChild="(SunRaysEffect,string,boolean)=>(any)",
    FindFirstChildOfClass="(SunRaysEffect,string)=>(any)",
    FindFirstChildWhichIsA="(SunRaysEffect,string,boolean)=>(any)",
    GetAttribute="(SunRaysEffect,string)=>(any)",
    GetAttributeChangedSignal="(SunRaysEffect,string)=>(any)",
    GetAttributes="(SunRaysEffect)=>(any)",
    GetChildren="(SunRaysEffect)=>(any)",
    GetDebugId="(SunRaysEffect,number)=>(string)",
    GetDescendants="(SunRaysEffect)=>(any)",
    GetFullName="(SunRaysEffect)=>(string)",
    GetPropertyChangedSignal="(SunRaysEffect,string)=>(any)",
    Intensity="number",
    IsA="(SunRaysEffect,string)=>(boolean)",
    IsAncestorOf="(SunRaysEffect,any)=>(boolean)",
    IsDescendantOf="(SunRaysEffect,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(SunRaysEffect)=>()",
    RobloxLocked="boolean",
    SetAttribute="(SunRaysEffect,string,any)=>()",
    Spread="number",
    Tags="any",
    WaitForChild="(SunRaysEffect,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(SunRaysEffect)=>(any)",
    className="string",
    clone="(SunRaysEffect)=>(any)",
    destroy="(SunRaysEffect)=>()",
    findFirstChild="(SunRaysEffect,string,boolean)=>(any)",
    getChildren="(SunRaysEffect)=>(any)",
    isA="(SunRaysEffect,string)=>(boolean)",
    isDescendantOf="(SunRaysEffect,any)=>(boolean)",
    remove="(SunRaysEffect)=>()"}


, KeyframeSequenceProvider={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(KeyframeSequenceProvider)=>()",
    Clone="(KeyframeSequenceProvider)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(KeyframeSequenceProvider)=>()",
    FindFirstAncestor="(KeyframeSequenceProvider,string)=>(any)",
    FindFirstAncestorOfClass="(KeyframeSequenceProvider,string)=>(any)",
    FindFirstAncestorWhichIsA="(KeyframeSequenceProvider,string)=>(any)",
    FindFirstChild="(KeyframeSequenceProvider,string,boolean)=>(any)",
    FindFirstChildOfClass="(KeyframeSequenceProvider,string)=>(any)",
    FindFirstChildWhichIsA="(KeyframeSequenceProvider,string,boolean)=>(any)",
    GetAnimations="(KeyframeSequenceProvider,number)=>(any)",
    GetAttribute="(KeyframeSequenceProvider,string)=>(any)",
    GetAttributeChangedSignal="(KeyframeSequenceProvider,string)=>(any)",
    GetAttributes="(KeyframeSequenceProvider)=>(any)",
    GetChildren="(KeyframeSequenceProvider)=>(any)",
    GetDebugId="(KeyframeSequenceProvider,number)=>(string)",
    GetDescendants="(KeyframeSequenceProvider)=>(any)",
    GetFullName="(KeyframeSequenceProvider)=>(string)",
    GetKeyframeSequence="(KeyframeSequenceProvider,any)=>(any)",
    GetKeyframeSequenceAsync="(KeyframeSequenceProvider,any)=>(any)",
    GetKeyframeSequenceById="(KeyframeSequenceProvider,number,boolean)=>(any)",
    GetMemStats="(KeyframeSequenceProvider)=>(any)",
    GetPropertyChangedSignal="(KeyframeSequenceProvider,string)=>(any)",
    IsA="(KeyframeSequenceProvider,string)=>(boolean)",
    IsAncestorOf="(KeyframeSequenceProvider,any)=>(boolean)",
    IsDescendantOf="(KeyframeSequenceProvider,any)=>(boolean)",
    Name="string",
    Parent="any",
    RegisterActiveKeyframeSequence="(KeyframeSequenceProvider,any)=>(any)",
    RegisterKeyframeSequence="(KeyframeSequenceProvider,any)=>(any)",
    Remove="(KeyframeSequenceProvider)=>()",
    RobloxLocked="boolean",
    SetAttribute="(KeyframeSequenceProvider,string,any)=>()",
    Tags="any",
    WaitForChild="(KeyframeSequenceProvider,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(KeyframeSequenceProvider)=>(any)",
    className="string",
    clone="(KeyframeSequenceProvider)=>(any)",
    destroy="(KeyframeSequenceProvider)=>()",
    findFirstChild="(KeyframeSequenceProvider,string,boolean)=>(any)",
    getChildren="(KeyframeSequenceProvider)=>(any)",
    isA="(KeyframeSequenceProvider,string)=>(boolean)",
    isDescendantOf="(KeyframeSequenceProvider,any)=>(boolean)",
    remove="(KeyframeSequenceProvider)=>()"}


, LayerCollector={
    AbsolutePosition="Vector2",
    AbsoluteRotation="number",
    AbsoluteSize="Vector2",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoLocalize="boolean",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(LayerCollector)=>()",
    Clone="(LayerCollector)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(LayerCollector)=>()",
    Enabled="boolean",
    FindFirstAncestor="(LayerCollector,string)=>(any)",
    FindFirstAncestorOfClass="(LayerCollector,string)=>(any)",
    FindFirstAncestorWhichIsA="(LayerCollector,string)=>(any)",
    FindFirstChild="(LayerCollector,string,boolean)=>(any)",
    FindFirstChildOfClass="(LayerCollector,string)=>(any)",
    FindFirstChildWhichIsA="(LayerCollector,string,boolean)=>(any)",
    GetAttribute="(LayerCollector,string)=>(any)",
    GetAttributeChangedSignal="(LayerCollector,string)=>(any)",
    GetAttributes="(LayerCollector)=>(any)",
    GetChildren="(LayerCollector)=>(any)",
    GetDebugId="(LayerCollector,number)=>(string)",
    GetDescendants="(LayerCollector)=>(any)",
    GetFullName="(LayerCollector)=>(string)",
    GetPropertyChangedSignal="(LayerCollector,string)=>(any)",
    IsA="(LayerCollector,string)=>(boolean)",
    IsAncestorOf="(LayerCollector,any)=>(boolean)",
    IsDescendantOf="(LayerCollector,any)=>(boolean)",
    IsNotOccluded="boolean",
    Localize="boolean",
    Name="string",
    Parent="any",
    Remove="(LayerCollector)=>()",
    ResetOnSpawn="boolean",
    RobloxLocked="boolean",
    RootLocalizationTable="any",
    SetAttribute="(LayerCollector,string,any)=>()",
    Tags="any",
    WaitForChild="(LayerCollector,string,number)=>(any)",
    ZIndexBehavior="any",
    archivable="boolean",
    childAdded="Event",
    children="(LayerCollector)=>(any)",
    className="string",
    clone="(LayerCollector)=>(any)",
    destroy="(LayerCollector)=>()",
    findFirstChild="(LayerCollector,string,boolean)=>(any)",
    getChildren="(LayerCollector)=>(any)",
    isA="(LayerCollector,string)=>(boolean)",
    isDescendantOf="(LayerCollector,any)=>(boolean)",
    remove="(LayerCollector)=>()"}


, TweenService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(TweenService)=>()",
    Clone="(TweenService)=>(any)",
    Create="(TweenService,any,any,any)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(TweenService)=>()",
    FindFirstAncestor="(TweenService,string)=>(any)",
    FindFirstAncestorOfClass="(TweenService,string)=>(any)",
    FindFirstAncestorWhichIsA="(TweenService,string)=>(any)",
    FindFirstChild="(TweenService,string,boolean)=>(any)",
    FindFirstChildOfClass="(TweenService,string)=>(any)",
    FindFirstChildWhichIsA="(TweenService,string,boolean)=>(any)",
    GetAttribute="(TweenService,string)=>(any)",
    GetAttributeChangedSignal="(TweenService,string)=>(any)",
    GetAttributes="(TweenService)=>(any)",
    GetChildren="(TweenService)=>(any)",
    GetDebugId="(TweenService,number)=>(string)",
    GetDescendants="(TweenService)=>(any)",
    GetFullName="(TweenService)=>(string)",
    GetPropertyChangedSignal="(TweenService,string)=>(any)",
    GetValue="(TweenService,number,any,any)=>(number)",
    IsA="(TweenService,string)=>(boolean)",
    IsAncestorOf="(TweenService,any)=>(boolean)",
    IsDescendantOf="(TweenService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(TweenService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(TweenService,string,any)=>()",
    Tags="any",
    WaitForChild="(TweenService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(TweenService)=>(any)",
    className="string",
    clone="(TweenService)=>(any)",
    destroy="(TweenService)=>()",
    findFirstChild="(TweenService,string,boolean)=>(any)",
    getChildren="(TweenService)=>(any)",
    isA="(TweenService,string)=>(boolean)",
    isDescendantOf="(TweenService,any)=>(boolean)",
    remove="(TweenService)=>()"}


, StarterPlayerScripts={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(StarterPlayerScripts)=>()",
    Clone="(StarterPlayerScripts)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(StarterPlayerScripts)=>()",
    FindFirstAncestor="(StarterPlayerScripts,string)=>(any)",
    FindFirstAncestorOfClass="(StarterPlayerScripts,string)=>(any)",
    FindFirstAncestorWhichIsA="(StarterPlayerScripts,string)=>(any)",
    FindFirstChild="(StarterPlayerScripts,string,boolean)=>(any)",
    FindFirstChildOfClass="(StarterPlayerScripts,string)=>(any)",
    FindFirstChildWhichIsA="(StarterPlayerScripts,string,boolean)=>(any)",
    GetAttribute="(StarterPlayerScripts,string)=>(any)",
    GetAttributeChangedSignal="(StarterPlayerScripts,string)=>(any)",
    GetAttributes="(StarterPlayerScripts)=>(any)",
    GetChildren="(StarterPlayerScripts)=>(any)",
    GetDebugId="(StarterPlayerScripts,number)=>(string)",
    GetDescendants="(StarterPlayerScripts)=>(any)",
    GetFullName="(StarterPlayerScripts)=>(string)",
    GetPropertyChangedSignal="(StarterPlayerScripts,string)=>(any)",
    IsA="(StarterPlayerScripts,string)=>(boolean)",
    IsAncestorOf="(StarterPlayerScripts,any)=>(boolean)",
    IsDescendantOf="(StarterPlayerScripts,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(StarterPlayerScripts)=>()",
    RobloxLocked="boolean",
    SetAttribute="(StarterPlayerScripts,string,any)=>()",
    Tags="any",
    WaitForChild="(StarterPlayerScripts,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(StarterPlayerScripts)=>(any)",
    className="string",
    clone="(StarterPlayerScripts)=>(any)",
    destroy="(StarterPlayerScripts)=>()",
    findFirstChild="(StarterPlayerScripts,string,boolean)=>(any)",
    getChildren="(StarterPlayerScripts)=>(any)",
    isA="(StarterPlayerScripts,string)=>(boolean)",
    isDescendantOf="(StarterPlayerScripts,any)=>(boolean)",
    remove="(StarterPlayerScripts)=>()"}


, RuntimeScriptService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(RuntimeScriptService)=>()",
    Clone="(RuntimeScriptService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(RuntimeScriptService)=>()",
    FindFirstAncestor="(RuntimeScriptService,string)=>(any)",
    FindFirstAncestorOfClass="(RuntimeScriptService,string)=>(any)",
    FindFirstAncestorWhichIsA="(RuntimeScriptService,string)=>(any)",
    FindFirstChild="(RuntimeScriptService,string,boolean)=>(any)",
    FindFirstChildOfClass="(RuntimeScriptService,string)=>(any)",
    FindFirstChildWhichIsA="(RuntimeScriptService,string,boolean)=>(any)",
    GetAttribute="(RuntimeScriptService,string)=>(any)",
    GetAttributeChangedSignal="(RuntimeScriptService,string)=>(any)",
    GetAttributes="(RuntimeScriptService)=>(any)",
    GetChildren="(RuntimeScriptService)=>(any)",
    GetDebugId="(RuntimeScriptService,number)=>(string)",
    GetDescendants="(RuntimeScriptService)=>(any)",
    GetFullName="(RuntimeScriptService)=>(string)",
    GetPropertyChangedSignal="(RuntimeScriptService,string)=>(any)",
    IsA="(RuntimeScriptService,string)=>(boolean)",
    IsAncestorOf="(RuntimeScriptService,any)=>(boolean)",
    IsDescendantOf="(RuntimeScriptService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(RuntimeScriptService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(RuntimeScriptService,string,any)=>()",
    Tags="any",
    WaitForChild="(RuntimeScriptService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(RuntimeScriptService)=>(any)",
    className="string",
    clone="(RuntimeScriptService)=>(any)",
    destroy="(RuntimeScriptService)=>()",
    findFirstChild="(RuntimeScriptService,string,boolean)=>(any)",
    getChildren="(RuntimeScriptService)=>(any)",
    isA="(RuntimeScriptService,string)=>(boolean)",
    isDescendantOf="(RuntimeScriptService,any)=>(boolean)",
    remove="(RuntimeScriptService)=>()"}


, Light={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Brightness="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Light)=>()",
    Clone="(Light)=>(any)",
    Color="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Light)=>()",
    Enabled="boolean",
    FindFirstAncestor="(Light,string)=>(any)",
    FindFirstAncestorOfClass="(Light,string)=>(any)",
    FindFirstAncestorWhichIsA="(Light,string)=>(any)",
    FindFirstChild="(Light,string,boolean)=>(any)",
    FindFirstChildOfClass="(Light,string)=>(any)",
    FindFirstChildWhichIsA="(Light,string,boolean)=>(any)",
    GetAttribute="(Light,string)=>(any)",
    GetAttributeChangedSignal="(Light,string)=>(any)",
    GetAttributes="(Light)=>(any)",
    GetChildren="(Light)=>(any)",
    GetDebugId="(Light,number)=>(string)",
    GetDescendants="(Light)=>(any)",
    GetFullName="(Light)=>(string)",
    GetPropertyChangedSignal="(Light,string)=>(any)",
    IsA="(Light,string)=>(boolean)",
    IsAncestorOf="(Light,any)=>(boolean)",
    IsDescendantOf="(Light,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Light)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Light,string,any)=>()",
    Shadows="boolean",
    Tags="any",
    WaitForChild="(Light,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Light)=>(any)",
    className="string",
    clone="(Light)=>(any)",
    destroy="(Light)=>()",
    findFirstChild="(Light,string,boolean)=>(any)",
    getChildren="(Light)=>(any)",
    isA="(Light,string)=>(boolean)",
    isDescendantOf="(Light,any)=>(boolean)",
    remove="(Light)=>()"}


, Lighting={
    Ambient="Color3",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Brightness="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Lighting)=>()",
    ClockTime="number",
    Clone="(Lighting)=>(any)",
    ColorShift_Bottom="Color3",
    ColorShift_Top="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Lighting)=>()",
    EnvironmentDiffuseScale="number",
    EnvironmentSpecularScale="number",
    ExposureCompensation="number",
    FindFirstAncestor="(Lighting,string)=>(any)",
    FindFirstAncestorOfClass="(Lighting,string)=>(any)",
    FindFirstAncestorWhichIsA="(Lighting,string)=>(any)",
    FindFirstChild="(Lighting,string,boolean)=>(any)",
    FindFirstChildOfClass="(Lighting,string)=>(any)",
    FindFirstChildWhichIsA="(Lighting,string,boolean)=>(any)",
    FogColor="Color3",
    FogEnd="number",
    FogStart="number",
    GeographicLatitude="number",
    GetAttribute="(Lighting,string)=>(any)",
    GetAttributeChangedSignal="(Lighting,string)=>(any)",
    GetAttributes="(Lighting)=>(any)",
    GetChildren="(Lighting)=>(any)",
    GetDebugId="(Lighting,number)=>(string)",
    GetDescendants="(Lighting)=>(any)",
    GetFullName="(Lighting)=>(string)",
    GetMinutesAfterMidnight="(Lighting)=>(number)",
    GetMoonDirection="(Lighting)=>(Vector3)",
    GetMoonPhase="(Lighting)=>(number)",
    GetPropertyChangedSignal="(Lighting,string)=>(any)",
    GetSunDirection="(Lighting)=>(Vector3)",
    GlobalShadows="boolean",
    IsA="(Lighting,string)=>(boolean)",
    IsAncestorOf="(Lighting,any)=>(boolean)",
    IsDescendantOf="(Lighting,any)=>(boolean)",
    LegacyOutlines="boolean",
    LightingChanged="Event",
    Name="string",
    OutdoorAmbient="Color3",
    Outlines="boolean",
    Parent="any",
    Remove="(Lighting)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Lighting,string,any)=>()",
    SetMinutesAfterMidnight="(Lighting,number)=>()",
    ShadowColor="Color3",
    ShadowSoftness="number",
    Tags="any",
    Technology="any",
    TimeOfDay="string",
    WaitForChild="(Lighting,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Lighting)=>(any)",
    className="string",
    clone="(Lighting)=>(any)",
    destroy="(Lighting)=>()",
    findFirstChild="(Lighting,string,boolean)=>(any)",
    getChildren="(Lighting)=>(any)",
    getMinutesAfterMidnight="(Lighting)=>(number)",
    isA="(Lighting,string)=>(boolean)",
    isDescendantOf="(Lighting,any)=>(boolean)",
    remove="(Lighting)=>()",
    setMinutesAfterMidnight="(Lighting,number)=>()"}


, PlayerMouse={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Button1Down="Event",
    Button1Up="Event",
    Button2Down="Event",
    Button2Up="Event",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PlayerMouse)=>()",
    Clone="(PlayerMouse)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PlayerMouse)=>()",
    FindFirstAncestor="(PlayerMouse,string)=>(any)",
    FindFirstAncestorOfClass="(PlayerMouse,string)=>(any)",
    FindFirstAncestorWhichIsA="(PlayerMouse,string)=>(any)",
    FindFirstChild="(PlayerMouse,string,boolean)=>(any)",
    FindFirstChildOfClass="(PlayerMouse,string)=>(any)",
    FindFirstChildWhichIsA="(PlayerMouse,string,boolean)=>(any)",
    GetAttribute="(PlayerMouse,string)=>(any)",
    GetAttributeChangedSignal="(PlayerMouse,string)=>(any)",
    GetAttributes="(PlayerMouse)=>(any)",
    GetChildren="(PlayerMouse)=>(any)",
    GetDebugId="(PlayerMouse,number)=>(string)",
    GetDescendants="(PlayerMouse)=>(any)",
    GetFullName="(PlayerMouse)=>(string)",
    GetPropertyChangedSignal="(PlayerMouse,string)=>(any)",
    Hit="CFrame",
    Icon="any",
    Idle="Event",
    IsA="(PlayerMouse,string)=>(boolean)",
    IsAncestorOf="(PlayerMouse,any)=>(boolean)",
    IsDescendantOf="(PlayerMouse,any)=>(boolean)",
    KeyDown="Event",
    KeyUp="Event",
    Move="Event",
    Name="string",
    Origin="CFrame",
    Parent="any",
    Remove="(PlayerMouse)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PlayerMouse,string,any)=>()",
    Tags="any",
    Target="any",
    TargetFilter="any",
    TargetSurface="any",
    UnitRay="Ray",
    ViewSizeX="number",
    ViewSizeY="number",
    WaitForChild="(PlayerMouse,string,number)=>(any)",
    WheelBackward="Event",
    WheelForward="Event",
    X="number",
    Y="number",
    archivable="boolean",
    childAdded="Event",
    children="(PlayerMouse)=>(any)",
    className="string",
    clone="(PlayerMouse)=>(any)",
    destroy="(PlayerMouse)=>()",
    findFirstChild="(PlayerMouse,string,boolean)=>(any)",
    getChildren="(PlayerMouse)=>(any)",
    hit="CFrame",
    isA="(PlayerMouse,string)=>(boolean)",
    isDescendantOf="(PlayerMouse,any)=>(boolean)",
    keyDown="Event",
    remove="(PlayerMouse)=>()",
    target="any"}


, LocalScript={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CachedRemoteSource="any",
    CachedRemoteSourceLoadState="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(LocalScript)=>()",
    Clone="(LocalScript)=>(any)",
    CurrentEditor="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(LocalScript)=>()",
    Disabled="boolean",
    FindFirstAncestor="(LocalScript,string)=>(any)",
    FindFirstAncestorOfClass="(LocalScript,string)=>(any)",
    FindFirstAncestorWhichIsA="(LocalScript,string)=>(any)",
    FindFirstChild="(LocalScript,string,boolean)=>(any)",
    FindFirstChildOfClass="(LocalScript,string)=>(any)",
    FindFirstChildWhichIsA="(LocalScript,string,boolean)=>(any)",
    GetAttribute="(LocalScript,string)=>(any)",
    GetAttributeChangedSignal="(LocalScript,string)=>(any)",
    GetAttributes="(LocalScript)=>(any)",
    GetChildren="(LocalScript)=>(any)",
    GetDebugId="(LocalScript,number)=>(string)",
    GetDescendants="(LocalScript)=>(any)",
    GetFullName="(LocalScript)=>(string)",
    GetHash="(LocalScript)=>(string)",
    GetPropertyChangedSignal="(LocalScript,string)=>(any)",
    HasAssociatedDrafts="boolean",
    IsA="(LocalScript,string)=>(boolean)",
    IsAncestorOf="(LocalScript,any)=>(boolean)",
    IsDescendantOf="(LocalScript,any)=>(boolean)",
    LinkedSource="any",
    LockGrantedOrNot="Event",
    LostLock="Event",
    Name="string",
    Parent="any",
    Remove="(LocalScript)=>()",
    RequestLock="Event",
    RequestScriptHash="Event",
    RobloxLocked="boolean",
    SandboxedSource="any",
    ScriptGuid="string",
    SetAttribute="(LocalScript,string,any)=>()",
    Source="any",
    Tags="any",
    VerifyScriptHash="Event",
    WaitForChild="(LocalScript,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(LocalScript)=>(any)",
    className="string",
    clone="(LocalScript)=>(any)",
    destroy="(LocalScript)=>()",
    findFirstChild="(LocalScript,string,boolean)=>(any)",
    getChildren="(LocalScript)=>(any)",
    isA="(LocalScript,string)=>(boolean)",
    isDescendantOf="(LocalScript,any)=>(boolean)",
    remove="(LocalScript)=>()"}


, LocalStorageService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(LocalStorageService)=>()",
    Clone="(LocalStorageService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(LocalStorageService)=>()",
    FindFirstAncestor="(LocalStorageService,string)=>(any)",
    FindFirstAncestorOfClass="(LocalStorageService,string)=>(any)",
    FindFirstAncestorWhichIsA="(LocalStorageService,string)=>(any)",
    FindFirstChild="(LocalStorageService,string,boolean)=>(any)",
    FindFirstChildOfClass="(LocalStorageService,string)=>(any)",
    FindFirstChildWhichIsA="(LocalStorageService,string,boolean)=>(any)",
    Flush="(LocalStorageService)=>()",
    GetAttribute="(LocalStorageService,string)=>(any)",
    GetAttributeChangedSignal="(LocalStorageService,string)=>(any)",
    GetAttributes="(LocalStorageService)=>(any)",
    GetChildren="(LocalStorageService)=>(any)",
    GetDebugId="(LocalStorageService,number)=>(string)",
    GetDescendants="(LocalStorageService)=>(any)",
    GetFullName="(LocalStorageService)=>(string)",
    GetItem="(LocalStorageService,string)=>(string)",
    GetPropertyChangedSignal="(LocalStorageService,string)=>(any)",
    IsA="(LocalStorageService,string)=>(boolean)",
    IsAncestorOf="(LocalStorageService,any)=>(boolean)",
    IsDescendantOf="(LocalStorageService,any)=>(boolean)",
    ItemWasSet="Event",
    Name="string",
    Parent="any",
    Remove="(LocalStorageService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(LocalStorageService,string,any)=>()",
    SetItem="(LocalStorageService,string,string)=>()",
    StoreWasCleared="Event",
    Tags="any",
    WaitForChild="(LocalStorageService,string,number)=>(any)",
    WhenLoaded="(LocalStorageService,any)=>()",
    archivable="boolean",
    childAdded="Event",
    children="(LocalStorageService)=>(any)",
    className="string",
    clone="(LocalStorageService)=>(any)",
    destroy="(LocalStorageService)=>()",
    findFirstChild="(LocalStorageService,string,boolean)=>(any)",
    getChildren="(LocalStorageService)=>(any)",
    isA="(LocalStorageService,string)=>(boolean)",
    isDescendantOf="(LocalStorageService,any)=>(boolean)",
    remove="(LocalStorageService)=>()"}


, LocalizationService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoTranslateWillRun="Event",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(LocalizationService)=>()",
    Clone="(LocalizationService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(LocalizationService)=>()",
    FindFirstAncestor="(LocalizationService,string)=>(any)",
    FindFirstAncestorOfClass="(LocalizationService,string)=>(any)",
    FindFirstAncestorWhichIsA="(LocalizationService,string)=>(any)",
    FindFirstChild="(LocalizationService,string,boolean)=>(any)",
    FindFirstChildOfClass="(LocalizationService,string)=>(any)",
    FindFirstChildWhichIsA="(LocalizationService,string,boolean)=>(any)",
    ForcePlayModeGameLocaleId="string",
    ForcePlayModeRobloxLocaleId="string",
    GetAttribute="(LocalizationService,string)=>(any)",
    GetAttributeChangedSignal="(LocalizationService,string)=>(any)",
    GetAttributes="(LocalizationService)=>(any)",
    GetChildren="(LocalizationService)=>(any)",
    GetCorescriptLocalizations="(LocalizationService)=>(any)",
    GetCountryRegionForPlayerAsync="(LocalizationService,any)=>(string)",
    GetDebugId="(LocalizationService,number)=>(string)",
    GetDescendants="(LocalizationService)=>(any)",
    GetFullName="(LocalizationService)=>(string)",
    GetPropertyChangedSignal="(LocalizationService,string)=>(any)",
    GetTableEntries="(LocalizationService,any)=>(any)",
    GetTranslatorForLocaleAsync="(LocalizationService,string)=>(any)",
    GetTranslatorForPlayer="(LocalizationService,any)=>(any)",
    GetTranslatorForPlayerAsync="(LocalizationService,any)=>(any)",
    IsA="(LocalizationService,string)=>(boolean)",
    IsAncestorOf="(LocalizationService,any)=>(boolean)",
    IsDescendantOf="(LocalizationService,any)=>(boolean)",
    IsTextScraperRunning="boolean",
    LocaleManifest="string",
    Name="string",
    Parent="any",
    PromptDownloadGameTableToCSV="(LocalizationService,any)=>()",
    PromptExportToCSVs="(LocalizationService)=>()",
    PromptImportFromCSVs="(LocalizationService)=>()",
    PromptUploadCSVToGameTable="(LocalizationService)=>(any)",
    Remove="(LocalizationService)=>()",
    RobloxForcePlayModeGameLocaleId="string",
    RobloxForcePlayModeRobloxLocaleId="string",
    RobloxLocaleId="string",
    RobloxLocked="boolean",
    SetAttribute="(LocalizationService,string,any)=>()",
    SetRobloxLocaleId="(LocalizationService,string)=>()",
    ShouldUseCloudTable="boolean",
    StartTextScraper="(LocalizationService)=>()",
    StopTextScraper="(LocalizationService)=>()",
    SystemLocaleId="string",
    Tags="any",
    TextScraperClientMessageSignal="Event",
    TextScraperClientMessageWithPlayerSignal="Event",
    WaitForChild="(LocalizationService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(LocalizationService)=>(any)",
    className="string",
    clone="(LocalizationService)=>(any)",
    destroy="(LocalizationService)=>()",
    findFirstChild="(LocalizationService,string,boolean)=>(any)",
    getChildren="(LocalizationService)=>(any)",
    isA="(LocalizationService,string)=>(boolean)",
    isDescendantOf="(LocalizationService,any)=>(boolean)",
    remove="(LocalizationService)=>()"}


, Message={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Message)=>()",
    Clone="(Message)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Message)=>()",
    FindFirstAncestor="(Message,string)=>(any)",
    FindFirstAncestorOfClass="(Message,string)=>(any)",
    FindFirstAncestorWhichIsA="(Message,string)=>(any)",
    FindFirstChild="(Message,string,boolean)=>(any)",
    FindFirstChildOfClass="(Message,string)=>(any)",
    FindFirstChildWhichIsA="(Message,string,boolean)=>(any)",
    GetAttribute="(Message,string)=>(any)",
    GetAttributeChangedSignal="(Message,string)=>(any)",
    GetAttributes="(Message)=>(any)",
    GetChildren="(Message)=>(any)",
    GetDebugId="(Message,number)=>(string)",
    GetDescendants="(Message)=>(any)",
    GetFullName="(Message)=>(string)",
    GetPropertyChangedSignal="(Message,string)=>(any)",
    IsA="(Message,string)=>(boolean)",
    IsAncestorOf="(Message,any)=>(boolean)",
    IsDescendantOf="(Message,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Message)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Message,string,any)=>()",
    Tags="any",
    Text="string",
    WaitForChild="(Message,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Message)=>(any)",
    className="string",
    clone="(Message)=>(any)",
    destroy="(Message)=>()",
    findFirstChild="(Message,string,boolean)=>(any)",
    getChildren="(Message)=>(any)",
    isA="(Message,string)=>(boolean)",
    isDescendantOf="(Message,any)=>(boolean)",
    remove="(Message)=>()"}


, LocalizationTable={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(LocalizationTable)=>()",
    Clone="(LocalizationTable)=>(any)",
    Contents="string",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(LocalizationTable)=>()",
    DevelopmentLanguage="string",
    FindFirstAncestor="(LocalizationTable,string)=>(any)",
    FindFirstAncestorOfClass="(LocalizationTable,string)=>(any)",
    FindFirstAncestorWhichIsA="(LocalizationTable,string)=>(any)",
    FindFirstChild="(LocalizationTable,string,boolean)=>(any)",
    FindFirstChildOfClass="(LocalizationTable,string)=>(any)",
    FindFirstChildWhichIsA="(LocalizationTable,string,boolean)=>(any)",
    GetAttribute="(LocalizationTable,string)=>(any)",
    GetAttributeChangedSignal="(LocalizationTable,string)=>(any)",
    GetAttributes="(LocalizationTable)=>(any)",
    GetChildren="(LocalizationTable)=>(any)",
    GetContents="(LocalizationTable)=>(string)",
    GetDebugId="(LocalizationTable,number)=>(string)",
    GetDescendants="(LocalizationTable)=>(any)",
    GetEntries="(LocalizationTable)=>(any)",
    GetFullName="(LocalizationTable)=>(string)",
    GetPropertyChangedSignal="(LocalizationTable,string)=>(any)",
    GetString="(LocalizationTable,string,string)=>(string)",
    GetTranslator="(LocalizationTable,string)=>(any)",
    IsA="(LocalizationTable,string)=>(boolean)",
    IsAncestorOf="(LocalizationTable,any)=>(boolean)",
    IsDescendantOf="(LocalizationTable,any)=>(boolean)",
    IsExemptFromUGCAnalytics="boolean",
    Name="string",
    Parent="any",
    Remove="(LocalizationTable)=>()",
    RemoveEntry="(LocalizationTable,string,string,string)=>()",
    RemoveEntryValue="(LocalizationTable,string,string,string,string)=>()",
    RemoveKey="(LocalizationTable,string)=>()",
    RemoveTargetLocale="(LocalizationTable,string)=>()",
    RobloxLocked="boolean",
    Root="any",
    SetAttribute="(LocalizationTable,string,any)=>()",
    SetContents="(LocalizationTable,string)=>()",
    SetEntries="(LocalizationTable,any)=>()",
    SetEntry="(LocalizationTable,string,string,string)=>()",
    SetEntryContext="(LocalizationTable,string,string,string,string)=>()",
    SetEntryExample="(LocalizationTable,string,string,string,string)=>()",
    SetEntryKey="(LocalizationTable,string,string,string,string)=>()",
    SetEntrySource="(LocalizationTable,string,string,string,string)=>()",
    SetEntryValue="(LocalizationTable,string,string,string,string,string)=>()",
    SetIsExemptFromUGCAnalytics="(LocalizationTable,boolean)=>()",
    SourceLocaleId="string",
    Tags="any",
    WaitForChild="(LocalizationTable,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(LocalizationTable)=>(any)",
    className="string",
    clone="(LocalizationTable)=>(any)",
    destroy="(LocalizationTable)=>()",
    findFirstChild="(LocalizationTable,string,boolean)=>(any)",
    getChildren="(LocalizationTable)=>(any)",
    isA="(LocalizationTable,string)=>(boolean)",
    isDescendantOf="(LocalizationTable,any)=>(boolean)",
    remove="(LocalizationTable)=>()"}


, Player={
    AccountAge="number",
    AccountAgeReplicate="number",
    AddToBlockList="(Player,any)=>()",
    AncestryChanged="Event",
    AppearanceDidLoad="boolean",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoJumpEnabled="boolean",
    CameraMaxZoomDistance="number",
    CameraMinZoomDistance="number",
    CameraMode="any",
    CanLoadCharacterAppearance="boolean",
    Changed="Event",
    Character="any",
    CharacterAdded="Event",
    CharacterAppearance="string",
    CharacterAppearanceId="number",
    CharacterAppearanceLoaded="Event",
    CharacterRemoving="Event",
    ChararacterRegionId="Vector3",
    ChatMode="any",
    ChatPrivacyMode="any",
    Chatted="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Player)=>()",
    ClearCharacterAppearance="(Player)=>()",
    Clone="(Player)=>(any)",
    CloudEditCameraCoordinateFrame="CFrame",
    CloudEditPlayerActive="boolean",
    CloudEditSelectionChanged="Event",
    ConnectDiedSignalBackend="Event",
    CountryRegionCodeReplicate="string",
    DataComplexity="number",
    DataComplexityLimit="number",
    DataCost="number",
    DataReady="boolean",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Player)=>()",
    DevCameraOcclusionMode="any",
    DevComputerCameraMode="any",
    DevComputerMovementMode="any",
    DevEnableMouseLock="boolean",
    DevTouchCameraMode="any",
    DevTouchMovementMode="any",
    DisplayName="string",
    DistanceFromCharacter="(Player,Vector3)=>(number)",
    FindFirstAncestor="(Player,string)=>(any)",
    FindFirstAncestorOfClass="(Player,string)=>(any)",
    FindFirstAncestorWhichIsA="(Player,string)=>(any)",
    FindFirstChild="(Player,string,boolean)=>(any)",
    FindFirstChildOfClass="(Player,string)=>(any)",
    FindFirstChildWhichIsA="(Player,string,boolean)=>(any)",
    FollowUserId="number",
    FollowUserIdReplicated="number",
    FriendStatusChanged="Event",
    GameplayPaused="boolean",
    GetAttribute="(Player,string)=>(any)",
    GetAttributeChangedSignal="(Player,string)=>(any)",
    GetAttributes="(Player)=>(any)",
    GetChildren="(Player)=>(any)",
    GetDebugId="(Player,number)=>(string)",
    GetDescendants="(Player)=>(any)",
    GetFriendStatus="(Player,any)=>(any)",
    GetFriendsOnline="(Player,number)=>(any)",
    GetFullName="(Player)=>(string)",
    GetGameSessionID="(Player)=>(string)",
    GetJoinData="(Player)=>(any)",
    GetMouse="(Player)=>(any)",
    GetPropertyChangedSignal="(Player,string)=>(any)",
    GetRankInGroup="(Player,number)=>(number)",
    GetRoleInGroup="(Player,number)=>(string)",
    GetUnder13="(Player)=>(boolean)",
    Guest="boolean",
    HasAppearanceLoaded="(Player)=>(boolean)",
    HealthDisplayDistance="number",
    Idled="Event",
    InternalCharacterAppearanceLoaded="boolean",
    IsA="(Player,string)=>(boolean)",
    IsAncestorOf="(Player,any)=>(boolean)",
    IsBestFriendsWith="(Player,number)=>(boolean)",
    IsDescendantOf="(Player,any)=>(boolean)",
    IsFriendsWith="(Player,number)=>(boolean)",
    IsInGroup="(Player,number)=>(boolean)",
    IsUserAvailableForExperiment="(Player)=>(boolean)",
    Kick="(Player,string)=>()",
    Kill="Event",
    LoadBoolean="(Player,string)=>(boolean)",
    LoadCharacter="(Player)=>()",
    LoadCharacterAppearance="(Player,any)=>()",
    LoadCharacterBlocking="(Player)=>()",
    LoadCharacterWithHumanoidDescription="(Player,any)=>()",
    LoadData="(Player)=>()",
    LoadInstance="(Player,string)=>(any)",
    LoadNumber="(Player,string)=>(number)",
    LoadString="(Player,string)=>(string)",
    LocaleId="string",
    MaxSimulationRadius="number",
    MaximumSimulationRadius="number",
    Membership,="any",
    Membership,Replicate="any",
    Move="(Player,Vector3,boolean)=>()",
    Name="string",
    NameDisplayDistance="number",
    Neutral="boolean",
    OnTeleport="Event",
    OnTeleportInternal="Event",
    OsPlatform="string",
    Parent="any",
    RawJoinData="any",
    RemoteFriendRequestSignal="Event",
    RemoteInsert="Event",
    Remove="(Player)=>()",
    RemoveCharacter="(Player)=>()",
    ReplicatedLocaleId="string",
    ReplicationFocus="any",
    RequestFriendship="(Player,any)=>()",
    RespawnLocation="any",
    RevokeFriendship="(Player,any)=>()",
    RobloxLocked="boolean",
    SaveBoolean="(Player,string,boolean)=>()",
    SaveData="(Player)=>()",
    SaveInstance="(Player,string,any)=>()",
    SaveNumber="(Player,string,number)=>()",
    SaveString="(Player,string,string)=>()",
    ScriptSecurityError="Event",
    SetAccountAge="(Player,number)=>()",
    SetAttribute="(Player,string,any)=>()",
    SetMembership,="(Player,any)=>()",
    SetShutdownMessage="Event",
    SetSuperSafeChat="(Player,boolean)=>()",
    SetUnder13="(Player,boolean)=>()",
    SimulationRadius="number",
    SimulationRadiusChanged="Event",
    StatsAvailable="Event",
    SuperSafeChatReplicate="boolean",
    Tags="any",
    Team="any",
    TeamColor="any",
    Teleported="boolean",
    TeleportedIn="boolean",
    UpdatePlayerBlocked="(Player,number,boolean)=>()",
    UserId="number",
    VRDevice="string",
    WaitForChild="(Player,string,number)=>(any)",
    WaitForDataReady="(Player)=>(boolean)",
    archivable="boolean",
    childAdded="Event",
    children="(Player)=>(any)",
    className="string",
    clone="(Player)=>(any)",
    destroy="(Player)=>()",
    findFirstChild="(Player,string,boolean)=>(any)",
    getChildren="(Player)=>(any)",
    isA="(Player,string)=>(boolean)",
    isDescendantOf="(Player,any)=>(boolean)",
    isFriendsWith="(Player,number)=>(boolean)",
    loadBoolean="(Player,string)=>(boolean)",
    loadInstance="(Player,string)=>(any)",
    loadNumber="(Player,string)=>(number)",
    loadString="(Player,string)=>(string)",
    remove="(Player)=>()",
    saveBoolean="(Player,string,boolean)=>()",
    saveInstance="(Player,string,any)=>()",
    saveNumber="(Player,string,number)=>()",
    saveString="(Player,string,string)=>()",
    userId="number",
    waitForDataReady="(Player)=>(boolean)"}


, LogService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(LogService)=>()",
    Clone="(LogService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(LogService)=>()",
    ExecuteScript="(LogService,string)=>()",
    FindFirstAncestor="(LogService,string)=>(any)",
    FindFirstAncestorOfClass="(LogService,string)=>(any)",
    FindFirstAncestorWhichIsA="(LogService,string)=>(any)",
    FindFirstChild="(LogService,string,boolean)=>(any)",
    FindFirstChildOfClass="(LogService,string)=>(any)",
    FindFirstChildWhichIsA="(LogService,string,boolean)=>(any)",
    GetAttribute="(LogService,string)=>(any)",
    GetAttributeChangedSignal="(LogService,string)=>(any)",
    GetAttributes="(LogService)=>(any)",
    GetChildren="(LogService)=>(any)",
    GetDebugId="(LogService,number)=>(string)",
    GetDescendants="(LogService)=>(any)",
    GetFullName="(LogService)=>(string)",
    GetHttpResultHistory="(LogService)=>(any)",
    GetLogHistory="(LogService)=>(any)",
    GetPropertyChangedSignal="(LogService,string)=>(any)",
    HttpResultOut="Event",
    IsA="(LogService,string)=>(boolean)",
    IsAncestorOf="(LogService,any)=>(boolean)",
    IsDescendantOf="(LogService,any)=>(boolean)",
    MessageOut="Event",
    Name="string",
    OnHttpResultApproved="Event",
    Parent="any",
    Remove="(LogService)=>()",
    RequestHttpResultApproved="(LogService)=>()",
    RequestHttpResultApprovedSignal="Event",
    RequestScriptExecutionSignal="Event",
    RequestServerHttpResult="(LogService)=>()",
    RequestServerHttpResultSignal="Event",
    RequestServerOutput="(LogService)=>()",
    RequestServerOutputSignal="Event",
    RobloxLocked="boolean",
    ServerHttpResultOut="Event",
    ServerMessageOut="Event",
    SetAttribute="(LogService,string,any)=>()",
    Tags="any",
    WaitForChild="(LogService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(LogService)=>(any)",
    className="string",
    clone="(LogService)=>(any)",
    destroy="(LogService)=>()",
    findFirstChild="(LogService,string,boolean)=>(any)",
    getChildren="(LogService)=>(any)",
    isA="(LogService,string)=>(boolean)",
    isDescendantOf="(LogService,any)=>(boolean)",
    remove="(LogService)=>()"}


, MeshPart={
    AncestryChanged="Event",
    Anchored="boolean",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BackParamA="number",
    BackParamB="number",
    BackSurface="any",
    BackSurfaceInput="any",
    BottomParamA="number",
    BottomParamB="number",
    BottomSurface="any",
    BottomSurfaceInput="any",
    BreakJoints="(MeshPart)=>()",
    BrickColor="any",
    CFrame="CFrame",
    CanCollide="boolean",
    CanCollideWith="(MeshPart,any)=>(boolean)",
    CanSetNetworkOwnership="(MeshPart)=>(any)",
    CastShadow="boolean",
    CenterOfMass="Vector3",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(MeshPart)=>()",
    Clone="(MeshPart)=>(any)",
    CollisionFidelity="any",
    CollisionGroupId="number",
    Color="Color3",
    Color3uint8="any",
    CustomPhysicalProperties="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(MeshPart)=>()",
    DraggingV1="boolean",
    Elasticity="number",
    FindFirstAncestor="(MeshPart,string)=>(any)",
    FindFirstAncestorOfClass="(MeshPart,string)=>(any)",
    FindFirstAncestorWhichIsA="(MeshPart,string)=>(any)",
    FindFirstChild="(MeshPart,string,boolean)=>(any)",
    FindFirstChildOfClass="(MeshPart,string)=>(any)",
    FindFirstChildWhichIsA="(MeshPart,string,boolean)=>(any)",
    Friction="number",
    FrontParamA="number",
    FrontParamB="number",
    FrontSurface="any",
    FrontSurfaceInput="any",
    GetAttribute="(MeshPart,string)=>(any)",
    GetAttributeChangedSignal="(MeshPart,string)=>(any)",
    GetAttributes="(MeshPart)=>(any)",
    GetChildren="(MeshPart)=>(any)",
    GetConnectedParts="(MeshPart,boolean)=>(any)",
    GetDebugId="(MeshPart,number)=>(string)",
    GetDescendants="(MeshPart)=>(any)",
    GetFullName="(MeshPart)=>(string)",
    GetJoints="(MeshPart)=>(any)",
    GetMass="(MeshPart)=>(number)",
    GetNetworkOwner="(MeshPart)=>(any)",
    GetNetworkOwnershipAuto="(MeshPart)=>(boolean)",
    GetPropertyChangedSignal="(MeshPart,string)=>(any)",
    GetRenderCFrame="(MeshPart)=>(CFrame)",
    GetRootPart="(MeshPart)=>(any)",
    GetTouchingParts="(MeshPart)=>(any)",
    InitialSize="Vector3",
    IsA="(MeshPart,string)=>(boolean)",
    IsAncestorOf="(MeshPart,any)=>(boolean)",
    IsDescendantOf="(MeshPart,any)=>(boolean)",
    IsGrounded="(MeshPart)=>(boolean)",
    LODData="any",
    LeftParamA="number",
    LeftParamB="number",
    LeftSurface="any",
    LeftSurfaceInput="any",
    LocalSimulationTouched="Event",
    LocalTransparencyModifier="number",
    Locked="boolean",
    MakeJoints="(MeshPart)=>()",
    Massless="boolean",
    Material="any",
    MeshID="any",
    MeshId="any",
    Name="string",
    NetworkIsSleeping="boolean",
    NetworkOwnerChanged="Event",
    NetworkOwnerV3="any",
    NetworkOwnershipRule="any",
    Orientation="Vector3",
    OutfitChanged="Event",
    Parent="any",
    PhysicalConfigData="any",
    PhysicsData="any",
    Position="Vector3",
    ReceiveAge="number",
    Reflectance="number",
    Remove="(MeshPart)=>()",
    RenderFidelity="any",
    Resize="(MeshPart,any,number)=>(boolean)",
    ResizeIncrement="number",
    ResizeableFaces="any",
    RightParamA="number",
    RightParamB="number",
    RightSurface="any",
    RightSurfaceInput="any",
    RobloxLocked="boolean",
    RootPriority="number",
    RotVelocity="Vector3",
    Rotation="Vector3",
    SetAttribute="(MeshPart,string,any)=>()",
    SetNetworkOwner="(MeshPart,any)=>()",
    SetNetworkOwnershipAuto="(MeshPart)=>()",
    Size="Vector3",
    SpecificGravity="number",
    StoppedTouching="Event",
    SubtractAsync="(MeshPart,any,any,any)=>(any)",
    Tags="any",
    TextureID="any",
    TopParamA="number",
    TopParamB="number",
    TopSurface="any",
    TopSurfaceInput="any",
    TouchEnded="Event",
    Touched="Event",
    Transparency="number",
    UnionAsync="(MeshPart,any,any,any)=>(any)",
    Velocity="Vector3",
    WaitForChild="(MeshPart,string,number)=>(any)",
    archivable="boolean",
    breakJoints="(MeshPart)=>()",
    brickColor="any",
    childAdded="Event",
    children="(MeshPart)=>(any)",
    className="string",
    clone="(MeshPart)=>(any)",
    destroy="(MeshPart)=>()",
    findFirstChild="(MeshPart,string,boolean)=>(any)",
    getChildren="(MeshPart)=>(any)",
    getMass="(MeshPart)=>(number)",
    isA="(MeshPart,string)=>(boolean)",
    isDescendantOf="(MeshPart,any)=>(boolean)",
    makeJoints="(MeshPart)=>()",
    remove="(MeshPart)=>()",
    resize="(MeshPart,any,number)=>(boolean)",
    siz="Vector3",
    size="Vector3",
    touched="Event"}


, LoginService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(LoginService)=>()",
    Clone="(LoginService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(LoginService)=>()",
    FindFirstAncestor="(LoginService,string)=>(any)",
    FindFirstAncestorOfClass="(LoginService,string)=>(any)",
    FindFirstAncestorWhichIsA="(LoginService,string)=>(any)",
    FindFirstChild="(LoginService,string,boolean)=>(any)",
    FindFirstChildOfClass="(LoginService,string)=>(any)",
    FindFirstChildWhichIsA="(LoginService,string,boolean)=>(any)",
    GetAttribute="(LoginService,string)=>(any)",
    GetAttributeChangedSignal="(LoginService,string)=>(any)",
    GetAttributes="(LoginService)=>(any)",
    GetChildren="(LoginService)=>(any)",
    GetDebugId="(LoginService,number)=>(string)",
    GetDescendants="(LoginService)=>(any)",
    GetFullName="(LoginService)=>(string)",
    GetPropertyChangedSignal="(LoginService,string)=>(any)",
    IsA="(LoginService,string)=>(boolean)",
    IsAncestorOf="(LoginService,any)=>(boolean)",
    IsDescendantOf="(LoginService,any)=>(boolean)",
    LoginFailed="Event",
    LoginSucceeded="Event",
    Logout="(LoginService)=>()",
    Name="string",
    Parent="any",
    PromptLogin="(LoginService)=>()",
    Remove="(LoginService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(LoginService,string,any)=>()",
    Tags="any",
    WaitForChild="(LoginService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(LoginService)=>(any)",
    className="string",
    clone="(LoginService)=>(any)",
    destroy="(LoginService)=>()",
    findFirstChild="(LoginService,string,boolean)=>(any)",
    getChildren="(LoginService)=>(any)",
    isA="(LoginService,string)=>(boolean)",
    isDescendantOf="(LoginService,any)=>(boolean)",
    remove="(LoginService)=>()"}


, LuaSourceContainer={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CachedRemoteSource="any",
    CachedRemoteSourceLoadState="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(LuaSourceContainer)=>()",
    Clone="(LuaSourceContainer)=>(any)",
    CurrentEditor="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(LuaSourceContainer)=>()",
    FindFirstAncestor="(LuaSourceContainer,string)=>(any)",
    FindFirstAncestorOfClass="(LuaSourceContainer,string)=>(any)",
    FindFirstAncestorWhichIsA="(LuaSourceContainer,string)=>(any)",
    FindFirstChild="(LuaSourceContainer,string,boolean)=>(any)",
    FindFirstChildOfClass="(LuaSourceContainer,string)=>(any)",
    FindFirstChildWhichIsA="(LuaSourceContainer,string,boolean)=>(any)",
    GetAttribute="(LuaSourceContainer,string)=>(any)",
    GetAttributeChangedSignal="(LuaSourceContainer,string)=>(any)",
    GetAttributes="(LuaSourceContainer)=>(any)",
    GetChildren="(LuaSourceContainer)=>(any)",
    GetDebugId="(LuaSourceContainer,number)=>(string)",
    GetDescendants="(LuaSourceContainer)=>(any)",
    GetFullName="(LuaSourceContainer)=>(string)",
    GetPropertyChangedSignal="(LuaSourceContainer,string)=>(any)",
    HasAssociatedDrafts="boolean",
    IsA="(LuaSourceContainer,string)=>(boolean)",
    IsAncestorOf="(LuaSourceContainer,any)=>(boolean)",
    IsDescendantOf="(LuaSourceContainer,any)=>(boolean)",
    LockGrantedOrNot="Event",
    LostLock="Event",
    Name="string",
    Parent="any",
    Remove="(LuaSourceContainer)=>()",
    RequestLock="Event",
    RequestScriptHash="Event",
    RobloxLocked="boolean",
    SandboxedSource="any",
    ScriptGuid="string",
    SetAttribute="(LuaSourceContainer,string,any)=>()",
    Tags="any",
    VerifyScriptHash="Event",
    WaitForChild="(LuaSourceContainer,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(LuaSourceContainer)=>(any)",
    className="string",
    clone="(LuaSourceContainer)=>(any)",
    destroy="(LuaSourceContainer)=>()",
    findFirstChild="(LuaSourceContainer,string,boolean)=>(any)",
    getChildren="(LuaSourceContainer)=>(any)",
    isA="(LuaSourceContainer,string)=>(boolean)",
    isDescendantOf="(LuaSourceContainer,any)=>(boolean)",
    remove="(LuaSourceContainer)=>()"}


, Pose={
    AddSubPose="(Pose,any)=>()",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CFrame="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Pose)=>()",
    Clone="(Pose)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Pose)=>()",
    EasingDirection="any",
    EasingStyle="any",
    FindFirstAncestor="(Pose,string)=>(any)",
    FindFirstAncestorOfClass="(Pose,string)=>(any)",
    FindFirstAncestorWhichIsA="(Pose,string)=>(any)",
    FindFirstChild="(Pose,string,boolean)=>(any)",
    FindFirstChildOfClass="(Pose,string)=>(any)",
    FindFirstChildWhichIsA="(Pose,string,boolean)=>(any)",
    GetAttribute="(Pose,string)=>(any)",
    GetAttributeChangedSignal="(Pose,string)=>(any)",
    GetAttributes="(Pose)=>(any)",
    GetChildren="(Pose)=>(any)",
    GetDebugId="(Pose,number)=>(string)",
    GetDescendants="(Pose)=>(any)",
    GetFullName="(Pose)=>(string)",
    GetPropertyChangedSignal="(Pose,string)=>(any)",
    GetSubPoses="(Pose)=>(any)",
    IsA="(Pose,string)=>(boolean)",
    IsAncestorOf="(Pose,any)=>(boolean)",
    IsDescendantOf="(Pose,any)=>(boolean)",
    MaskWeight="number",
    Name="string",
    Parent="any",
    Remove="(Pose)=>()",
    RemoveSubPose="(Pose,any)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Pose,string,any)=>()",
    Tags="any",
    WaitForChild="(Pose,string,number)=>(any)",
    Weight="number",
    archivable="boolean",
    childAdded="Event",
    children="(Pose)=>(any)",
    className="string",
    clone="(Pose)=>(any)",
    destroy="(Pose)=>()",
    findFirstChild="(Pose,string,boolean)=>(any)",
    getChildren="(Pose)=>(any)",
    isA="(Pose,string)=>(boolean)",
    isDescendantOf="(Pose,any)=>(boolean)",
    remove="(Pose)=>()"}


, LuaWebService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(LuaWebService)=>()",
    Clone="(LuaWebService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(LuaWebService)=>()",
    FindFirstAncestor="(LuaWebService,string)=>(any)",
    FindFirstAncestorOfClass="(LuaWebService,string)=>(any)",
    FindFirstAncestorWhichIsA="(LuaWebService,string)=>(any)",
    FindFirstChild="(LuaWebService,string,boolean)=>(any)",
    FindFirstChildOfClass="(LuaWebService,string)=>(any)",
    FindFirstChildWhichIsA="(LuaWebService,string,boolean)=>(any)",
    GetAttribute="(LuaWebService,string)=>(any)",
    GetAttributeChangedSignal="(LuaWebService,string)=>(any)",
    GetAttributes="(LuaWebService)=>(any)",
    GetChildren="(LuaWebService)=>(any)",
    GetDebugId="(LuaWebService,number)=>(string)",
    GetDescendants="(LuaWebService)=>(any)",
    GetFullName="(LuaWebService)=>(string)",
    GetPropertyChangedSignal="(LuaWebService,string)=>(any)",
    IsA="(LuaWebService,string)=>(boolean)",
    IsAncestorOf="(LuaWebService,any)=>(boolean)",
    IsDescendantOf="(LuaWebService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(LuaWebService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(LuaWebService,string,any)=>()",
    Tags="any",
    WaitForChild="(LuaWebService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(LuaWebService)=>(any)",
    className="string",
    clone="(LuaWebService)=>(any)",
    destroy="(LuaWebService)=>()",
    findFirstChild="(LuaWebService,string,boolean)=>(any)",
    getChildren="(LuaWebService)=>(any)",
    isA="(LuaWebService,string)=>(boolean)",
    isDescendantOf="(LuaWebService,any)=>(boolean)",
    remove="(LuaWebService)=>()"}


, WeldConstraint={
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CFrame0="CFrame",
    CFrame1="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(WeldConstraint)=>()",
    Clone="(WeldConstraint)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(WeldConstraint)=>()",
    Enabled="boolean",
    FindFirstAncestor="(WeldConstraint,string)=>(any)",
    FindFirstAncestorOfClass="(WeldConstraint,string)=>(any)",
    FindFirstAncestorWhichIsA="(WeldConstraint,string)=>(any)",
    FindFirstChild="(WeldConstraint,string,boolean)=>(any)",
    FindFirstChildOfClass="(WeldConstraint,string)=>(any)",
    FindFirstChildWhichIsA="(WeldConstraint,string,boolean)=>(any)",
    GetAttribute="(WeldConstraint,string)=>(any)",
    GetAttributeChangedSignal="(WeldConstraint,string)=>(any)",
    GetAttributes="(WeldConstraint)=>(any)",
    GetChildren="(WeldConstraint)=>(any)",
    GetDebugId="(WeldConstraint,number)=>(string)",
    GetDescendants="(WeldConstraint)=>(any)",
    GetFullName="(WeldConstraint)=>(string)",
    GetPropertyChangedSignal="(WeldConstraint,string)=>(any)",
    IsA="(WeldConstraint,string)=>(boolean)",
    IsAncestorOf="(WeldConstraint,any)=>(boolean)",
    IsDescendantOf="(WeldConstraint,any)=>(boolean)",
    Name="string",
    Parent="any",
    Part0="any",
    Part0Internal="any",
    Part1="any",
    Part1Internal="any",
    Remove="(WeldConstraint)=>()",
    RobloxLocked="boolean",
    SetAttribute="(WeldConstraint,string,any)=>()",
    Tags="any",
    WaitForChild="(WeldConstraint,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(WeldConstraint)=>(any)",
    className="string",
    clone="(WeldConstraint)=>(any)",
    destroy="(WeldConstraint)=>()",
    findFirstChild="(WeldConstraint,string,boolean)=>(any)",
    getChildren="(WeldConstraint)=>(any)",
    isA="(WeldConstraint,string)=>(boolean)",
    isDescendantOf="(WeldConstraint,any)=>(boolean)",
    remove="(WeldConstraint)=>()"}


, ManualGlue={
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    C0="CFrame",
    C1="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ManualGlue)=>()",
    Clone="(ManualGlue)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ManualGlue)=>()",
    Enabled="boolean",
    FindFirstAncestor="(ManualGlue,string)=>(any)",
    FindFirstAncestorOfClass="(ManualGlue,string)=>(any)",
    FindFirstAncestorWhichIsA="(ManualGlue,string)=>(any)",
    FindFirstChild="(ManualGlue,string,boolean)=>(any)",
    FindFirstChildOfClass="(ManualGlue,string)=>(any)",
    FindFirstChildWhichIsA="(ManualGlue,string,boolean)=>(any)",
    GetAttribute="(ManualGlue,string)=>(any)",
    GetAttributeChangedSignal="(ManualGlue,string)=>(any)",
    GetAttributes="(ManualGlue)=>(any)",
    GetChildren="(ManualGlue)=>(any)",
    GetDebugId="(ManualGlue,number)=>(string)",
    GetDescendants="(ManualGlue)=>(any)",
    GetFullName="(ManualGlue)=>(string)",
    GetPropertyChangedSignal="(ManualGlue,string)=>(any)",
    IsA="(ManualGlue,string)=>(boolean)",
    IsAncestorOf="(ManualGlue,any)=>(boolean)",
    IsAutoJoint="boolean",
    IsDescendantOf="(ManualGlue,any)=>(boolean)",
    Name="string",
    Parent="any",
    Part0="any",
    Part1="any",
    Remove="(ManualGlue)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ManualGlue,string,any)=>()",
    Surface0="number",
    Surface1="number",
    Tags="any",
    WaitForChild="(ManualGlue,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ManualGlue)=>(any)",
    className="string",
    clone="(ManualGlue)=>(any)",
    destroy="(ManualGlue)=>()",
    findFirstChild="(ManualGlue,string,boolean)=>(any)",
    getChildren="(ManualGlue)=>(any)",
    isA="(ManualGlue,string)=>(boolean)",
    isDescendantOf="(ManualGlue,any)=>(boolean)",
    part1="any",
    remove="(ManualGlue)=>()"}


, StarterPack={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(StarterPack)=>()",
    Clone="(StarterPack)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(StarterPack)=>()",
    FindFirstAncestor="(StarterPack,string)=>(any)",
    FindFirstAncestorOfClass="(StarterPack,string)=>(any)",
    FindFirstAncestorWhichIsA="(StarterPack,string)=>(any)",
    FindFirstChild="(StarterPack,string,boolean)=>(any)",
    FindFirstChildOfClass="(StarterPack,string)=>(any)",
    FindFirstChildWhichIsA="(StarterPack,string,boolean)=>(any)",
    GetAttribute="(StarterPack,string)=>(any)",
    GetAttributeChangedSignal="(StarterPack,string)=>(any)",
    GetAttributes="(StarterPack)=>(any)",
    GetChildren="(StarterPack)=>(any)",
    GetDebugId="(StarterPack,number)=>(string)",
    GetDescendants="(StarterPack)=>(any)",
    GetFullName="(StarterPack)=>(string)",
    GetPropertyChangedSignal="(StarterPack,string)=>(any)",
    IsA="(StarterPack,string)=>(boolean)",
    IsAncestorOf="(StarterPack,any)=>(boolean)",
    IsDescendantOf="(StarterPack,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(StarterPack)=>()",
    RobloxLocked="boolean",
    SetAttribute="(StarterPack,string,any)=>()",
    Tags="any",
    WaitForChild="(StarterPack,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(StarterPack)=>(any)",
    className="string",
    clone="(StarterPack)=>(any)",
    destroy="(StarterPack)=>()",
    findFirstChild="(StarterPack,string,boolean)=>(any)",
    getChildren="(StarterPack)=>(any)",
    isA="(StarterPack,string)=>(boolean)",
    isDescendantOf="(StarterPack,any)=>(boolean)",
    remove="(StarterPack)=>()"}


, ManualSurfaceJointInstance={
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    C0="CFrame",
    C1="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ManualSurfaceJointInstance)=>()",
    Clone="(ManualSurfaceJointInstance)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ManualSurfaceJointInstance)=>()",
    Enabled="boolean",
    FindFirstAncestor="(ManualSurfaceJointInstance,string)=>(any)",
    FindFirstAncestorOfClass="(ManualSurfaceJointInstance,string)=>(any)",
    FindFirstAncestorWhichIsA="(ManualSurfaceJointInstance,string)=>(any)",
    FindFirstChild="(ManualSurfaceJointInstance,string,boolean)=>(any)",
    FindFirstChildOfClass="(ManualSurfaceJointInstance,string)=>(any)",
    FindFirstChildWhichIsA="(ManualSurfaceJointInstance,string,boolean)=>(any)",
    GetAttribute="(ManualSurfaceJointInstance,string)=>(any)",
    GetAttributeChangedSignal="(ManualSurfaceJointInstance,string)=>(any)",
    GetAttributes="(ManualSurfaceJointInstance)=>(any)",
    GetChildren="(ManualSurfaceJointInstance)=>(any)",
    GetDebugId="(ManualSurfaceJointInstance,number)=>(string)",
    GetDescendants="(ManualSurfaceJointInstance)=>(any)",
    GetFullName="(ManualSurfaceJointInstance)=>(string)",
    GetPropertyChangedSignal="(ManualSurfaceJointInstance,string)=>(any)",
    IsA="(ManualSurfaceJointInstance,string)=>(boolean)",
    IsAncestorOf="(ManualSurfaceJointInstance,any)=>(boolean)",
    IsAutoJoint="boolean",
    IsDescendantOf="(ManualSurfaceJointInstance,any)=>(boolean)",
    Name="string",
    Parent="any",
    Part0="any",
    Part1="any",
    Remove="(ManualSurfaceJointInstance)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ManualSurfaceJointInstance,string,any)=>()",
    Surface0="number",
    Surface1="number",
    Tags="any",
    WaitForChild="(ManualSurfaceJointInstance,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ManualSurfaceJointInstance)=>(any)",
    className="string",
    clone="(ManualSurfaceJointInstance)=>(any)",
    destroy="(ManualSurfaceJointInstance)=>()",
    findFirstChild="(ManualSurfaceJointInstance,string,boolean)=>(any)",
    getChildren="(ManualSurfaceJointInstance)=>(any)",
    isA="(ManualSurfaceJointInstance,string)=>(boolean)",
    isDescendantOf="(ManualSurfaceJointInstance,any)=>(boolean)",
    part1="any",
    remove="(ManualSurfaceJointInstance)=>()"}


, ManualWeld={
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    C0="CFrame",
    C1="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ManualWeld)=>()",
    Clone="(ManualWeld)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ManualWeld)=>()",
    Enabled="boolean",
    FindFirstAncestor="(ManualWeld,string)=>(any)",
    FindFirstAncestorOfClass="(ManualWeld,string)=>(any)",
    FindFirstAncestorWhichIsA="(ManualWeld,string)=>(any)",
    FindFirstChild="(ManualWeld,string,boolean)=>(any)",
    FindFirstChildOfClass="(ManualWeld,string)=>(any)",
    FindFirstChildWhichIsA="(ManualWeld,string,boolean)=>(any)",
    GetAttribute="(ManualWeld,string)=>(any)",
    GetAttributeChangedSignal="(ManualWeld,string)=>(any)",
    GetAttributes="(ManualWeld)=>(any)",
    GetChildren="(ManualWeld)=>(any)",
    GetDebugId="(ManualWeld,number)=>(string)",
    GetDescendants="(ManualWeld)=>(any)",
    GetFullName="(ManualWeld)=>(string)",
    GetPropertyChangedSignal="(ManualWeld,string)=>(any)",
    IsA="(ManualWeld,string)=>(boolean)",
    IsAncestorOf="(ManualWeld,any)=>(boolean)",
    IsAutoJoint="boolean",
    IsDescendantOf="(ManualWeld,any)=>(boolean)",
    Name="string",
    Parent="any",
    Part0="any",
    Part1="any",
    Remove="(ManualWeld)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ManualWeld,string,any)=>()",
    Surface0="number",
    Surface1="number",
    Tags="any",
    WaitForChild="(ManualWeld,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ManualWeld)=>(any)",
    className="string",
    clone="(ManualWeld)=>(any)",
    destroy="(ManualWeld)=>()",
    findFirstChild="(ManualWeld,string,boolean)=>(any)",
    getChildren="(ManualWeld)=>(any)",
    isA="(ManualWeld,string)=>(boolean)",
    isDescendantOf="(ManualWeld,any)=>(boolean)",
    part1="any",
    remove="(ManualWeld)=>()"}


, WorldModel={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BreakJoints="(WorldModel)=>()",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(WorldModel)=>()",
    Clone="(WorldModel)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(WorldModel)=>()",
    FindFirstAncestor="(WorldModel,string)=>(any)",
    FindFirstAncestorOfClass="(WorldModel,string)=>(any)",
    FindFirstAncestorWhichIsA="(WorldModel,string)=>(any)",
    FindFirstChild="(WorldModel,string,boolean)=>(any)",
    FindFirstChildOfClass="(WorldModel,string)=>(any)",
    FindFirstChildWhichIsA="(WorldModel,string,boolean)=>(any)",
    FindPartOnRay="(WorldModel,Ray,any,boolean,boolean)=>(any)",
    FindPartOnRayWithIgnoreList="(WorldModel,Ray,any,boolean,boolean)=>(any)",
    FindPartOnRayWithWhitelist="(WorldModel,Ray,any,boolean)=>(any)",
    FindPartsInRegion3="(WorldModel,any,any,number)=>(any)",
    FindPartsInRegion3WithIgnoreList="(WorldModel,any,any,number)=>(any)",
    FindPartsInRegion3WithWhiteList="(WorldModel,any,any,number)=>(any)",
    GetAttribute="(WorldModel,string)=>(any)",
    GetAttributeChangedSignal="(WorldModel,string)=>(any)",
    GetAttributes="(WorldModel)=>(any)",
    GetBoundingBox="(WorldModel)=>(any)",
    GetChildren="(WorldModel)=>(any)",
    GetDebugId="(WorldModel,number)=>(string)",
    GetDescendants="(WorldModel)=>(any)",
    GetExtentsSize="(WorldModel)=>(Vector3)",
    GetFullName="(WorldModel)=>(string)",
    GetModelCFrame="(WorldModel)=>(CFrame)",
    GetModelSize="(WorldModel)=>(Vector3)",
    GetPrimaryPartCFrame="(WorldModel)=>(CFrame)",
    GetPropertyChangedSignal="(WorldModel,string)=>(any)",
    IsA="(WorldModel,string)=>(boolean)",
    IsAncestorOf="(WorldModel,any)=>(boolean)",
    IsDescendantOf="(WorldModel,any)=>(boolean)",
    IsRegion3Empty="(WorldModel,any,any)=>(boolean)",
    IsRegion3EmptyWithIgnoreList="(WorldModel,any,any)=>(boolean)",
    MakeJoints="(WorldModel)=>()",
    ModelComplete="Event",
    ModelInPrimary="CFrame",
    ModelIncomplete="Event",
    MoveTo="(WorldModel,Vector3)=>()",
    Name="string",
    Parent="any",
    PrimaryPart="any",
    Remove="(WorldModel)=>()",
    ResetOrientationToIdentity="(WorldModel)=>()",
    RobloxLocked="boolean",
    SetAttribute="(WorldModel,string,any)=>()",
    SetIdentityOrientation="(WorldModel)=>()",
    SetPrimaryPartCFrame="(WorldModel,CFrame)=>()",
    Tags="any",
    TranslateBy="(WorldModel,Vector3)=>()",
    WaitForChild="(WorldModel,string,number)=>(any)",
    archivable="boolean",
    breakJoints="(WorldModel)=>()",
    childAdded="Event",
    children="(WorldModel)=>(any)",
    className="string",
    clone="(WorldModel)=>(any)",
    destroy="(WorldModel)=>()",
    findFirstChild="(WorldModel,string,boolean)=>(any)",
    findPartOnRay="(WorldModel,Ray,any,boolean,boolean)=>(any)",
    findPartsInRegion3="(WorldModel,any,any,number)=>(any)",
    getChildren="(WorldModel)=>(any)",
    isA="(WorldModel,string)=>(boolean)",
    isDescendantOf="(WorldModel,any)=>(boolean)",
    makeJoints="(WorldModel)=>()",
    move="(WorldModel,Vector3)=>()",
    moveTo="(WorldModel,Vector3)=>()",
    remove="(WorldModel)=>()"}


, MeshContentProvider={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(MeshContentProvider)=>()",
    Clone="(MeshContentProvider)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(MeshContentProvider)=>()",
    FindFirstAncestor="(MeshContentProvider,string)=>(any)",
    FindFirstAncestorOfClass="(MeshContentProvider,string)=>(any)",
    FindFirstAncestorWhichIsA="(MeshContentProvider,string)=>(any)",
    FindFirstChild="(MeshContentProvider,string,boolean)=>(any)",
    FindFirstChildOfClass="(MeshContentProvider,string)=>(any)",
    FindFirstChildWhichIsA="(MeshContentProvider,string,boolean)=>(any)",
    GetAttribute="(MeshContentProvider,string)=>(any)",
    GetAttributeChangedSignal="(MeshContentProvider,string)=>(any)",
    GetAttributes="(MeshContentProvider)=>(any)",
    GetChildren="(MeshContentProvider)=>(any)",
    GetContentMemoryData="(MeshContentProvider)=>(any)",
    GetDebugId="(MeshContentProvider,number)=>(string)",
    GetDescendants="(MeshContentProvider)=>(any)",
    GetFullName="(MeshContentProvider)=>(string)",
    GetPropertyChangedSignal="(MeshContentProvider,string)=>(any)",
    IsA="(MeshContentProvider,string)=>(boolean)",
    IsAncestorOf="(MeshContentProvider,any)=>(boolean)",
    IsDescendantOf="(MeshContentProvider,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(MeshContentProvider)=>()",
    RobloxLocked="boolean",
    SetAttribute="(MeshContentProvider,string,any)=>()",
    Tags="any",
    WaitForChild="(MeshContentProvider,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(MeshContentProvider)=>(any)",
    className="string",
    clone="(MeshContentProvider)=>(any)",
    destroy="(MeshContentProvider)=>()",
    findFirstChild="(MeshContentProvider,string,boolean)=>(any)",
    getChildren="(MeshContentProvider)=>(any)",
    isA="(MeshContentProvider,string)=>(boolean)",
    isDescendantOf="(MeshContentProvider,any)=>(boolean)",
    remove="(MeshContentProvider)=>()"}


, Model={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BreakJoints="(Model)=>()",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Model)=>()",
    Clone="(Model)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Model)=>()",
    FindFirstAncestor="(Model,string)=>(any)",
    FindFirstAncestorOfClass="(Model,string)=>(any)",
    FindFirstAncestorWhichIsA="(Model,string)=>(any)",
    FindFirstChild="(Model,string,boolean)=>(any)",
    FindFirstChildOfClass="(Model,string)=>(any)",
    FindFirstChildWhichIsA="(Model,string,boolean)=>(any)",
    GetAttribute="(Model,string)=>(any)",
    GetAttributeChangedSignal="(Model,string)=>(any)",
    GetAttributes="(Model)=>(any)",
    GetBoundingBox="(Model)=>(any)",
    GetChildren="(Model)=>(any)",
    GetDebugId="(Model,number)=>(string)",
    GetDescendants="(Model)=>(any)",
    GetExtentsSize="(Model)=>(Vector3)",
    GetFullName="(Model)=>(string)",
    GetModelCFrame="(Model)=>(CFrame)",
    GetModelSize="(Model)=>(Vector3)",
    GetPrimaryPartCFrame="(Model)=>(CFrame)",
    GetPropertyChangedSignal="(Model,string)=>(any)",
    IsA="(Model,string)=>(boolean)",
    IsAncestorOf="(Model,any)=>(boolean)",
    IsDescendantOf="(Model,any)=>(boolean)",
    MakeJoints="(Model)=>()",
    ModelComplete="Event",
    ModelInPrimary="CFrame",
    ModelIncomplete="Event",
    MoveTo="(Model,Vector3)=>()",
    Name="string",
    Parent="any",
    PrimaryPart="any",
    Remove="(Model)=>()",
    ResetOrientationToIdentity="(Model)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Model,string,any)=>()",
    SetIdentityOrientation="(Model)=>()",
    SetPrimaryPartCFrame="(Model,CFrame)=>()",
    Tags="any",
    TranslateBy="(Model,Vector3)=>()",
    WaitForChild="(Model,string,number)=>(any)",
    archivable="boolean",
    breakJoints="(Model)=>()",
    childAdded="Event",
    children="(Model)=>(any)",
    className="string",
    clone="(Model)=>(any)",
    destroy="(Model)=>()",
    findFirstChild="(Model,string,boolean)=>(any)",
    getChildren="(Model)=>(any)",
    isA="(Model,string)=>(boolean)",
    isDescendantOf="(Model,any)=>(boolean)",
    makeJoints="(Model)=>()",
    move="(Model,Vector3)=>()",
    moveTo="(Model,Vector3)=>()",
    remove="(Model)=>()"}


, ModuleScript={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CachedRemoteSource="any",
    CachedRemoteSourceLoadState="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ModuleScript)=>()",
    Clone="(ModuleScript)=>(any)",
    Confidential="boolean",
    CoreScriptModified="boolean",
    CurrentEditor="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ModuleScript)=>()",
    FindFirstAncestor="(ModuleScript,string)=>(any)",
    FindFirstAncestorOfClass="(ModuleScript,string)=>(any)",
    FindFirstAncestorWhichIsA="(ModuleScript,string)=>(any)",
    FindFirstChild="(ModuleScript,string,boolean)=>(any)",
    FindFirstChildOfClass="(ModuleScript,string)=>(any)",
    FindFirstChildWhichIsA="(ModuleScript,string,boolean)=>(any)",
    GetAttribute="(ModuleScript,string)=>(any)",
    GetAttributeChangedSignal="(ModuleScript,string)=>(any)",
    GetAttributes="(ModuleScript)=>(any)",
    GetChildren="(ModuleScript)=>(any)",
    GetDebugId="(ModuleScript,number)=>(string)",
    GetDescendants="(ModuleScript)=>(any)",
    GetFullName="(ModuleScript)=>(string)",
    GetPropertyChangedSignal="(ModuleScript,string)=>(any)",
    HasAssociatedDrafts="boolean",
    IsA="(ModuleScript,string)=>(boolean)",
    IsAncestorOf="(ModuleScript,any)=>(boolean)",
    IsDescendantOf="(ModuleScript,any)=>(boolean)",
    LinkedSource="any",
    LockGrantedOrNot="Event",
    LostLock="Event",
    Name="string",
    Parent="any",
    Remove="(ModuleScript)=>()",
    RequestLock="Event",
    RequestScriptHash="Event",
    RobloxLocked="boolean",
    SandboxedSource="any",
    ScriptGuid="string",
    SetAttribute="(ModuleScript,string,any)=>()",
    Source="any",
    Tags="any",
    VerifyScriptHash="Event",
    WaitForChild="(ModuleScript,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ModuleScript)=>(any)",
    className="string",
    clone="(ModuleScript)=>(any)",
    destroy="(ModuleScript)=>()",
    findFirstChild="(ModuleScript,string,boolean)=>(any)",
    getChildren="(ModuleScript)=>(any)",
    isA="(ModuleScript,string)=>(boolean)",
    isDescendantOf="(ModuleScript,any)=>(boolean)",
    remove="(ModuleScript)=>()"}


, Mouse={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Button1Down="Event",
    Button1Up="Event",
    Button2Down="Event",
    Button2Up="Event",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Mouse)=>()",
    Clone="(Mouse)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Mouse)=>()",
    FindFirstAncestor="(Mouse,string)=>(any)",
    FindFirstAncestorOfClass="(Mouse,string)=>(any)",
    FindFirstAncestorWhichIsA="(Mouse,string)=>(any)",
    FindFirstChild="(Mouse,string,boolean)=>(any)",
    FindFirstChildOfClass="(Mouse,string)=>(any)",
    FindFirstChildWhichIsA="(Mouse,string,boolean)=>(any)",
    GetAttribute="(Mouse,string)=>(any)",
    GetAttributeChangedSignal="(Mouse,string)=>(any)",
    GetAttributes="(Mouse)=>(any)",
    GetChildren="(Mouse)=>(any)",
    GetDebugId="(Mouse,number)=>(string)",
    GetDescendants="(Mouse)=>(any)",
    GetFullName="(Mouse)=>(string)",
    GetPropertyChangedSignal="(Mouse,string)=>(any)",
    Hit="CFrame",
    Icon="any",
    Idle="Event",
    IsA="(Mouse,string)=>(boolean)",
    IsAncestorOf="(Mouse,any)=>(boolean)",
    IsDescendantOf="(Mouse,any)=>(boolean)",
    KeyDown="Event",
    KeyUp="Event",
    Move="Event",
    Name="string",
    Origin="CFrame",
    Parent="any",
    Remove="(Mouse)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Mouse,string,any)=>()",
    Tags="any",
    Target="any",
    TargetFilter="any",
    TargetSurface="any",
    UnitRay="Ray",
    ViewSizeX="number",
    ViewSizeY="number",
    WaitForChild="(Mouse,string,number)=>(any)",
    WheelBackward="Event",
    WheelForward="Event",
    X="number",
    Y="number",
    archivable="boolean",
    childAdded="Event",
    children="(Mouse)=>(any)",
    className="string",
    clone="(Mouse)=>(any)",
    destroy="(Mouse)=>()",
    findFirstChild="(Mouse,string,boolean)=>(any)",
    getChildren="(Mouse)=>(any)",
    hit="CFrame",
    isA="(Mouse,string)=>(boolean)",
    isDescendantOf="(Mouse,any)=>(boolean)",
    keyDown="Event",
    remove="(Mouse)=>()",
    target="any"}


, MultipleDocumentInterfaceInstance={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(MultipleDocumentInterfaceInstance)=>()",
    Clone="(MultipleDocumentInterfaceInstance)=>(any)",
    DataCost="number",
    DataModelSessionEnded="Event",
    DataModelSessionStarted="Event",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(MultipleDocumentInterfaceInstance)=>()",
    FindFirstAncestor="(MultipleDocumentInterfaceInstance,string)=>(any)",
    FindFirstAncestorOfClass="(MultipleDocumentInterfaceInstance,string)=>(any)",
    FindFirstAncestorWhichIsA="(MultipleDocumentInterfaceInstance,string)=>(any)",
    FindFirstChild="(MultipleDocumentInterfaceInstance,string,boolean)=>(any)",
    FindFirstChildOfClass="(MultipleDocumentInterfaceInstance,string)=>(any)",
    FindFirstChildWhichIsA="(MultipleDocumentInterfaceInstance,string,boolean)=>(any)",
    FocusedDataModelSession="any",
    GetAttribute="(MultipleDocumentInterfaceInstance,string)=>(any)",
    GetAttributeChangedSignal="(MultipleDocumentInterfaceInstance,string)=>(any)",
    GetAttributes="(MultipleDocumentInterfaceInstance)=>(any)",
    GetChildren="(MultipleDocumentInterfaceInstance)=>(any)",
    GetDebugId="(MultipleDocumentInterfaceInstance,number)=>(string)",
    GetDescendants="(MultipleDocumentInterfaceInstance)=>(any)",
    GetFullName="(MultipleDocumentInterfaceInstance)=>(string)",
    GetPropertyChangedSignal="(MultipleDocumentInterfaceInstance,string)=>(any)",
    IsA="(MultipleDocumentInterfaceInstance,string)=>(boolean)",
    IsAncestorOf="(MultipleDocumentInterfaceInstance,any)=>(boolean)",
    IsDescendantOf="(MultipleDocumentInterfaceInstance,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(MultipleDocumentInterfaceInstance)=>()",
    RobloxLocked="boolean",
    SetAttribute="(MultipleDocumentInterfaceInstance,string,any)=>()",
    Tags="any",
    WaitForChild="(MultipleDocumentInterfaceInstance,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(MultipleDocumentInterfaceInstance)=>(any)",
    className="string",
    clone="(MultipleDocumentInterfaceInstance)=>(any)",
    destroy="(MultipleDocumentInterfaceInstance)=>()",
    findFirstChild="(MultipleDocumentInterfaceInstance,string,boolean)=>(any)",
    getChildren="(MultipleDocumentInterfaceInstance)=>(any)",
    isA="(MultipleDocumentInterfaceInstance,string)=>(boolean)",
    isDescendantOf="(MultipleDocumentInterfaceInstance,any)=>(boolean)",
    remove="(MultipleDocumentInterfaceInstance)=>()"}


, RBXScriptConnection=any

, NegateOperation={
    AncestryChanged="Event",
    Anchored="boolean",
    Archivable="boolean",
    AssetId="any",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BackParamA="number",
    BackParamB="number",
    BackSurface="any",
    BackSurfaceInput="any",
    BottomParamA="number",
    BottomParamB="number",
    BottomSurface="any",
    BottomSurfaceInput="any",
    BreakJoints="(NegateOperation)=>()",
    BrickColor="any",
    CFrame="CFrame",
    CanCollide="boolean",
    CanCollideWith="(NegateOperation,any)=>(boolean)",
    CanSetNetworkOwnership="(NegateOperation)=>(any)",
    CastShadow="boolean",
    CenterOfMass="Vector3",
    Changed="Event",
    ChildAdded="Event",
    ChildData="any",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(NegateOperation)=>()",
    Clone="(NegateOperation)=>(any)",
    CollisionFidelity="any",
    CollisionGroupId="number",
    Color="Color3",
    Color3uint8="any",
    CustomPhysicalProperties="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(NegateOperation)=>()",
    DraggingV1="boolean",
    Elasticity="number",
    FindFirstAncestor="(NegateOperation,string)=>(any)",
    FindFirstAncestorOfClass="(NegateOperation,string)=>(any)",
    FindFirstAncestorWhichIsA="(NegateOperation,string)=>(any)",
    FindFirstChild="(NegateOperation,string,boolean)=>(any)",
    FindFirstChildOfClass="(NegateOperation,string)=>(any)",
    FindFirstChildWhichIsA="(NegateOperation,string,boolean)=>(any)",
    FormFactor="any",
    Friction="number",
    FrontParamA="number",
    FrontParamB="number",
    FrontSurface="any",
    FrontSurfaceInput="any",
    GetAttribute="(NegateOperation,string)=>(any)",
    GetAttributeChangedSignal="(NegateOperation,string)=>(any)",
    GetAttributes="(NegateOperation)=>(any)",
    GetChildren="(NegateOperation)=>(any)",
    GetConnectedParts="(NegateOperation,boolean)=>(any)",
    GetDebugId="(NegateOperation,number)=>(string)",
    GetDescendants="(NegateOperation)=>(any)",
    GetFullName="(NegateOperation)=>(string)",
    GetJoints="(NegateOperation)=>(any)",
    GetMass="(NegateOperation)=>(number)",
    GetNetworkOwner="(NegateOperation)=>(any)",
    GetNetworkOwnershipAuto="(NegateOperation)=>(boolean)",
    GetPropertyChangedSignal="(NegateOperation,string)=>(any)",
    GetRenderCFrame="(NegateOperation)=>(CFrame)",
    GetRootPart="(NegateOperation)=>(any)",
    GetTouchingParts="(NegateOperation)=>(any)",
    InitialSize="Vector3",
    IsA="(NegateOperation,string)=>(boolean)",
    IsAncestorOf="(NegateOperation,any)=>(boolean)",
    IsDescendantOf="(NegateOperation,any)=>(boolean)",
    IsGrounded="(NegateOperation)=>(boolean)",
    LODData="any",
    LeftParamA="number",
    LeftParamB="number",
    LeftSurface="any",
    LeftSurfaceInput="any",
    LocalSimulationTouched="Event",
    LocalTransparencyModifier="number",
    Locked="boolean",
    MakeJoints="(NegateOperation)=>()",
    Massless="boolean",
    Material="any",
    MeshData="any",
    Name="string",
    NetworkIsSleeping="boolean",
    NetworkOwnerChanged="Event",
    NetworkOwnerV3="any",
    NetworkOwnershipRule="any",
    Orientation="Vector3",
    OutfitChanged="Event",
    Parent="any",
    PhysicalConfigData="any",
    PhysicsData="any",
    Position="Vector3",
    ReceiveAge="number",
    Reflectance="number",
    Remove="(NegateOperation)=>()",
    RenderFidelity="any",
    Resize="(NegateOperation,any,number)=>(boolean)",
    ResizeIncrement="number",
    ResizeableFaces="any",
    RightParamA="number",
    RightParamB="number",
    RightSurface="any",
    RightSurfaceInput="any",
    RobloxLocked="boolean",
    RootPriority="number",
    RotVelocity="Vector3",
    Rotation="Vector3",
    SetAttribute="(NegateOperation,string,any)=>()",
    SetNetworkOwner="(NegateOperation,any)=>()",
    SetNetworkOwnershipAuto="(NegateOperation)=>()",
    Size="Vector3",
    SpecificGravity="number",
    StoppedTouching="Event",
    SubtractAsync="(NegateOperation,any,any,any)=>(any)",
    Tags="any",
    TopParamA="number",
    TopParamB="number",
    TopSurface="any",
    TopSurfaceInput="any",
    TouchEnded="Event",
    Touched="Event",
    Transparency="number",
    TriangleCount="number",
    UnionAsync="(NegateOperation,any,any,any)=>(any)",
    UsePartColor="boolean",
    Velocity="Vector3",
    WaitForChild="(NegateOperation,string,number)=>(any)",
    archivable="boolean",
    breakJoints="(NegateOperation)=>()",
    brickColor="any",
    childAdded="Event",
    children="(NegateOperation)=>(any)",
    className="string",
    clone="(NegateOperation)=>(any)",
    destroy="(NegateOperation)=>()",
    findFirstChild="(NegateOperation,string,boolean)=>(any)",
    getChildren="(NegateOperation)=>(any)",
    getMass="(NegateOperation)=>(number)",
    isA="(NegateOperation,string)=>(boolean)",
    isDescendantOf="(NegateOperation,any)=>(boolean)",
    makeJoints="(NegateOperation)=>()",
    remove="(NegateOperation)=>()",
    resize="(NegateOperation,any,number)=>(boolean)",
    siz="Vector3",
    size="Vector3",
    touched="Event"}


, NetworkMarker={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(NetworkMarker)=>()",
    Clone="(NetworkMarker)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(NetworkMarker)=>()",
    FindFirstAncestor="(NetworkMarker,string)=>(any)",
    FindFirstAncestorOfClass="(NetworkMarker,string)=>(any)",
    FindFirstAncestorWhichIsA="(NetworkMarker,string)=>(any)",
    FindFirstChild="(NetworkMarker,string,boolean)=>(any)",
    FindFirstChildOfClass="(NetworkMarker,string)=>(any)",
    FindFirstChildWhichIsA="(NetworkMarker,string,boolean)=>(any)",
    GetAttribute="(NetworkMarker,string)=>(any)",
    GetAttributeChangedSignal="(NetworkMarker,string)=>(any)",
    GetAttributes="(NetworkMarker)=>(any)",
    GetChildren="(NetworkMarker)=>(any)",
    GetDebugId="(NetworkMarker,number)=>(string)",
    GetDescendants="(NetworkMarker)=>(any)",
    GetFullName="(NetworkMarker)=>(string)",
    GetPropertyChangedSignal="(NetworkMarker,string)=>(any)",
    IsA="(NetworkMarker,string)=>(boolean)",
    IsAncestorOf="(NetworkMarker,any)=>(boolean)",
    IsDescendantOf="(NetworkMarker,any)=>(boolean)",
    Name="string",
    Parent="any",
    Received="Event",
    Remove="(NetworkMarker)=>()",
    RobloxLocked="boolean",
    SetAttribute="(NetworkMarker,string,any)=>()",
    Tags="any",
    WaitForChild="(NetworkMarker,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(NetworkMarker)=>(any)",
    className="string",
    clone="(NetworkMarker)=>(any)",
    destroy="(NetworkMarker)=>()",
    findFirstChild="(NetworkMarker,string,boolean)=>(any)",
    getChildren="(NetworkMarker)=>(any)",
    isA="(NetworkMarker,string)=>(boolean)",
    isDescendantOf="(NetworkMarker,any)=>(boolean)",
    remove="(NetworkMarker)=>()"}


, NetworkPeer={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(NetworkPeer)=>()",
    Clone="(NetworkPeer)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(NetworkPeer)=>()",
    FindFirstAncestor="(NetworkPeer,string)=>(any)",
    FindFirstAncestorOfClass="(NetworkPeer,string)=>(any)",
    FindFirstAncestorWhichIsA="(NetworkPeer,string)=>(any)",
    FindFirstChild="(NetworkPeer,string,boolean)=>(any)",
    FindFirstChildOfClass="(NetworkPeer,string)=>(any)",
    FindFirstChildWhichIsA="(NetworkPeer,string,boolean)=>(any)",
    GetAttribute="(NetworkPeer,string)=>(any)",
    GetAttributeChangedSignal="(NetworkPeer,string)=>(any)",
    GetAttributes="(NetworkPeer)=>(any)",
    GetChildren="(NetworkPeer)=>(any)",
    GetDebugId="(NetworkPeer,number)=>(string)",
    GetDescendants="(NetworkPeer)=>(any)",
    GetFullName="(NetworkPeer)=>(string)",
    GetPropertyChangedSignal="(NetworkPeer,string)=>(any)",
    IsA="(NetworkPeer,string)=>(boolean)",
    IsAncestorOf="(NetworkPeer,any)=>(boolean)",
    IsDescendantOf="(NetworkPeer,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(NetworkPeer)=>()",
    RobloxLocked="boolean",
    SetAttribute="(NetworkPeer,string,any)=>()",
    SetOutgoingKBPSLimit="(NetworkPeer,number)=>()",
    Tags="any",
    WaitForChild="(NetworkPeer,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(NetworkPeer)=>(any)",
    className="string",
    clone="(NetworkPeer)=>(any)",
    destroy="(NetworkPeer)=>()",
    findFirstChild="(NetworkPeer,string,boolean)=>(any)",
    getChildren="(NetworkPeer)=>(any)",
    isA="(NetworkPeer,string)=>(boolean)",
    isDescendantOf="(NetworkPeer,any)=>(boolean)",
    remove="(NetworkPeer)=>()"}


, NetworkSettings={
    AncestryChanged="Event",
    Archivable="boolean",
    ArePhysicsRejectionsReported="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(NetworkSettings)=>()",
    ClientPhysicsSendRate="number",
    Clone="(NetworkSettings)=>(any)",
    DataCost="number",
    DataGCRate="number",
    DataMtuAdjust="number",
    DataSendPriority="any",
    DataSendRate="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(NetworkSettings)=>()",
    ExtraMemoryUsed="number",
    FindFirstAncestor="(NetworkSettings,string)=>(any)",
    FindFirstAncestorOfClass="(NetworkSettings,string)=>(any)",
    FindFirstAncestorWhichIsA="(NetworkSettings,string)=>(any)",
    FindFirstChild="(NetworkSettings,string,boolean)=>(any)",
    FindFirstChildOfClass="(NetworkSettings,string)=>(any)",
    FindFirstChildWhichIsA="(NetworkSettings,string,boolean)=>(any)",
    FreeMemoryMBytes="number",
    GetAttribute="(NetworkSettings,string)=>(any)",
    GetAttributeChangedSignal="(NetworkSettings,string)=>(any)",
    GetAttributes="(NetworkSettings)=>(any)",
    GetChildren="(NetworkSettings)=>(any)",
    GetDebugId="(NetworkSettings,number)=>(string)",
    GetDescendants="(NetworkSettings)=>(any)",
    GetFullName="(NetworkSettings)=>(string)",
    GetPropertyChangedSignal="(NetworkSettings,string)=>(any)",
    HttpProxyEnabled="boolean",
    HttpProxyURL="string",
    IncommingReplicationLag="number",
    IsA="(NetworkSettings,string)=>(boolean)",
    IsAncestorOf="(NetworkSettings,any)=>(boolean)",
    IsDescendantOf="(NetworkSettings,any)=>(boolean)",
    IsQueueErrorComputed="boolean",
    Name="string",
    NetworkOwnerRate="number",
    Parent="any",
    PhysicsMtuAdjust="number",
    PhysicsSendPriority="any",
    PhysicsSendRate="number",
    PreferredClientPort="number",
    PrintBits="boolean",
    PrintEvents="boolean",
    PrintFilters="boolean",
    PrintInstances="boolean",
    PrintJoinSizeBreakdown="boolean",
    PrintPhysicsErrors="boolean",
    PrintProperties="boolean",
    PrintSplitMessage="boolean",
    PrintStreamInstanceQuota="boolean",
    PrintTouches="boolean",
    ReceiveRate="number",
    Remove="(NetworkSettings)=>()",
    RenderStreamedRegions="boolean",
    RobloxLocked="boolean",
    SetAttribute="(NetworkSettings,string,any)=>()",
    ShowActiveAnimationAsset="boolean",
    Tags="any",
    TouchSendRate="number",
    TrackData,s="boolean",
    TrackPhysicsDetails="boolean",
    UsePhysicsPacketCache="boolean",
    WaitForChild="(NetworkSettings,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(NetworkSettings)=>(any)",
    className="string",
    clone="(NetworkSettings)=>(any)",
    destroy="(NetworkSettings)=>()",
    findFirstChild="(NetworkSettings,string,boolean)=>(any)",
    getChildren="(NetworkSettings)=>(any)",
    isA="(NetworkSettings,string)=>(boolean)",
    isDescendantOf="(NetworkSettings,any)=>(boolean)",
    remove="(NetworkSettings)=>()"}


, VersionControlService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(VersionControlService)=>()",
    Clone="(VersionControlService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(VersionControlService)=>()",
    FindFirstAncestor="(VersionControlService,string)=>(any)",
    FindFirstAncestorOfClass="(VersionControlService,string)=>(any)",
    FindFirstAncestorWhichIsA="(VersionControlService,string)=>(any)",
    FindFirstChild="(VersionControlService,string,boolean)=>(any)",
    FindFirstChildOfClass="(VersionControlService,string)=>(any)",
    FindFirstChildWhichIsA="(VersionControlService,string,boolean)=>(any)",
    ForceDraftsUsage="boolean",
    GetAttribute="(VersionControlService,string)=>(any)",
    GetAttributeChangedSignal="(VersionControlService,string)=>(any)",
    GetAttributes="(VersionControlService)=>(any)",
    GetChildren="(VersionControlService)=>(any)",
    GetDebugId="(VersionControlService,number)=>(string)",
    GetDescendants="(VersionControlService)=>(any)",
    GetFullName="(VersionControlService)=>(string)",
    GetPropertyChangedSignal="(VersionControlService,string)=>(any)",
    IsA="(VersionControlService,string)=>(boolean)",
    IsAncestorOf="(VersionControlService,any)=>(boolean)",
    IsDescendantOf="(VersionControlService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(VersionControlService)=>()",
    RequestAllEditorsSignal="Event",
    RobloxLocked="boolean",
    ScriptChangesSubmitted="Event",
    ScriptCollabEnabled="boolean",
    ScriptEditorAdded="Event",
    ScriptEditorRemoved="Event",
    ScriptStartEdit="Event",
    ScriptStopEdit="Event",
    ScriptSubmitChanges="Event",
    SetAttribute="(VersionControlService,string,any)=>()",
    Tags="any",
    WaitForChild="(VersionControlService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(VersionControlService)=>(any)",
    className="string",
    clone="(VersionControlService)=>(any)",
    destroy="(VersionControlService)=>()",
    findFirstChild="(VersionControlService,string,boolean)=>(any)",
    getChildren="(VersionControlService)=>(any)",
    isA="(VersionControlService,string)=>(boolean)",
    isDescendantOf="(VersionControlService,any)=>(boolean)",
    remove="(VersionControlService)=>()"}


, NonReplicatedCSGDictionaryService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(NonReplicatedCSGDictionaryService)=>()",
    Clone="(NonReplicatedCSGDictionaryService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(NonReplicatedCSGDictionaryService)=>()",
    FindFirstAncestor="(NonReplicatedCSGDictionaryService,string)=>(any)",
    FindFirstAncestorOfClass="(NonReplicatedCSGDictionaryService,string)=>(any)",
    FindFirstAncestorWhichIsA="(NonReplicatedCSGDictionaryService,string)=>(any)",
    FindFirstChild="(NonReplicatedCSGDictionaryService,string,boolean)=>(any)",
    FindFirstChildOfClass="(NonReplicatedCSGDictionaryService,string)=>(any)",
    FindFirstChildWhichIsA="(NonReplicatedCSGDictionaryService,string,boolean)=>(any)",
    GetAttribute="(NonReplicatedCSGDictionaryService,string)=>(any)",
    GetAttributeChangedSignal="(NonReplicatedCSGDictionaryService,string)=>(any)",
    GetAttributes="(NonReplicatedCSGDictionaryService)=>(any)",
    GetChildren="(NonReplicatedCSGDictionaryService)=>(any)",
    GetDebugId="(NonReplicatedCSGDictionaryService,number)=>(string)",
    GetDescendants="(NonReplicatedCSGDictionaryService)=>(any)",
    GetFullName="(NonReplicatedCSGDictionaryService)=>(string)",
    GetPropertyChangedSignal="(NonReplicatedCSGDictionaryService,string)=>(any)",
    IsA="(NonReplicatedCSGDictionaryService,string)=>(boolean)",
    IsAncestorOf="(NonReplicatedCSGDictionaryService,any)=>(boolean)",
    IsDescendantOf="(NonReplicatedCSGDictionaryService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(NonReplicatedCSGDictionaryService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(NonReplicatedCSGDictionaryService,string,any)=>()",
    Tags="any",
    WaitForChild="(NonReplicatedCSGDictionaryService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(NonReplicatedCSGDictionaryService)=>(any)",
    className="string",
    clone="(NonReplicatedCSGDictionaryService)=>(any)",
    destroy="(NonReplicatedCSGDictionaryService)=>()",
    findFirstChild="(NonReplicatedCSGDictionaryService,string,boolean)=>(any)",
    getChildren="(NonReplicatedCSGDictionaryService)=>(any)",
    isA="(NonReplicatedCSGDictionaryService,string)=>(boolean)",
    isDescendantOf="(NonReplicatedCSGDictionaryService,any)=>(boolean)",
    remove="(NonReplicatedCSGDictionaryService)=>()"}


, NotificationService={
    ActionEnabled="(NotificationService,any)=>()",
    ActionTaken="(NotificationService,any)=>()",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CancelAllNotification="(NotificationService,number)=>()",
    CancelNotification="(NotificationService,number,number)=>()",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(NotificationService)=>()",
    Clone="(NotificationService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(NotificationService)=>()",
    FindFirstAncestor="(NotificationService,string)=>(any)",
    FindFirstAncestorOfClass="(NotificationService,string)=>(any)",
    FindFirstAncestorWhichIsA="(NotificationService,string)=>(any)",
    FindFirstChild="(NotificationService,string,boolean)=>(any)",
    FindFirstChildOfClass="(NotificationService,string)=>(any)",
    FindFirstChildWhichIsA="(NotificationService,string,boolean)=>(any)",
    GetAttribute="(NotificationService,string)=>(any)",
    GetAttributeChangedSignal="(NotificationService,string)=>(any)",
    GetAttributes="(NotificationService)=>(any)",
    GetChildren="(NotificationService)=>(any)",
    GetDebugId="(NotificationService,number)=>(string)",
    GetDescendants="(NotificationService)=>(any)",
    GetFullName="(NotificationService)=>(string)",
    GetPropertyChangedSignal="(NotificationService,string)=>(any)",
    GetScheduledNotifications="(NotificationService,number)=>(any)",
    IsA="(NotificationService,string)=>(boolean)",
    IsAncestorOf="(NotificationService,any)=>(boolean)",
    IsDescendantOf="(NotificationService,any)=>(boolean)",
    IsLuaChatEnabled="boolean",
    IsLuaGameDetailsEnabled="boolean",
    Name="string",
    Parent="any",
    Remove="(NotificationService)=>()",
    RobloxConnectionChanged="Event",
    RobloxEventReceived="Event",
    RobloxLocked="boolean",
    ScheduleNotification="(NotificationService,number,number,string,number)=>()",
    SelectedTheme="string",
    SetAttribute="(NotificationService,string,any)=>()",
    Tags="any",
    WaitForChild="(NotificationService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(NotificationService)=>(any)",
    className="string",
    clone="(NotificationService)=>(any)",
    destroy="(NotificationService)=>()",
    findFirstChild="(NotificationService,string,boolean)=>(any)",
    getChildren="(NotificationService)=>(any)",
    isA="(NotificationService,string)=>(boolean)",
    isDescendantOf="(NotificationService,any)=>(boolean)",
    remove="(NotificationService)=>()"}


, ShirtGraphic={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ShirtGraphic)=>()",
    Clone="(ShirtGraphic)=>(any)",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ShirtGraphic)=>()",
    FindFirstAncestor="(ShirtGraphic,string)=>(any)",
    FindFirstAncestorOfClass="(ShirtGraphic,string)=>(any)",
    FindFirstAncestorWhichIsA="(ShirtGraphic,string)=>(any)",
    FindFirstChild="(ShirtGraphic,string,boolean)=>(any)",
    FindFirstChildOfClass="(ShirtGraphic,string)=>(any)",
    FindFirstChildWhichIsA="(ShirtGraphic,string,boolean)=>(any)",
    GetAttribute="(ShirtGraphic,string)=>(any)",
    GetAttributeChangedSignal="(ShirtGraphic,string)=>(any)",
    GetAttributes="(ShirtGraphic)=>(any)",
    GetChildren="(ShirtGraphic)=>(any)",
    GetDebugId="(ShirtGraphic,number)=>(string)",
    GetDescendants="(ShirtGraphic)=>(any)",
    GetFullName="(ShirtGraphic)=>(string)",
    GetPropertyChangedSignal="(ShirtGraphic,string)=>(any)",
    Graphic="any",
    IsA="(ShirtGraphic,string)=>(boolean)",
    IsAncestorOf="(ShirtGraphic,any)=>(boolean)",
    IsDescendantOf="(ShirtGraphic,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(ShirtGraphic)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ShirtGraphic,string,any)=>()",
    Tags="any",
    WaitForChild="(ShirtGraphic,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ShirtGraphic)=>(any)",
    className="string",
    clone="(ShirtGraphic)=>(any)",
    destroy="(ShirtGraphic)=>()",
    findFirstChild="(ShirtGraphic,string,boolean)=>(any)",
    getChildren="(ShirtGraphic)=>(any)",
    isA="(ShirtGraphic,string)=>(boolean)",
    isDescendantOf="(ShirtGraphic,any)=>(boolean)",
    remove="(ShirtGraphic)=>()"}


, NumberValue={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(NumberValue)=>()",
    Clone="(NumberValue)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(NumberValue)=>()",
    FindFirstAncestor="(NumberValue,string)=>(any)",
    FindFirstAncestorOfClass="(NumberValue,string)=>(any)",
    FindFirstAncestorWhichIsA="(NumberValue,string)=>(any)",
    FindFirstChild="(NumberValue,string,boolean)=>(any)",
    FindFirstChildOfClass="(NumberValue,string)=>(any)",
    FindFirstChildWhichIsA="(NumberValue,string,boolean)=>(any)",
    GetAttribute="(NumberValue,string)=>(any)",
    GetAttributeChangedSignal="(NumberValue,string)=>(any)",
    GetAttributes="(NumberValue)=>(any)",
    GetChildren="(NumberValue)=>(any)",
    GetDebugId="(NumberValue,number)=>(string)",
    GetDescendants="(NumberValue)=>(any)",
    GetFullName="(NumberValue)=>(string)",
    GetPropertyChangedSignal="(NumberValue,string)=>(any)",
    IsA="(NumberValue,string)=>(boolean)",
    IsAncestorOf="(NumberValue,any)=>(boolean)",
    IsDescendantOf="(NumberValue,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(NumberValue)=>()",
    RobloxLocked="boolean",
    SetAttribute="(NumberValue,string,any)=>()",
    Tags="any",
    Value="number",
    WaitForChild="(NumberValue,string,number)=>(any)",
    archivable="boolean",
    changed="Event",
    childAdded="Event",
    children="(NumberValue)=>(any)",
    className="string",
    clone="(NumberValue)=>(any)",
    destroy="(NumberValue)=>()",
    findFirstChild="(NumberValue,string,boolean)=>(any)",
    getChildren="(NumberValue)=>(any)",
    isA="(NumberValue,string)=>(boolean)",
    isDescendantOf="(NumberValue,any)=>(boolean)",
    remove="(NumberValue)=>()"}


, OrderedDataStore={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(OrderedDataStore)=>()",
    Clone="(OrderedDataStore)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(OrderedDataStore)=>()",
    FindFirstAncestor="(OrderedDataStore,string)=>(any)",
    FindFirstAncestorOfClass="(OrderedDataStore,string)=>(any)",
    FindFirstAncestorWhichIsA="(OrderedDataStore,string)=>(any)",
    FindFirstChild="(OrderedDataStore,string,boolean)=>(any)",
    FindFirstChildOfClass="(OrderedDataStore,string)=>(any)",
    FindFirstChildWhichIsA="(OrderedDataStore,string,boolean)=>(any)",
    GetAsync="(OrderedDataStore,string)=>(any)",
    GetAttribute="(OrderedDataStore,string)=>(any)",
    GetAttributeChangedSignal="(OrderedDataStore,string)=>(any)",
    GetAttributes="(OrderedDataStore)=>(any)",
    GetChildren="(OrderedDataStore)=>(any)",
    GetDebugId="(OrderedDataStore,number)=>(string)",
    GetDescendants="(OrderedDataStore)=>(any)",
    GetFullName="(OrderedDataStore)=>(string)",
    GetPropertyChangedSignal="(OrderedDataStore,string)=>(any)",
    GetSortedAsync="(OrderedDataStore,boolean,number,any,any)=>(any)",
    IncrementAsync="(OrderedDataStore,string,number)=>(any)",
    IsA="(OrderedDataStore,string)=>(boolean)",
    IsAncestorOf="(OrderedDataStore,any)=>(boolean)",
    IsDescendantOf="(OrderedDataStore,any)=>(boolean)",
    Name="string",
    OnUpdate="(OrderedDataStore,string,any)=>(any)",
    Parent="any",
    Remove="(OrderedDataStore)=>()",
    RemoveAsync="(OrderedDataStore,string)=>(any)",
    RobloxLocked="boolean",
    SetAsync="(OrderedDataStore,string,any)=>()",
    SetAttribute="(OrderedDataStore,string,any)=>()",
    Tags="any",
    UpdateAsync="(OrderedDataStore,string,any)=>(any)",
    WaitForChild="(OrderedDataStore,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(OrderedDataStore)=>(any)",
    className="string",
    clone="(OrderedDataStore)=>(any)",
    destroy="(OrderedDataStore)=>()",
    findFirstChild="(OrderedDataStore,string,boolean)=>(any)",
    getChildren="(OrderedDataStore)=>(any)",
    isA="(OrderedDataStore,string)=>(boolean)",
    isDescendantOf="(OrderedDataStore,any)=>(boolean)",
    remove="(OrderedDataStore)=>()"}


, PVAdornment={
    Adornee="any",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PVAdornment)=>()",
    Clone="(PVAdornment)=>(any)",
    Color="any",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PVAdornment)=>()",
    FindFirstAncestor="(PVAdornment,string)=>(any)",
    FindFirstAncestorOfClass="(PVAdornment,string)=>(any)",
    FindFirstAncestorWhichIsA="(PVAdornment,string)=>(any)",
    FindFirstChild="(PVAdornment,string,boolean)=>(any)",
    FindFirstChildOfClass="(PVAdornment,string)=>(any)",
    FindFirstChildWhichIsA="(PVAdornment,string,boolean)=>(any)",
    GetAttribute="(PVAdornment,string)=>(any)",
    GetAttributeChangedSignal="(PVAdornment,string)=>(any)",
    GetAttributes="(PVAdornment)=>(any)",
    GetChildren="(PVAdornment)=>(any)",
    GetDebugId="(PVAdornment,number)=>(string)",
    GetDescendants="(PVAdornment)=>(any)",
    GetFullName="(PVAdornment)=>(string)",
    GetPropertyChangedSignal="(PVAdornment,string)=>(any)",
    IsA="(PVAdornment,string)=>(boolean)",
    IsAncestorOf="(PVAdornment,any)=>(boolean)",
    IsDescendantOf="(PVAdornment,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(PVAdornment)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PVAdornment,string,any)=>()",
    Tags="any",
    Transparency="number",
    Visible="boolean",
    WaitForChild="(PVAdornment,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PVAdornment)=>(any)",
    className="string",
    clone="(PVAdornment)=>(any)",
    destroy="(PVAdornment)=>()",
    findFirstChild="(PVAdornment,string,boolean)=>(any)",
    getChildren="(PVAdornment)=>(any)",
    isA="(PVAdornment,string)=>(boolean)",
    isDescendantOf="(PVAdornment,any)=>(boolean)",
    remove="(PVAdornment)=>()"}


, SelectionSphere={
    Adornee="any",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SelectionSphere)=>()",
    Clone="(SelectionSphere)=>(any)",
    Color="any",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SelectionSphere)=>()",
    FindFirstAncestor="(SelectionSphere,string)=>(any)",
    FindFirstAncestorOfClass="(SelectionSphere,string)=>(any)",
    FindFirstAncestorWhichIsA="(SelectionSphere,string)=>(any)",
    FindFirstChild="(SelectionSphere,string,boolean)=>(any)",
    FindFirstChildOfClass="(SelectionSphere,string)=>(any)",
    FindFirstChildWhichIsA="(SelectionSphere,string,boolean)=>(any)",
    GetAttribute="(SelectionSphere,string)=>(any)",
    GetAttributeChangedSignal="(SelectionSphere,string)=>(any)",
    GetAttributes="(SelectionSphere)=>(any)",
    GetChildren="(SelectionSphere)=>(any)",
    GetDebugId="(SelectionSphere,number)=>(string)",
    GetDescendants="(SelectionSphere)=>(any)",
    GetFullName="(SelectionSphere)=>(string)",
    GetPropertyChangedSignal="(SelectionSphere,string)=>(any)",
    IsA="(SelectionSphere,string)=>(boolean)",
    IsAncestorOf="(SelectionSphere,any)=>(boolean)",
    IsDescendantOf="(SelectionSphere,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(SelectionSphere)=>()",
    RobloxLocked="boolean",
    SetAttribute="(SelectionSphere,string,any)=>()",
    SurfaceColor="any",
    SurfaceColor3="Color3",
    SurfaceTransparency="number",
    Tags="any",
    Transparency="number",
    Visible="boolean",
    WaitForChild="(SelectionSphere,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(SelectionSphere)=>(any)",
    className="string",
    clone="(SelectionSphere)=>(any)",
    destroy="(SelectionSphere)=>()",
    findFirstChild="(SelectionSphere,string,boolean)=>(any)",
    getChildren="(SelectionSphere)=>(any)",
    isA="(SelectionSphere,string)=>(boolean)",
    isDescendantOf="(SelectionSphere,any)=>(boolean)",
    remove="(SelectionSphere)=>()"}


, PVInstance={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PVInstance)=>()",
    Clone="(PVInstance)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PVInstance)=>()",
    FindFirstAncestor="(PVInstance,string)=>(any)",
    FindFirstAncestorOfClass="(PVInstance,string)=>(any)",
    FindFirstAncestorWhichIsA="(PVInstance,string)=>(any)",
    FindFirstChild="(PVInstance,string,boolean)=>(any)",
    FindFirstChildOfClass="(PVInstance,string)=>(any)",
    FindFirstChildWhichIsA="(PVInstance,string,boolean)=>(any)",
    GetAttribute="(PVInstance,string)=>(any)",
    GetAttributeChangedSignal="(PVInstance,string)=>(any)",
    GetAttributes="(PVInstance)=>(any)",
    GetChildren="(PVInstance)=>(any)",
    GetDebugId="(PVInstance,number)=>(string)",
    GetDescendants="(PVInstance)=>(any)",
    GetFullName="(PVInstance)=>(string)",
    GetPropertyChangedSignal="(PVInstance,string)=>(any)",
    IsA="(PVInstance,string)=>(boolean)",
    IsAncestorOf="(PVInstance,any)=>(boolean)",
    IsDescendantOf="(PVInstance,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(PVInstance)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PVInstance,string,any)=>()",
    Tags="any",
    WaitForChild="(PVInstance,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PVInstance)=>(any)",
    className="string",
    clone="(PVInstance)=>(any)",
    destroy="(PVInstance)=>()",
    findFirstChild="(PVInstance,string,boolean)=>(any)",
    getChildren="(PVInstance)=>(any)",
    isA="(PVInstance,string)=>(boolean)",
    isDescendantOf="(PVInstance,any)=>(boolean)",
    remove="(PVInstance)=>()"}


, Pants={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Pants)=>()",
    Clone="(Pants)=>(any)",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Pants)=>()",
    FindFirstAncestor="(Pants,string)=>(any)",
    FindFirstAncestorOfClass="(Pants,string)=>(any)",
    FindFirstAncestorWhichIsA="(Pants,string)=>(any)",
    FindFirstChild="(Pants,string,boolean)=>(any)",
    FindFirstChildOfClass="(Pants,string)=>(any)",
    FindFirstChildWhichIsA="(Pants,string,boolean)=>(any)",
    GetAttribute="(Pants,string)=>(any)",
    GetAttributeChangedSignal="(Pants,string)=>(any)",
    GetAttributes="(Pants)=>(any)",
    GetChildren="(Pants)=>(any)",
    GetDebugId="(Pants,number)=>(string)",
    GetDescendants="(Pants)=>(any)",
    GetFullName="(Pants)=>(string)",
    GetPropertyChangedSignal="(Pants,string)=>(any)",
    IsA="(Pants,string)=>(boolean)",
    IsAncestorOf="(Pants,any)=>(boolean)",
    IsDescendantOf="(Pants,any)=>(boolean)",
    Name="string",
    Outfit1="any",
    Outfit2="any",
    PantsTemplate="any",
    Parent="any",
    Remove="(Pants)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Pants,string,any)=>()",
    Tags="any",
    WaitForChild="(Pants,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Pants)=>(any)",
    className="string",
    clone="(Pants)=>(any)",
    destroy="(Pants)=>()",
    findFirstChild="(Pants,string,boolean)=>(any)",
    getChildren="(Pants)=>(any)",
    isA="(Pants,string)=>(boolean)",
    isDescendantOf="(Pants,any)=>(boolean)",
    remove="(Pants)=>()"}


, ParabolaAdornment={
    A="number",
    Adornee="any",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    B="number",
    C="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ParabolaAdornment)=>()",
    Clone="(ParabolaAdornment)=>(any)",
    Color="any",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ParabolaAdornment)=>()",
    FindFirstAncestor="(ParabolaAdornment,string)=>(any)",
    FindFirstAncestorOfClass="(ParabolaAdornment,string)=>(any)",
    FindFirstAncestorWhichIsA="(ParabolaAdornment,string)=>(any)",
    FindFirstChild="(ParabolaAdornment,string,boolean)=>(any)",
    FindFirstChildOfClass="(ParabolaAdornment,string)=>(any)",
    FindFirstChildWhichIsA="(ParabolaAdornment,string,boolean)=>(any)",
    FindPartOnParabola="(ParabolaAdornment,any)=>(any)",
    GetAttribute="(ParabolaAdornment,string)=>(any)",
    GetAttributeChangedSignal="(ParabolaAdornment,string)=>(any)",
    GetAttributes="(ParabolaAdornment)=>(any)",
    GetChildren="(ParabolaAdornment)=>(any)",
    GetDebugId="(ParabolaAdornment,number)=>(string)",
    GetDescendants="(ParabolaAdornment)=>(any)",
    GetFullName="(ParabolaAdornment)=>(string)",
    GetPropertyChangedSignal="(ParabolaAdornment,string)=>(any)",
    IsA="(ParabolaAdornment,string)=>(boolean)",
    IsAncestorOf="(ParabolaAdornment,any)=>(boolean)",
    IsDescendantOf="(ParabolaAdornment,any)=>(boolean)",
    Name="string",
    Parent="any",
    Range="number",
    Remove="(ParabolaAdornment)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ParabolaAdornment,string,any)=>()",
    Tags="any",
    Thickness="number",
    Transparency="number",
    Visible="boolean",
    WaitForChild="(ParabolaAdornment,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ParabolaAdornment)=>(any)",
    className="string",
    clone="(ParabolaAdornment)=>(any)",
    destroy="(ParabolaAdornment)=>()",
    findFirstChild="(ParabolaAdornment,string,boolean)=>(any)",
    getChildren="(ParabolaAdornment)=>(any)",
    isA="(ParabolaAdornment,string)=>(boolean)",
    isDescendantOf="(ParabolaAdornment,any)=>(boolean)",
    remove="(ParabolaAdornment)=>()"}


, PartAdornment={
    Adornee="any",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PartAdornment)=>()",
    Clone="(PartAdornment)=>(any)",
    Color="any",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PartAdornment)=>()",
    FindFirstAncestor="(PartAdornment,string)=>(any)",
    FindFirstAncestorOfClass="(PartAdornment,string)=>(any)",
    FindFirstAncestorWhichIsA="(PartAdornment,string)=>(any)",
    FindFirstChild="(PartAdornment,string,boolean)=>(any)",
    FindFirstChildOfClass="(PartAdornment,string)=>(any)",
    FindFirstChildWhichIsA="(PartAdornment,string,boolean)=>(any)",
    GetAttribute="(PartAdornment,string)=>(any)",
    GetAttributeChangedSignal="(PartAdornment,string)=>(any)",
    GetAttributes="(PartAdornment)=>(any)",
    GetChildren="(PartAdornment)=>(any)",
    GetDebugId="(PartAdornment,number)=>(string)",
    GetDescendants="(PartAdornment)=>(any)",
    GetFullName="(PartAdornment)=>(string)",
    GetPropertyChangedSignal="(PartAdornment,string)=>(any)",
    IsA="(PartAdornment,string)=>(boolean)",
    IsAncestorOf="(PartAdornment,any)=>(boolean)",
    IsDescendantOf="(PartAdornment,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(PartAdornment)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PartAdornment,string,any)=>()",
    Tags="any",
    Transparency="number",
    Visible="boolean",
    WaitForChild="(PartAdornment,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PartAdornment)=>(any)",
    className="string",
    clone="(PartAdornment)=>(any)",
    destroy="(PartAdornment)=>()",
    findFirstChild="(PartAdornment,string,boolean)=>(any)",
    getChildren="(PartAdornment)=>(any)",
    isA="(PartAdornment,string)=>(boolean)",
    isDescendantOf="(PartAdornment,any)=>(boolean)",
    remove="(PartAdornment)=>()"}


, UserInputService={
    AccelerometerEnabled="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BottomBarSize="Vector2",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(UserInputService)=>()",
    Clone="(UserInputService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(UserInputService)=>()",
    DeviceAccelerationChanged="Event",
    DeviceGravityChanged="Event",
    DeviceRotationChanged="Event",
    FindFirstAncestor="(UserInputService,string)=>(any)",
    FindFirstAncestorOfClass="(UserInputService,string)=>(any)",
    FindFirstAncestorWhichIsA="(UserInputService,string)=>(any)",
    FindFirstChild="(UserInputService,string,boolean)=>(any)",
    FindFirstChildOfClass="(UserInputService,string)=>(any)",
    FindFirstChildWhichIsA="(UserInputService,string,boolean)=>(any)",
    GamepadConnected="Event",
    GamepadDisconnected="Event",
    GamepadEnabled="boolean",
    GamepadSupports="(UserInputService,any,any)=>(boolean)",
    GazeSelectionEnabled="boolean",
    GetAttribute="(UserInputService,string)=>(any)",
    GetAttributeChangedSignal="(UserInputService,string)=>(any)",
    GetAttributes="(UserInputService)=>(any)",
    GetChildren="(UserInputService)=>(any)",
    GetConnectedGamepads="(UserInputService)=>(any)",
    GetDebugId="(UserInputService,number)=>(string)",
    GetDescendants="(UserInputService)=>(any)",
    GetDeviceAcceleration="(UserInputService)=>(any)",
    GetDeviceGravity="(UserInputService)=>(any)",
    GetDeviceRotation="(UserInputService)=>(any)",
    GetDevice,="(UserInputService)=>(any)",
    GetFocusedTextBox="(UserInputService)=>(any)",
    GetFullName="(UserInputService)=>(string)",
    GetGamepadConnected="(UserInputService,any)=>(boolean)",
    GetGamepadState="(UserInputService,any)=>(any)",
    GetKeysPressed="(UserInputService)=>(any)",
    GetLastInput,="(UserInputService)=>(any)",
    GetMouseButtonsPressed="(UserInputService)=>(any)",
    GetMouseDelta="(UserInputService)=>(Vector2)",
    GetMouseLocation="(UserInputService)=>(Vector2)",
    GetNavigationGamepads="(UserInputService)=>(any)",
    GetPlatform="(UserInputService)=>(any)",
    GetPropertyChangedSignal="(UserInputService,string)=>(any)",
    GetStringForKeyCode="(UserInputService,any)=>(string)",
    GetSupportedGamepadKeyCodes="(UserInputService,any)=>(any)",
    GetUserCFrame="(UserInputService,any)=>(CFrame)",
    GyroscopeEnabled="boolean",
    InputBegan="Event",
    InputChanged="Event",
    InputEnded="Event",
    IsA="(UserInputService,string)=>(boolean)",
    IsAncestorOf="(UserInputService,any)=>(boolean)",
    IsDescendantOf="(UserInputService,any)=>(boolean)",
    IsGamepadButtonDown="(UserInputService,any,any)=>(boolean)",
    IsKeyDown="(UserInputService,any)=>(boolean)",
    IsMouseButtonPressed="(UserInputService,any)=>(boolean)",
    IsNavigationGamepad="(UserInputService,any)=>(boolean)",
    JumpRequest="Event",
    KeyboardEnabled="boolean",
    LastInput,Changed="Event",
    LegacyInputEventsEnabled="boolean",
    ModalEnabled="boolean",
    MouseBehavior="any",
    MouseDeltaSensitivity="number",
    MouseEnabled="boolean",
    MouseIconEnabled="boolean",
    Name="string",
    NavBarSize="Vector2",
    OnScreenKeyboardAnimationDuration="number",
    OnScreenKeyboardPosition="Vector2",
    OnScreenKeyboardSize="Vector2",
    OnScreenKeyboardVisible="boolean",
    OverrideMouseIconBehavior="any",
    Parent="any",
    PointerAction="Event",
    RecenterUserHeadCFrame="(UserInputService)=>()",
    Remove="(UserInputService)=>()",
    RightBarSize="Vector2",
    RobloxLocked="boolean",
    SendAppUISizes="(UserInputService,Vector2,Vector2,Vector2,Vector2)=>()",
    SetAttribute="(UserInputService,string,any)=>()",
    SetNavigationGamepad="(UserInputService,any,boolean)=>()",
    StatusBarSize="Vector2",
    StatusBarTapped="Event",
    Tags="any",
    TextBoxFocusReleased="Event",
    TextBoxFocused="Event",
    TouchEnabled="boolean",
    TouchEnded="Event",
    TouchLongPress="Event",
    TouchMoved="Event",
    TouchPan="Event",
    TouchPinch="Event",
    TouchRotate="Event",
    TouchStarted="Event",
    TouchSwipe="Event",
    TouchTap="Event",
    TouchTapInWorld="Event",
    UserCFrameChanged="Event",
    UserHeadCFrame="CFrame",
    VREnabled="boolean",
    WaitForChild="(UserInputService,string,number)=>(any)",
    WindowFocusReleased="Event",
    WindowFocused="Event",
    archivable="boolean",
    childAdded="Event",
    children="(UserInputService)=>(any)",
    className="string",
    clone="(UserInputService)=>(any)",
    destroy="(UserInputService)=>()",
    findFirstChild="(UserInputService,string,boolean)=>(any)",
    getChildren="(UserInputService)=>(any)",
    isA="(UserInputService,string)=>(boolean)",
    isDescendantOf="(UserInputService,any)=>(boolean)",
    remove="(UserInputService)=>()"}


, PartOperation={
    AncestryChanged="Event",
    Anchored="boolean",
    Archivable="boolean",
    AssetId="any",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BackParamA="number",
    BackParamB="number",
    BackSurface="any",
    BackSurfaceInput="any",
    BottomParamA="number",
    BottomParamB="number",
    BottomSurface="any",
    BottomSurfaceInput="any",
    BreakJoints="(PartOperation)=>()",
    BrickColor="any",
    CFrame="CFrame",
    CanCollide="boolean",
    CanCollideWith="(PartOperation,any)=>(boolean)",
    CanSetNetworkOwnership="(PartOperation)=>(any)",
    CastShadow="boolean",
    CenterOfMass="Vector3",
    Changed="Event",
    ChildAdded="Event",
    ChildData="any",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PartOperation)=>()",
    Clone="(PartOperation)=>(any)",
    CollisionFidelity="any",
    CollisionGroupId="number",
    Color="Color3",
    Color3uint8="any",
    CustomPhysicalProperties="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PartOperation)=>()",
    DraggingV1="boolean",
    Elasticity="number",
    FindFirstAncestor="(PartOperation,string)=>(any)",
    FindFirstAncestorOfClass="(PartOperation,string)=>(any)",
    FindFirstAncestorWhichIsA="(PartOperation,string)=>(any)",
    FindFirstChild="(PartOperation,string,boolean)=>(any)",
    FindFirstChildOfClass="(PartOperation,string)=>(any)",
    FindFirstChildWhichIsA="(PartOperation,string,boolean)=>(any)",
    FormFactor="any",
    Friction="number",
    FrontParamA="number",
    FrontParamB="number",
    FrontSurface="any",
    FrontSurfaceInput="any",
    GetAttribute="(PartOperation,string)=>(any)",
    GetAttributeChangedSignal="(PartOperation,string)=>(any)",
    GetAttributes="(PartOperation)=>(any)",
    GetChildren="(PartOperation)=>(any)",
    GetConnectedParts="(PartOperation,boolean)=>(any)",
    GetDebugId="(PartOperation,number)=>(string)",
    GetDescendants="(PartOperation)=>(any)",
    GetFullName="(PartOperation)=>(string)",
    GetJoints="(PartOperation)=>(any)",
    GetMass="(PartOperation)=>(number)",
    GetNetworkOwner="(PartOperation)=>(any)",
    GetNetworkOwnershipAuto="(PartOperation)=>(boolean)",
    GetPropertyChangedSignal="(PartOperation,string)=>(any)",
    GetRenderCFrame="(PartOperation)=>(CFrame)",
    GetRootPart="(PartOperation)=>(any)",
    GetTouchingParts="(PartOperation)=>(any)",
    InitialSize="Vector3",
    IsA="(PartOperation,string)=>(boolean)",
    IsAncestorOf="(PartOperation,any)=>(boolean)",
    IsDescendantOf="(PartOperation,any)=>(boolean)",
    IsGrounded="(PartOperation)=>(boolean)",
    LODData="any",
    LeftParamA="number",
    LeftParamB="number",
    LeftSurface="any",
    LeftSurfaceInput="any",
    LocalSimulationTouched="Event",
    LocalTransparencyModifier="number",
    Locked="boolean",
    MakeJoints="(PartOperation)=>()",
    Massless="boolean",
    Material="any",
    MeshData="any",
    Name="string",
    NetworkIsSleeping="boolean",
    NetworkOwnerChanged="Event",
    NetworkOwnerV3="any",
    NetworkOwnershipRule="any",
    Orientation="Vector3",
    OutfitChanged="Event",
    Parent="any",
    PhysicalConfigData="any",
    PhysicsData="any",
    Position="Vector3",
    ReceiveAge="number",
    Reflectance="number",
    Remove="(PartOperation)=>()",
    RenderFidelity="any",
    Resize="(PartOperation,any,number)=>(boolean)",
    ResizeIncrement="number",
    ResizeableFaces="any",
    RightParamA="number",
    RightParamB="number",
    RightSurface="any",
    RightSurfaceInput="any",
    RobloxLocked="boolean",
    RootPriority="number",
    RotVelocity="Vector3",
    Rotation="Vector3",
    SetAttribute="(PartOperation,string,any)=>()",
    SetNetworkOwner="(PartOperation,any)=>()",
    SetNetworkOwnershipAuto="(PartOperation)=>()",
    Size="Vector3",
    SpecificGravity="number",
    StoppedTouching="Event",
    SubtractAsync="(PartOperation,any,any,any)=>(any)",
    Tags="any",
    TopParamA="number",
    TopParamB="number",
    TopSurface="any",
    TopSurfaceInput="any",
    TouchEnded="Event",
    Touched="Event",
    Transparency="number",
    TriangleCount="number",
    UnionAsync="(PartOperation,any,any,any)=>(any)",
    UsePartColor="boolean",
    Velocity="Vector3",
    WaitForChild="(PartOperation,string,number)=>(any)",
    archivable="boolean",
    breakJoints="(PartOperation)=>()",
    brickColor="any",
    childAdded="Event",
    children="(PartOperation)=>(any)",
    className="string",
    clone="(PartOperation)=>(any)",
    destroy="(PartOperation)=>()",
    findFirstChild="(PartOperation,string,boolean)=>(any)",
    getChildren="(PartOperation)=>(any)",
    getMass="(PartOperation)=>(number)",
    isA="(PartOperation,string)=>(boolean)",
    isDescendantOf="(PartOperation,any)=>(boolean)",
    makeJoints="(PartOperation)=>()",
    remove="(PartOperation)=>()",
    resize="(PartOperation,any,number)=>(boolean)",
    siz="Vector3",
    size="Vector3",
    touched="Event"}


, PartOperationAsset={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildData="any",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PartOperationAsset)=>()",
    Clone="(PartOperationAsset)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PartOperationAsset)=>()",
    FindFirstAncestor="(PartOperationAsset,string)=>(any)",
    FindFirstAncestorOfClass="(PartOperationAsset,string)=>(any)",
    FindFirstAncestorWhichIsA="(PartOperationAsset,string)=>(any)",
    FindFirstChild="(PartOperationAsset,string,boolean)=>(any)",
    FindFirstChildOfClass="(PartOperationAsset,string)=>(any)",
    FindFirstChildWhichIsA="(PartOperationAsset,string,boolean)=>(any)",
    GetAttribute="(PartOperationAsset,string)=>(any)",
    GetAttributeChangedSignal="(PartOperationAsset,string)=>(any)",
    GetAttributes="(PartOperationAsset)=>(any)",
    GetChildren="(PartOperationAsset)=>(any)",
    GetDebugId="(PartOperationAsset,number)=>(string)",
    GetDescendants="(PartOperationAsset)=>(any)",
    GetFullName="(PartOperationAsset)=>(string)",
    GetPropertyChangedSignal="(PartOperationAsset,string)=>(any)",
    IsA="(PartOperationAsset,string)=>(boolean)",
    IsAncestorOf="(PartOperationAsset,any)=>(boolean)",
    IsDescendantOf="(PartOperationAsset,any)=>(boolean)",
    MeshData="any",
    Name="string",
    Parent="any",
    Remove="(PartOperationAsset)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PartOperationAsset,string,any)=>()",
    Tags="any",
    WaitForChild="(PartOperationAsset,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PartOperationAsset)=>(any)",
    className="string",
    clone="(PartOperationAsset)=>(any)",
    destroy="(PartOperationAsset)=>()",
    findFirstChild="(PartOperationAsset,string,boolean)=>(any)",
    getChildren="(PartOperationAsset)=>(any)",
    isA="(PartOperationAsset,string)=>(boolean)",
    isDescendantOf="(PartOperationAsset,any)=>(boolean)",
    remove="(PartOperationAsset)=>()"}


, Path={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Blocked="Event",
    Changed="Event",
    CheckOcclusionAsync="(Path,number)=>(number)",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Path)=>()",
    Clone="(Path)=>(any)",
    ComputeAsync="(Path,Vector3,Vector3)=>()",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Path)=>()",
    FindFirstAncestor="(Path,string)=>(any)",
    FindFirstAncestorOfClass="(Path,string)=>(any)",
    FindFirstAncestorWhichIsA="(Path,string)=>(any)",
    FindFirstChild="(Path,string,boolean)=>(any)",
    FindFirstChildOfClass="(Path,string)=>(any)",
    FindFirstChildWhichIsA="(Path,string,boolean)=>(any)",
    GetAttribute="(Path,string)=>(any)",
    GetAttributeChangedSignal="(Path,string)=>(any)",
    GetAttributes="(Path)=>(any)",
    GetChildren="(Path)=>(any)",
    GetDebugId="(Path,number)=>(string)",
    GetDescendants="(Path)=>(any)",
    GetFullName="(Path)=>(string)",
    GetPointCoordinates="(Path)=>(any)",
    GetPropertyChangedSignal="(Path,string)=>(any)",
    GetWaypoints="(Path)=>(any)",
    IsA="(Path,string)=>(boolean)",
    IsAncestorOf="(Path,any)=>(boolean)",
    IsDescendantOf="(Path,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Path)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Path,string,any)=>()",
    Status="any",
    Tags="any",
    WaitForChild="(Path,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Path)=>(any)",
    className="string",
    clone="(Path)=>(any)",
    destroy="(Path)=>()",
    findFirstChild="(Path,string,boolean)=>(any)",
    getChildren="(Path)=>(any)",
    isA="(Path,string)=>(boolean)",
    isDescendantOf="(Path,any)=>(boolean)",
    remove="(Path)=>()"}


, PitchShiftSoundEffect={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PitchShiftSoundEffect)=>()",
    Clone="(PitchShiftSoundEffect)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PitchShiftSoundEffect)=>()",
    Enabled="boolean",
    FindFirstAncestor="(PitchShiftSoundEffect,string)=>(any)",
    FindFirstAncestorOfClass="(PitchShiftSoundEffect,string)=>(any)",
    FindFirstAncestorWhichIsA="(PitchShiftSoundEffect,string)=>(any)",
    FindFirstChild="(PitchShiftSoundEffect,string,boolean)=>(any)",
    FindFirstChildOfClass="(PitchShiftSoundEffect,string)=>(any)",
    FindFirstChildWhichIsA="(PitchShiftSoundEffect,string,boolean)=>(any)",
    GetAttribute="(PitchShiftSoundEffect,string)=>(any)",
    GetAttributeChangedSignal="(PitchShiftSoundEffect,string)=>(any)",
    GetAttributes="(PitchShiftSoundEffect)=>(any)",
    GetChildren="(PitchShiftSoundEffect)=>(any)",
    GetDebugId="(PitchShiftSoundEffect,number)=>(string)",
    GetDescendants="(PitchShiftSoundEffect)=>(any)",
    GetFullName="(PitchShiftSoundEffect)=>(string)",
    GetPropertyChangedSignal="(PitchShiftSoundEffect,string)=>(any)",
    IsA="(PitchShiftSoundEffect,string)=>(boolean)",
    IsAncestorOf="(PitchShiftSoundEffect,any)=>(boolean)",
    IsDescendantOf="(PitchShiftSoundEffect,any)=>(boolean)",
    Name="string",
    Octave="number",
    Parent="any",
    Priority="number",
    Remove="(PitchShiftSoundEffect)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PitchShiftSoundEffect,string,any)=>()",
    Tags="any",
    WaitForChild="(PitchShiftSoundEffect,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PitchShiftSoundEffect)=>(any)",
    className="string",
    clone="(PitchShiftSoundEffect)=>(any)",
    destroy="(PitchShiftSoundEffect)=>()",
    findFirstChild="(PitchShiftSoundEffect,string,boolean)=>(any)",
    getChildren="(PitchShiftSoundEffect)=>(any)",
    isA="(PitchShiftSoundEffect,string)=>(boolean)",
    isDescendantOf="(PitchShiftSoundEffect,any)=>(boolean)",
    remove="(PitchShiftSoundEffect)=>()"}


, Platform={
    AncestryChanged="Event",
    Anchored="boolean",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BackParamA="number",
    BackParamB="number",
    BackSurface="any",
    BackSurfaceInput="any",
    BottomParamA="number",
    BottomParamB="number",
    BottomSurface="any",
    BottomSurfaceInput="any",
    BreakJoints="(Platform)=>()",
    BrickColor="any",
    CFrame="CFrame",
    CanCollide="boolean",
    CanCollideWith="(Platform,any)=>(boolean)",
    CanSetNetworkOwnership="(Platform)=>(any)",
    CastShadow="boolean",
    CenterOfMass="Vector3",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Platform)=>()",
    Clone="(Platform)=>(any)",
    CollisionGroupId="number",
    Color="Color3",
    Color3uint8="any",
    CustomPhysicalProperties="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Platform)=>()",
    DraggingV1="boolean",
    Elasticity="number",
    FindFirstAncestor="(Platform,string)=>(any)",
    FindFirstAncestorOfClass="(Platform,string)=>(any)",
    FindFirstAncestorWhichIsA="(Platform,string)=>(any)",
    FindFirstChild="(Platform,string,boolean)=>(any)",
    FindFirstChildOfClass="(Platform,string)=>(any)",
    FindFirstChildWhichIsA="(Platform,string,boolean)=>(any)",
    FormFactor="any",
    Friction="number",
    FrontParamA="number",
    FrontParamB="number",
    FrontSurface="any",
    FrontSurfaceInput="any",
    GetAttribute="(Platform,string)=>(any)",
    GetAttributeChangedSignal="(Platform,string)=>(any)",
    GetAttributes="(Platform)=>(any)",
    GetChildren="(Platform)=>(any)",
    GetConnectedParts="(Platform,boolean)=>(any)",
    GetDebugId="(Platform,number)=>(string)",
    GetDescendants="(Platform)=>(any)",
    GetFullName="(Platform)=>(string)",
    GetJoints="(Platform)=>(any)",
    GetMass="(Platform)=>(number)",
    GetNetworkOwner="(Platform)=>(any)",
    GetNetworkOwnershipAuto="(Platform)=>(boolean)",
    GetPropertyChangedSignal="(Platform,string)=>(any)",
    GetRenderCFrame="(Platform)=>(CFrame)",
    GetRootPart="(Platform)=>(any)",
    GetTouchingParts="(Platform)=>(any)",
    IsA="(Platform,string)=>(boolean)",
    IsAncestorOf="(Platform,any)=>(boolean)",
    IsDescendantOf="(Platform,any)=>(boolean)",
    IsGrounded="(Platform)=>(boolean)",
    LeftParamA="number",
    LeftParamB="number",
    LeftSurface="any",
    LeftSurfaceInput="any",
    LocalSimulationTouched="Event",
    LocalTransparencyModifier="number",
    Locked="boolean",
    MakeJoints="(Platform)=>()",
    Massless="boolean",
    Material="any",
    Name="string",
    NetworkIsSleeping="boolean",
    NetworkOwnerChanged="Event",
    NetworkOwnerV3="any",
    NetworkOwnershipRule="any",
    Orientation="Vector3",
    OutfitChanged="Event",
    Parent="any",
    Position="Vector3",
    ReceiveAge="number",
    Reflectance="number",
    RemoteCreateMotor6D="Event",
    RemoteDestroyMotor6D="Event",
    Remove="(Platform)=>()",
    Resize="(Platform,any,number)=>(boolean)",
    ResizeIncrement="number",
    ResizeableFaces="any",
    RightParamA="number",
    RightParamB="number",
    RightSurface="any",
    RightSurfaceInput="any",
    RobloxLocked="boolean",
    RootPriority="number",
    RotVelocity="Vector3",
    Rotation="Vector3",
    SetAttribute="(Platform,string,any)=>()",
    SetNetworkOwner="(Platform,any)=>()",
    SetNetworkOwnershipAuto="(Platform)=>()",
    Shape="any",
    Size="Vector3",
    SpecificGravity="number",
    StoppedTouching="Event",
    SubtractAsync="(Platform,any,any,any)=>(any)",
    Tags="any",
    TopParamA="number",
    TopParamB="number",
    TopSurface="any",
    TopSurfaceInput="any",
    TouchEnded="Event",
    Touched="Event",
    Transparency="number",
    UnionAsync="(Platform,any,any,any)=>(any)",
    Velocity="Vector3",
    WaitForChild="(Platform,string,number)=>(any)",
    archivable="boolean",
    breakJoints="(Platform)=>()",
    brickColor="any",
    childAdded="Event",
    children="(Platform)=>(any)",
    className="string",
    clone="(Platform)=>(any)",
    destroy="(Platform)=>()",
    findFirstChild="(Platform,string,boolean)=>(any)",
    formFactor="any",
    formFactorRaw="any",
    getChildren="(Platform)=>(any)",
    getMass="(Platform)=>(number)",
    isA="(Platform,string)=>(boolean)",
    isDescendantOf="(Platform,any)=>(boolean)",
    makeJoints="(Platform)=>()",
    remove="(Platform)=>()",
    resize="(Platform,any,number)=>(boolean)",
    shap="any",
    shape="any",
    siz="Vector3",
    size="Vector3",
    touched="Event"}


, UIListLayout={
    AbsoluteContentSize="Vector2",
    AncestryChanged="Event",
    ApplyLayout="(UIListLayout)=>()",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(UIListLayout)=>()",
    Clone="(UIListLayout)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(UIListLayout)=>()",
    FillDirection="any",
    FindFirstAncestor="(UIListLayout,string)=>(any)",
    FindFirstAncestorOfClass="(UIListLayout,string)=>(any)",
    FindFirstAncestorWhichIsA="(UIListLayout,string)=>(any)",
    FindFirstChild="(UIListLayout,string,boolean)=>(any)",
    FindFirstChildOfClass="(UIListLayout,string)=>(any)",
    FindFirstChildWhichIsA="(UIListLayout,string,boolean)=>(any)",
    GetAttribute="(UIListLayout,string)=>(any)",
    GetAttributeChangedSignal="(UIListLayout,string)=>(any)",
    GetAttributes="(UIListLayout)=>(any)",
    GetChildren="(UIListLayout)=>(any)",
    GetDebugId="(UIListLayout,number)=>(string)",
    GetDescendants="(UIListLayout)=>(any)",
    GetFullName="(UIListLayout)=>(string)",
    GetPropertyChangedSignal="(UIListLayout,string)=>(any)",
    HorizontalAlignment="any",
    IsA="(UIListLayout,string)=>(boolean)",
    IsAncestorOf="(UIListLayout,any)=>(boolean)",
    IsDescendantOf="(UIListLayout,any)=>(boolean)",
    Name="string",
    Padding="UDim",
    Parent="any",
    Remove="(UIListLayout)=>()",
    RobloxLocked="boolean",
    SetAttribute="(UIListLayout,string,any)=>()",
    SetCustomSortFunction="(UIListLayout,any)=>()",
    SortOrder="any",
    Tags="any",
    VerticalAlignment="any",
    WaitForChild="(UIListLayout,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(UIListLayout)=>(any)",
    className="string",
    clone="(UIListLayout)=>(any)",
    destroy="(UIListLayout)=>()",
    findFirstChild="(UIListLayout,string,boolean)=>(any)",
    getChildren="(UIListLayout)=>(any)",
    isA="(UIListLayout,string)=>(boolean)",
    isDescendantOf="(UIListLayout,any)=>(boolean)",
    remove="(UIListLayout)=>()"}


, Players={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BubbleChat="boolean",
    Changed="Event",
    CharacterAutoLoads="boolean",
    Chat="(Players,string)=>()",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClassicChat="boolean",
    ClearAllChildren="(Players)=>()",
    Clone="(Players)=>(any)",
    CloudEditApplyEditsMessage="Event",
    CloudEditServerMessage="Event",
    CreateHumanoidModelFromDescription="(Players,any,any)=>(any)",
    CreateHumanoidModelFromUserId="(Players,number)=>(any)",
    CreateLocalPlayer="(Players)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Players)=>()",
    FindFirstAncestor="(Players,string)=>(any)",
    FindFirstAncestorOfClass="(Players,string)=>(any)",
    FindFirstAncestorWhichIsA="(Players,string)=>(any)",
    FindFirstChild="(Players,string,boolean)=>(any)",
    FindFirstChildOfClass="(Players,string)=>(any)",
    FindFirstChildWhichIsA="(Players,string,boolean)=>(any)",
    FriendRequestEvent="Event",
    GameAnnounce="Event",
    GetAttribute="(Players,string)=>(any)",
    GetAttributeChangedSignal="(Players,string)=>(any)",
    GetAttributes="(Players)=>(any)",
    GetCharacterAppearanceAsync="(Players,number)=>(any)",
    GetCharacterAppearanceInfoAsync="(Players,number)=>(any)",
    GetChildren="(Players)=>(any)",
    GetDebugId="(Players,number)=>(string)",
    GetDescendants="(Players)=>(any)",
    GetFriendsAsync="(Players,number)=>(any)",
    GetFullName="(Players)=>(string)",
    GetHumanoidDescriptionFromOutfitId="(Players,number)=>(any)",
    GetHumanoidDescriptionFromUserId="(Players,number)=>(any)",
    GetNameFromUserIdAsync="(Players,number)=>(string)",
    GetPlayerByUserId="(Players,number)=>(any)",
    GetPlayerFromCharacter="(Players,any)=>(any)",
    GetPlayers="(Players)=>(any)",
    GetPropertyChangedSignal="(Players,string)=>(any)",
    GetUserIdFromNameAsync="(Players,string)=>(number)",
    GetUserThumbnailAsync="(Players,number,any,any)=>(any)",
    IsA="(Players,string)=>(boolean)",
    IsAncestorOf="(Players,any)=>(boolean)",
    IsDescendantOf="(Players,any)=>(boolean)",
    LocalPlayer="any",
    MaxPlayers="number",
    MaxPlayersInternal="number",
    Name="string",
    NumPlayers="number",
    OnLinkedScriptsUpdated="Event",
    Parent="any",
    PlayerAdded="Event",
    PlayerChatted="Event",
    PlayerConnecting="Event",
    PlayerDisconnecting="Event",
    PlayerMembershipChanged="Event",
    PlayerRejoining="Event",
    PlayerRemoving="Event",
    PreferredPlayers="number",
    PreferredPlayersInternal="number",
    Remove="(Players)=>()",
    ReportAbuse="(Players,any,string,string)=>()",
    RequestCloudEditImmediatePublish="Event",
    RequestCloudEditKick="Event",
    RequestCloudEditShutdown="Event",
    RequestTeamCreateImmediateSave="Event",
    RespawnTime="number",
    RobloxLocked="boolean",
    SetAttribute="(Players,string,any)=>()",
    SetChatStyle="(Players,any)=>()",
    SetLocalPlayerInfo="(Players,number,string,any,boolean)=>()",
    Tags="any",
    TeamChat="(Players,string)=>()",
    TeamCreatePublishFinished="Event",
    TeamCreateSaveFinished="Event",
    WaitForChild="(Players,string,number)=>(any)",
    WhisperChat="(Players,string,any)=>()",
    archivable="boolean",
    childAdded="Event",
    children="(Players)=>(any)",
    className="string",
    clone="(Players)=>(any)",
    destroy="(Players)=>()",
    findFirstChild="(Players,string,boolean)=>(any)",
    getChildren="(Players)=>(any)",
    getPlayerFromCharacter="(Players,any)=>(any)",
    getPlayers="(Players)=>(any)",
    isA="(Players,string)=>(boolean)",
    isDescendantOf="(Players,any)=>(boolean)",
    localPlayer="any",
    numPlayers="number",
    playerFromCharacter="(Players,any)=>(any)",
    players="(Players)=>(any)",
    remove="(Players)=>()"}


, Plugin={
    Activate="(Plugin,boolean)=>()",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Plugin)=>()",
    Clone="(Plugin)=>(any)",
    CollisionEnabled="boolean",
    CreateDockWidgetPluginGui="(Plugin,string,any)=>(any)",
    CreatePluginAction="(Plugin,string,string,string,string,boolean)=>(any)",
    CreatePluginMenu="(Plugin,string,string,string)=>(any)",
    CreateQWidgetPluginGui="(Plugin,string,any)=>(any)",
    CreateToolbar="(Plugin,string)=>(any)",
    DataCost="number",
    Deactivate="(Plugin)=>()",
    Deactivation="Event",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Plugin)=>()",
    FindFirstAncestor="(Plugin,string)=>(any)",
    FindFirstAncestorOfClass="(Plugin,string)=>(any)",
    FindFirstAncestorWhichIsA="(Plugin,string)=>(any)",
    FindFirstChild="(Plugin,string,boolean)=>(any)",
    FindFirstChildOfClass="(Plugin,string)=>(any)",
    FindFirstChildWhichIsA="(Plugin,string,boolean)=>(any)",
    GetAttribute="(Plugin,string)=>(any)",
    GetAttributeChangedSignal="(Plugin,string)=>(any)",
    GetAttributes="(Plugin)=>(any)",
    GetChildren="(Plugin)=>(any)",
    GetDebugId="(Plugin,number)=>(string)",
    GetDescendants="(Plugin)=>(any)",
    GetFullName="(Plugin)=>(string)",
    GetItem="(Plugin,string,any)=>(any)",
    GetJoinMode="(Plugin)=>(any)",
    GetMouse="(Plugin)=>(any)",
    GetPropertyChangedSignal="(Plugin,string)=>(any)",
    GetSelectedRibbonTool="(Plugin)=>(any)",
    GetSetting="(Plugin,string)=>(any)",
    GetStudioUserId="(Plugin)=>(number)",
    GridSize="number",
    HostDataModel,="any",
    HostDataModel,IsCurrent="boolean",
    ImportFbxAnimation="(Plugin,any,boolean)=>(any)",
    ImportFbxRig="(Plugin,boolean)=>(any)",
    Invoke="(Plugin,string,any)=>()",
    IsA="(Plugin,string)=>(boolean)",
    IsActivated="(Plugin)=>(boolean)",
    IsActivatedWithExclusiveMouse="(Plugin)=>(boolean)",
    IsAncestorOf="(Plugin,any)=>(boolean)",
    IsDescendantOf="(Plugin,any)=>(boolean)",
    MultipleDocumentInterfaceInstance="any",
    Name="string",
    Negate="(Plugin,any)=>(any)",
    OnInvoke="(Plugin,string,any)=>(any)",
    OnSetItem="(Plugin,string,any)=>(any)",
    OpenScript="(Plugin,any,number)=>()",
    OpenWikiPage="(Plugin,string)=>()",
    Parent="any",
    PauseSound="(Plugin,any)=>()",
    PlaySound="(Plugin,any)=>()",
    PromptForExistingAssetId="(Plugin,string)=>(number)",
    PromptSaveSelection="(Plugin,string)=>(boolean)",
    Remove="(Plugin)=>()",
    ResumeSound="(Plugin,any)=>()",
    RobloxLocked="boolean",
    SaveSelectedToRoblox="(Plugin)=>()",
    SelectRibbonTool="(Plugin,any,UDim2)=>()",
    Separate="(Plugin,any)=>(any)",
    SetAttribute="(Plugin,string,any)=>()",
    SetItem="(Plugin,string,any)=>()",
    SetSetting="(Plugin,string,any)=>()",
    StartDecalDrag="(Plugin,any)=>()",
    StartDrag="(Plugin,any)=>()",
    StopAllSounds="(Plugin)=>()",
    Tags="any",
    Union="(Plugin,any)=>(any)",
    Unloading="Event",
    UsesAssetInsertionDrag="boolean",
    WaitForChild="(Plugin,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Plugin)=>(any)",
    className="string",
    clone="(Plugin)=>(any)",
    destroy="(Plugin)=>()",
    findFirstChild="(Plugin,string,boolean)=>(any)",
    getChildren="(Plugin)=>(any)",
    isA="(Plugin,string)=>(boolean)",
    isDescendantOf="(Plugin,any)=>(boolean)",
    remove="(Plugin)=>()"}


, PluginAction={
    ActionId="string",
    AllowBinding="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    Checked="boolean",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PluginAction)=>()",
    Clone="(PluginAction)=>(any)",
    DataCost="number",
    DefaultShortcut="string",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PluginAction)=>()",
    Enabled="boolean",
    FindFirstAncestor="(PluginAction,string)=>(any)",
    FindFirstAncestorOfClass="(PluginAction,string)=>(any)",
    FindFirstAncestorWhichIsA="(PluginAction,string)=>(any)",
    FindFirstChild="(PluginAction,string,boolean)=>(any)",
    FindFirstChildOfClass="(PluginAction,string)=>(any)",
    FindFirstChildWhichIsA="(PluginAction,string,boolean)=>(any)",
    GetAttribute="(PluginAction,string)=>(any)",
    GetAttributeChangedSignal="(PluginAction,string)=>(any)",
    GetAttributes="(PluginAction)=>(any)",
    GetChildren="(PluginAction)=>(any)",
    GetDebugId="(PluginAction,number)=>(string)",
    GetDescendants="(PluginAction)=>(any)",
    GetFullName="(PluginAction)=>(string)",
    GetPropertyChangedSignal="(PluginAction,string)=>(any)",
    IsA="(PluginAction,string)=>(boolean)",
    IsAncestorOf="(PluginAction,any)=>(boolean)",
    IsDescendantOf="(PluginAction,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(PluginAction)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PluginAction,string,any)=>()",
    StatusTip="string",
    Tags="any",
    Text="string",
    Triggered="Event",
    WaitForChild="(PluginAction,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PluginAction)=>(any)",
    className="string",
    clone="(PluginAction)=>(any)",
    destroy="(PluginAction)=>()",
    findFirstChild="(PluginAction,string,boolean)=>(any)",
    getChildren="(PluginAction)=>(any)",
    isA="(PluginAction,string)=>(boolean)",
    isDescendantOf="(PluginAction,any)=>(boolean)",
    remove="(PluginAction)=>()"}


, PluginGuiService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PluginGuiService)=>()",
    Clone="(PluginGuiService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PluginGuiService)=>()",
    FindFirstAncestor="(PluginGuiService,string)=>(any)",
    FindFirstAncestorOfClass="(PluginGuiService,string)=>(any)",
    FindFirstAncestorWhichIsA="(PluginGuiService,string)=>(any)",
    FindFirstChild="(PluginGuiService,string,boolean)=>(any)",
    FindFirstChildOfClass="(PluginGuiService,string)=>(any)",
    FindFirstChildWhichIsA="(PluginGuiService,string,boolean)=>(any)",
    GetAttribute="(PluginGuiService,string)=>(any)",
    GetAttributeChangedSignal="(PluginGuiService,string)=>(any)",
    GetAttributes="(PluginGuiService)=>(any)",
    GetChildren="(PluginGuiService)=>(any)",
    GetDebugId="(PluginGuiService,number)=>(string)",
    GetDescendants="(PluginGuiService)=>(any)",
    GetFullName="(PluginGuiService)=>(string)",
    GetPropertyChangedSignal="(PluginGuiService,string)=>(any)",
    IsA="(PluginGuiService,string)=>(boolean)",
    IsAncestorOf="(PluginGuiService,any)=>(boolean)",
    IsDescendantOf="(PluginGuiService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(PluginGuiService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PluginGuiService,string,any)=>()",
    Tags="any",
    WaitForChild="(PluginGuiService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PluginGuiService)=>(any)",
    className="string",
    clone="(PluginGuiService)=>(any)",
    destroy="(PluginGuiService)=>()",
    findFirstChild="(PluginGuiService,string,boolean)=>(any)",
    getChildren="(PluginGuiService)=>(any)",
    isA="(PluginGuiService,string)=>(boolean)",
    isDescendantOf="(PluginGuiService,any)=>(boolean)",
    remove="(PluginGuiService)=>()"}


, UIAspectRatioConstraint={
    AncestryChanged="Event",
    Archivable="boolean",
    AspectRatio="number",
    Aspect,="any",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(UIAspectRatioConstraint)=>()",
    Clone="(UIAspectRatioConstraint)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(UIAspectRatioConstraint)=>()",
    DominantAxis="any",
    FindFirstAncestor="(UIAspectRatioConstraint,string)=>(any)",
    FindFirstAncestorOfClass="(UIAspectRatioConstraint,string)=>(any)",
    FindFirstAncestorWhichIsA="(UIAspectRatioConstraint,string)=>(any)",
    FindFirstChild="(UIAspectRatioConstraint,string,boolean)=>(any)",
    FindFirstChildOfClass="(UIAspectRatioConstraint,string)=>(any)",
    FindFirstChildWhichIsA="(UIAspectRatioConstraint,string,boolean)=>(any)",
    GetAttribute="(UIAspectRatioConstraint,string)=>(any)",
    GetAttributeChangedSignal="(UIAspectRatioConstraint,string)=>(any)",
    GetAttributes="(UIAspectRatioConstraint)=>(any)",
    GetChildren="(UIAspectRatioConstraint)=>(any)",
    GetDebugId="(UIAspectRatioConstraint,number)=>(string)",
    GetDescendants="(UIAspectRatioConstraint)=>(any)",
    GetFullName="(UIAspectRatioConstraint)=>(string)",
    GetPropertyChangedSignal="(UIAspectRatioConstraint,string)=>(any)",
    IsA="(UIAspectRatioConstraint,string)=>(boolean)",
    IsAncestorOf="(UIAspectRatioConstraint,any)=>(boolean)",
    IsDescendantOf="(UIAspectRatioConstraint,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(UIAspectRatioConstraint)=>()",
    RobloxLocked="boolean",
    SetAttribute="(UIAspectRatioConstraint,string,any)=>()",
    Tags="any",
    WaitForChild="(UIAspectRatioConstraint,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(UIAspectRatioConstraint)=>(any)",
    className="string",
    clone="(UIAspectRatioConstraint)=>(any)",
    destroy="(UIAspectRatioConstraint)=>()",
    findFirstChild="(UIAspectRatioConstraint,string,boolean)=>(any)",
    getChildren="(UIAspectRatioConstraint)=>(any)",
    isA="(UIAspectRatioConstraint,string)=>(boolean)",
    isDescendantOf="(UIAspectRatioConstraint,any)=>(boolean)",
    remove="(UIAspectRatioConstraint)=>()"}


, PluginManager={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PluginManager)=>()",
    Clone="(PluginManager)=>(any)",
    CreatePlugin="(PluginManager)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PluginManager)=>()",
    ExportPlace="(PluginManager,string)=>()",
    ExportSelection="(PluginManager,string)=>()",
    FindFirstAncestor="(PluginManager,string)=>(any)",
    FindFirstAncestorOfClass="(PluginManager,string)=>(any)",
    FindFirstAncestorWhichIsA="(PluginManager,string)=>(any)",
    FindFirstChild="(PluginManager,string,boolean)=>(any)",
    FindFirstChildOfClass="(PluginManager,string)=>(any)",
    FindFirstChildWhichIsA="(PluginManager,string,boolean)=>(any)",
    GetAttribute="(PluginManager,string)=>(any)",
    GetAttributeChangedSignal="(PluginManager,string)=>(any)",
    GetAttributes="(PluginManager)=>(any)",
    GetChildren="(PluginManager)=>(any)",
    GetDebugId="(PluginManager,number)=>(string)",
    GetDescendants="(PluginManager)=>(any)",
    GetFullName="(PluginManager)=>(string)",
    GetPropertyChangedSignal="(PluginManager,string)=>(any)",
    IsA="(PluginManager,string)=>(boolean)",
    IsAncestorOf="(PluginManager,any)=>(boolean)",
    IsDescendantOf="(PluginManager,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(PluginManager)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PluginManager,string,any)=>()",
    Tags="any",
    WaitForChild="(PluginManager,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PluginManager)=>(any)",
    className="string",
    clone="(PluginManager)=>(any)",
    destroy="(PluginManager)=>()",
    findFirstChild="(PluginManager,string,boolean)=>(any)",
    getChildren="(PluginManager)=>(any)",
    isA="(PluginManager,string)=>(boolean)",
    isDescendantOf="(PluginManager,any)=>(boolean)",
    remove="(PluginManager)=>()"}


, PluginMouse={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Button1Down="Event",
    Button1Up="Event",
    Button2Down="Event",
    Button2Up="Event",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PluginMouse)=>()",
    Clone="(PluginMouse)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PluginMouse)=>()",
    DragEnter="Event",
    FindFirstAncestor="(PluginMouse,string)=>(any)",
    FindFirstAncestorOfClass="(PluginMouse,string)=>(any)",
    FindFirstAncestorWhichIsA="(PluginMouse,string)=>(any)",
    FindFirstChild="(PluginMouse,string,boolean)=>(any)",
    FindFirstChildOfClass="(PluginMouse,string)=>(any)",
    FindFirstChildWhichIsA="(PluginMouse,string,boolean)=>(any)",
    GetAttribute="(PluginMouse,string)=>(any)",
    GetAttributeChangedSignal="(PluginMouse,string)=>(any)",
    GetAttributes="(PluginMouse)=>(any)",
    GetChildren="(PluginMouse)=>(any)",
    GetDebugId="(PluginMouse,number)=>(string)",
    GetDescendants="(PluginMouse)=>(any)",
    GetFullName="(PluginMouse)=>(string)",
    GetPropertyChangedSignal="(PluginMouse,string)=>(any)",
    Hit="CFrame",
    Icon="any",
    Idle="Event",
    IsA="(PluginMouse,string)=>(boolean)",
    IsAncestorOf="(PluginMouse,any)=>(boolean)",
    IsDescendantOf="(PluginMouse,any)=>(boolean)",
    KeyDown="Event",
    KeyUp="Event",
    Move="Event",
    Name="string",
    Origin="CFrame",
    Parent="any",
    Remove="(PluginMouse)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PluginMouse,string,any)=>()",
    Tags="any",
    Target="any",
    TargetFilter="any",
    TargetSurface="any",
    UnitRay="Ray",
    ViewSizeX="number",
    ViewSizeY="number",
    WaitForChild="(PluginMouse,string,number)=>(any)",
    WheelBackward="Event",
    WheelForward="Event",
    X="number",
    Y="number",
    archivable="boolean",
    childAdded="Event",
    children="(PluginMouse)=>(any)",
    className="string",
    clone="(PluginMouse)=>(any)",
    destroy="(PluginMouse)=>()",
    findFirstChild="(PluginMouse,string,boolean)=>(any)",
    getChildren="(PluginMouse)=>(any)",
    hit="CFrame",
    isA="(PluginMouse,string)=>(boolean)",
    isDescendantOf="(PluginMouse,any)=>(boolean)",
    keyDown="Event",
    remove="(PluginMouse)=>()",
    target="any"}


, PluginToolbar={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PluginToolbar)=>()",
    Clone="(PluginToolbar)=>(any)",
    CreateButton="(PluginToolbar,string,string,string,string)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PluginToolbar)=>()",
    FindFirstAncestor="(PluginToolbar,string)=>(any)",
    FindFirstAncestorOfClass="(PluginToolbar,string)=>(any)",
    FindFirstAncestorWhichIsA="(PluginToolbar,string)=>(any)",
    FindFirstChild="(PluginToolbar,string,boolean)=>(any)",
    FindFirstChildOfClass="(PluginToolbar,string)=>(any)",
    FindFirstChildWhichIsA="(PluginToolbar,string,boolean)=>(any)",
    GetAttribute="(PluginToolbar,string)=>(any)",
    GetAttributeChangedSignal="(PluginToolbar,string)=>(any)",
    GetAttributes="(PluginToolbar)=>(any)",
    GetChildren="(PluginToolbar)=>(any)",
    GetDebugId="(PluginToolbar,number)=>(string)",
    GetDescendants="(PluginToolbar)=>(any)",
    GetFullName="(PluginToolbar)=>(string)",
    GetPropertyChangedSignal="(PluginToolbar,string)=>(any)",
    IsA="(PluginToolbar,string)=>(boolean)",
    IsAncestorOf="(PluginToolbar,any)=>(boolean)",
    IsDescendantOf="(PluginToolbar,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(PluginToolbar)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PluginToolbar,string,any)=>()",
    Tags="any",
    WaitForChild="(PluginToolbar,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PluginToolbar)=>(any)",
    className="string",
    clone="(PluginToolbar)=>(any)",
    destroy="(PluginToolbar)=>()",
    findFirstChild="(PluginToolbar,string,boolean)=>(any)",
    getChildren="(PluginToolbar)=>(any)",
    isA="(PluginToolbar,string)=>(boolean)",
    isDescendantOf="(PluginToolbar,any)=>(boolean)",
    remove="(PluginToolbar)=>()"}


, PluginToolbarButton={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PluginToolbarButton)=>()",
    Click="Event",
    ClickableWhenViewportHidden="boolean",
    Clone="(PluginToolbarButton)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PluginToolbarButton)=>()",
    Enabled="boolean",
    FindFirstAncestor="(PluginToolbarButton,string)=>(any)",
    FindFirstAncestorOfClass="(PluginToolbarButton,string)=>(any)",
    FindFirstAncestorWhichIsA="(PluginToolbarButton,string)=>(any)",
    FindFirstChild="(PluginToolbarButton,string,boolean)=>(any)",
    FindFirstChildOfClass="(PluginToolbarButton,string)=>(any)",
    FindFirstChildWhichIsA="(PluginToolbarButton,string,boolean)=>(any)",
    GetAttribute="(PluginToolbarButton,string)=>(any)",
    GetAttributeChangedSignal="(PluginToolbarButton,string)=>(any)",
    GetAttributes="(PluginToolbarButton)=>(any)",
    GetChildren="(PluginToolbarButton)=>(any)",
    GetDebugId="(PluginToolbarButton,number)=>(string)",
    GetDescendants="(PluginToolbarButton)=>(any)",
    GetFullName="(PluginToolbarButton)=>(string)",
    GetPropertyChangedSignal="(PluginToolbarButton,string)=>(any)",
    Icon="any",
    IsA="(PluginToolbarButton,string)=>(boolean)",
    IsAncestorOf="(PluginToolbarButton,any)=>(boolean)",
    IsDescendantOf="(PluginToolbarButton,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(PluginToolbarButton)=>()",
    RobloxLocked="boolean",
    SetActive="(PluginToolbarButton,boolean)=>()",
    SetAttribute="(PluginToolbarButton,string,any)=>()",
    Tags="any",
    WaitForChild="(PluginToolbarButton,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PluginToolbarButton)=>(any)",
    className="string",
    clone="(PluginToolbarButton)=>(any)",
    destroy="(PluginToolbarButton)=>()",
    findFirstChild="(PluginToolbarButton,string,boolean)=>(any)",
    getChildren="(PluginToolbarButton)=>(any)",
    isA="(PluginToolbarButton,string)=>(boolean)",
    isDescendantOf="(PluginToolbarButton,any)=>(boolean)",
    remove="(PluginToolbarButton)=>()"}


, PointLight={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Brightness="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PointLight)=>()",
    Clone="(PointLight)=>(any)",
    Color="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PointLight)=>()",
    Enabled="boolean",
    FindFirstAncestor="(PointLight,string)=>(any)",
    FindFirstAncestorOfClass="(PointLight,string)=>(any)",
    FindFirstAncestorWhichIsA="(PointLight,string)=>(any)",
    FindFirstChild="(PointLight,string,boolean)=>(any)",
    FindFirstChildOfClass="(PointLight,string)=>(any)",
    FindFirstChildWhichIsA="(PointLight,string,boolean)=>(any)",
    GetAttribute="(PointLight,string)=>(any)",
    GetAttributeChangedSignal="(PointLight,string)=>(any)",
    GetAttributes="(PointLight)=>(any)",
    GetChildren="(PointLight)=>(any)",
    GetDebugId="(PointLight,number)=>(string)",
    GetDescendants="(PointLight)=>(any)",
    GetFullName="(PointLight)=>(string)",
    GetPropertyChangedSignal="(PointLight,string)=>(any)",
    IsA="(PointLight,string)=>(boolean)",
    IsAncestorOf="(PointLight,any)=>(boolean)",
    IsDescendantOf="(PointLight,any)=>(boolean)",
    Name="string",
    Parent="any",
    Range="number",
    Remove="(PointLight)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PointLight,string,any)=>()",
    Shadows="boolean",
    Tags="any",
    WaitForChild="(PointLight,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PointLight)=>(any)",
    className="string",
    clone="(PointLight)=>(any)",
    destroy="(PointLight)=>()",
    findFirstChild="(PointLight,string,boolean)=>(any)",
    getChildren="(PointLight)=>(any)",
    isA="(PointLight,string)=>(boolean)",
    isDescendantOf="(PointLight,any)=>(boolean)",
    remove="(PointLight)=>()"}


, PolicyService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PolicyService)=>()",
    Clone="(PolicyService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PolicyService)=>()",
    FindFirstAncestor="(PolicyService,string)=>(any)",
    FindFirstAncestorOfClass="(PolicyService,string)=>(any)",
    FindFirstAncestorWhichIsA="(PolicyService,string)=>(any)",
    FindFirstChild="(PolicyService,string,boolean)=>(any)",
    FindFirstChildOfClass="(PolicyService,string)=>(any)",
    FindFirstChildWhichIsA="(PolicyService,string,boolean)=>(any)",
    GetAttribute="(PolicyService,string)=>(any)",
    GetAttributeChangedSignal="(PolicyService,string)=>(any)",
    GetAttributes="(PolicyService)=>(any)",
    GetChildren="(PolicyService)=>(any)",
    GetDebugId="(PolicyService,number)=>(string)",
    GetDescendants="(PolicyService)=>(any)",
    GetFullName="(PolicyService)=>(string)",
    GetPolicyInfoForPlayerAsync="(PolicyService,any)=>(any)",
    GetPropertyChangedSignal="(PolicyService,string)=>(any)",
    IsA="(PolicyService,string)=>(boolean)",
    IsAncestorOf="(PolicyService,any)=>(boolean)",
    IsDescendantOf="(PolicyService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(PolicyService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PolicyService,string,any)=>()",
    Tags="any",
    WaitForChild="(PolicyService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PolicyService)=>(any)",
    className="string",
    clone="(PolicyService)=>(any)",
    destroy="(PolicyService)=>()",
    findFirstChild="(PolicyService,string,boolean)=>(any)",
    getChildren="(PolicyService)=>(any)",
    isA="(PolicyService,string)=>(boolean)",
    isDescendantOf="(PolicyService,any)=>(boolean)",
    remove="(PolicyService)=>()"}


, PostEffect={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(PostEffect)=>()",
    Clone="(PostEffect)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(PostEffect)=>()",
    Enabled="boolean",
    FindFirstAncestor="(PostEffect,string)=>(any)",
    FindFirstAncestorOfClass="(PostEffect,string)=>(any)",
    FindFirstAncestorWhichIsA="(PostEffect,string)=>(any)",
    FindFirstChild="(PostEffect,string,boolean)=>(any)",
    FindFirstChildOfClass="(PostEffect,string)=>(any)",
    FindFirstChildWhichIsA="(PostEffect,string,boolean)=>(any)",
    GetAttribute="(PostEffect,string)=>(any)",
    GetAttributeChangedSignal="(PostEffect,string)=>(any)",
    GetAttributes="(PostEffect)=>(any)",
    GetChildren="(PostEffect)=>(any)",
    GetDebugId="(PostEffect,number)=>(string)",
    GetDescendants="(PostEffect)=>(any)",
    GetFullName="(PostEffect)=>(string)",
    GetPropertyChangedSignal="(PostEffect,string)=>(any)",
    IsA="(PostEffect,string)=>(boolean)",
    IsAncestorOf="(PostEffect,any)=>(boolean)",
    IsDescendantOf="(PostEffect,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(PostEffect)=>()",
    RobloxLocked="boolean",
    SetAttribute="(PostEffect,string,any)=>()",
    Tags="any",
    WaitForChild="(PostEffect,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(PostEffect)=>(any)",
    className="string",
    clone="(PostEffect)=>(any)",
    destroy="(PostEffect)=>()",
    findFirstChild="(PostEffect,string,boolean)=>(any)",
    getChildren="(PostEffect)=>(any)",
    isA="(PostEffect,string)=>(boolean)",
    isDescendantOf="(PostEffect,any)=>(boolean)",
    remove="(PostEffect)=>()"}


, ReplicatedStorage={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ReplicatedStorage)=>()",
    Clone="(ReplicatedStorage)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ReplicatedStorage)=>()",
    FindFirstAncestor="(ReplicatedStorage,string)=>(any)",
    FindFirstAncestorOfClass="(ReplicatedStorage,string)=>(any)",
    FindFirstAncestorWhichIsA="(ReplicatedStorage,string)=>(any)",
    FindFirstChild="(ReplicatedStorage,string,boolean)=>(any)",
    FindFirstChildOfClass="(ReplicatedStorage,string)=>(any)",
    FindFirstChildWhichIsA="(ReplicatedStorage,string,boolean)=>(any)",
    GetAttribute="(ReplicatedStorage,string)=>(any)",
    GetAttributeChangedSignal="(ReplicatedStorage,string)=>(any)",
    GetAttributes="(ReplicatedStorage)=>(any)",
    GetChildren="(ReplicatedStorage)=>(any)",
    GetDebugId="(ReplicatedStorage,number)=>(string)",
    GetDescendants="(ReplicatedStorage)=>(any)",
    GetFullName="(ReplicatedStorage)=>(string)",
    GetPropertyChangedSignal="(ReplicatedStorage,string)=>(any)",
    IsA="(ReplicatedStorage,string)=>(boolean)",
    IsAncestorOf="(ReplicatedStorage,any)=>(boolean)",
    IsDescendantOf="(ReplicatedStorage,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(ReplicatedStorage)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ReplicatedStorage,string,any)=>()",
    Tags="any",
    WaitForChild="(ReplicatedStorage,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ReplicatedStorage)=>(any)",
    className="string",
    clone="(ReplicatedStorage)=>(any)",
    destroy="(ReplicatedStorage)=>()",
    findFirstChild="(ReplicatedStorage,string,boolean)=>(any)",
    getChildren="(ReplicatedStorage)=>(any)",
    isA="(ReplicatedStorage,string)=>(boolean)",
    isDescendantOf="(ReplicatedStorage,any)=>(boolean)",
    remove="(ReplicatedStorage)=>()"}


, ProcessService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ProcessService)=>()",
    Clone="(ProcessService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ProcessService)=>()",
    Exit="(ProcessService,number)=>()",
    FindFirstAncestor="(ProcessService,string)=>(any)",
    FindFirstAncestorOfClass="(ProcessService,string)=>(any)",
    FindFirstAncestorWhichIsA="(ProcessService,string)=>(any)",
    FindFirstChild="(ProcessService,string,boolean)=>(any)",
    FindFirstChildOfClass="(ProcessService,string)=>(any)",
    FindFirstChildWhichIsA="(ProcessService,string,boolean)=>(any)",
    GetAttribute="(ProcessService,string)=>(any)",
    GetAttributeChangedSignal="(ProcessService,string)=>(any)",
    GetAttributes="(ProcessService)=>(any)",
    GetChildren="(ProcessService)=>(any)",
    GetCommandLineArgs="(ProcessService)=>(any)",
    GetDebugId="(ProcessService,number)=>(string)",
    GetDescendants="(ProcessService)=>(any)",
    GetEnv="(ProcessService,string)=>(string)",
    GetFullName="(ProcessService)=>(string)",
    GetPropertyChangedSignal="(ProcessService,string)=>(any)",
    IsA="(ProcessService,string)=>(boolean)",
    IsAncestorOf="(ProcessService,any)=>(boolean)",
    IsDescendantOf="(ProcessService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(ProcessService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ProcessService,string,any)=>()",
    Tags="any",
    WaitForChild="(ProcessService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ProcessService)=>(any)",
    className="string",
    clone="(ProcessService)=>(any)",
    destroy="(ProcessService)=>()",
    findFirstChild="(ProcessService,string,boolean)=>(any)",
    getChildren="(ProcessService)=>(any)",
    isA="(ProcessService,string)=>(boolean)",
    isDescendantOf="(ProcessService,any)=>(boolean)",
    remove="(ProcessService)=>()"}


, QWidgetPluginGui={
    AbsolutePosition="Vector2",
    AbsoluteRotation="number",
    AbsoluteSize="Vector2",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoLocalize="boolean",
    BindToClose="(QWidgetPluginGui,any)=>()",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(QWidgetPluginGui)=>()",
    Clone="(QWidgetPluginGui)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(QWidgetPluginGui)=>()",
    Enabled="boolean",
    FindFirstAncestor="(QWidgetPluginGui,string)=>(any)",
    FindFirstAncestorOfClass="(QWidgetPluginGui,string)=>(any)",
    FindFirstAncestorWhichIsA="(QWidgetPluginGui,string)=>(any)",
    FindFirstChild="(QWidgetPluginGui,string,boolean)=>(any)",
    FindFirstChildOfClass="(QWidgetPluginGui,string)=>(any)",
    FindFirstChildWhichIsA="(QWidgetPluginGui,string,boolean)=>(any)",
    GetAttribute="(QWidgetPluginGui,string)=>(any)",
    GetAttributeChangedSignal="(QWidgetPluginGui,string)=>(any)",
    GetAttributes="(QWidgetPluginGui)=>(any)",
    GetChildren="(QWidgetPluginGui)=>(any)",
    GetDebugId="(QWidgetPluginGui,number)=>(string)",
    GetDescendants="(QWidgetPluginGui)=>(any)",
    GetFullName="(QWidgetPluginGui)=>(string)",
    GetPropertyChangedSignal="(QWidgetPluginGui,string)=>(any)",
    GetRelativeMousePosition="(QWidgetPluginGui)=>(Vector2)",
    IsA="(QWidgetPluginGui,string)=>(boolean)",
    IsAncestorOf="(QWidgetPluginGui,any)=>(boolean)",
    IsDescendantOf="(QWidgetPluginGui,any)=>(boolean)",
    IsNotOccluded="boolean",
    Localize="boolean",
    Name="string",
    Parent="any",
    PluginDragDropped="Event",
    PluginDragEntered="Event",
    PluginDragLeft="Event",
    PluginDragMoved="Event",
    Remove="(QWidgetPluginGui)=>()",
    ResetOnSpawn="boolean",
    RobloxLocked="boolean",
    RootLocalizationTable="any",
    SetAttribute="(QWidgetPluginGui,string,any)=>()",
    Tags="any",
    Title="string",
    WaitForChild="(QWidgetPluginGui,string,number)=>(any)",
    WindowFocusReleased="Event",
    WindowFocused="Event",
    ZIndexBehavior="any",
    archivable="boolean",
    childAdded="Event",
    children="(QWidgetPluginGui)=>(any)",
    className="string",
    clone="(QWidgetPluginGui)=>(any)",
    destroy="(QWidgetPluginGui)=>()",
    findFirstChild="(QWidgetPluginGui,string,boolean)=>(any)",
    getChildren="(QWidgetPluginGui)=>(any)",
    isA="(QWidgetPluginGui,string)=>(boolean)",
    isDescendantOf="(QWidgetPluginGui,any)=>(boolean)",
    remove="(QWidgetPluginGui)=>()"}


, TextFilterResult={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(TextFilterResult)=>()",
    Clone="(TextFilterResult)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(TextFilterResult)=>()",
    FindFirstAncestor="(TextFilterResult,string)=>(any)",
    FindFirstAncestorOfClass="(TextFilterResult,string)=>(any)",
    FindFirstAncestorWhichIsA="(TextFilterResult,string)=>(any)",
    FindFirstChild="(TextFilterResult,string,boolean)=>(any)",
    FindFirstChildOfClass="(TextFilterResult,string)=>(any)",
    FindFirstChildWhichIsA="(TextFilterResult,string,boolean)=>(any)",
    GetAttribute="(TextFilterResult,string)=>(any)",
    GetAttributeChangedSignal="(TextFilterResult,string)=>(any)",
    GetAttributes="(TextFilterResult)=>(any)",
    GetChatForUserAsync="(TextFilterResult,number)=>(string)",
    GetChildren="(TextFilterResult)=>(any)",
    GetDebugId="(TextFilterResult,number)=>(string)",
    GetDescendants="(TextFilterResult)=>(any)",
    GetFullName="(TextFilterResult)=>(string)",
    GetNonChatStringForBroadcastAsync="(TextFilterResult)=>(string)",
    GetNonChatStringForUserAsync="(TextFilterResult,number)=>(string)",
    GetPropertyChangedSignal="(TextFilterResult,string)=>(any)",
    IsA="(TextFilterResult,string)=>(boolean)",
    IsAncestorOf="(TextFilterResult,any)=>(boolean)",
    IsDescendantOf="(TextFilterResult,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(TextFilterResult)=>()",
    RobloxLocked="boolean",
    SetAttribute="(TextFilterResult,string,any)=>()",
    Tags="any",
    WaitForChild="(TextFilterResult,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(TextFilterResult)=>(any)",
    className="string",
    clone="(TextFilterResult)=>(any)",
    destroy="(TextFilterResult)=>()",
    findFirstChild="(TextFilterResult,string,boolean)=>(any)",
    getChildren="(TextFilterResult)=>(any)",
    isA="(TextFilterResult,string)=>(boolean)",
    isDescendantOf="(TextFilterResult,any)=>(boolean)",
    remove="(TextFilterResult)=>()"}


, RemoteEvent={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(RemoteEvent)=>()",
    Clone="(RemoteEvent)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(RemoteEvent)=>()",
    FindFirstAncestor="(RemoteEvent,string)=>(any)",
    FindFirstAncestorOfClass="(RemoteEvent,string)=>(any)",
    FindFirstAncestorWhichIsA="(RemoteEvent,string)=>(any)",
    FindFirstChild="(RemoteEvent,string,boolean)=>(any)",
    FindFirstChildOfClass="(RemoteEvent,string)=>(any)",
    FindFirstChildWhichIsA="(RemoteEvent,string,boolean)=>(any)",
    FireAllClients="(RemoteEvent,any)=>()",
    FireClient="(RemoteEvent,any,any)=>()",
    FireServer="(RemoteEvent,any)=>()",
    GetAttribute="(RemoteEvent,string)=>(any)",
    GetAttributeChangedSignal="(RemoteEvent,string)=>(any)",
    GetAttributes="(RemoteEvent)=>(any)",
    GetChildren="(RemoteEvent)=>(any)",
    GetDebugId="(RemoteEvent,number)=>(string)",
    GetDescendants="(RemoteEvent)=>(any)",
    GetFullName="(RemoteEvent)=>(string)",
    GetPropertyChangedSignal="(RemoteEvent,string)=>(any)",
    IsA="(RemoteEvent,string)=>(boolean)",
    IsAncestorOf="(RemoteEvent,any)=>(boolean)",
    IsDescendantOf="(RemoteEvent,any)=>(boolean)",
    Name="string",
    OnClientEvent="Event",
    OnServerEvent="Event",
    Parent="any",
    Remove="(RemoteEvent)=>()",
    RobloxLocked="boolean",
    SetAttribute="(RemoteEvent,string,any)=>()",
    Tags="any",
    WaitForChild="(RemoteEvent,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(RemoteEvent)=>(any)",
    className="string",
    clone="(RemoteEvent)=>(any)",
    destroy="(RemoteEvent)=>()",
    findFirstChild="(RemoteEvent,string,boolean)=>(any)",
    getChildren="(RemoteEvent)=>(any)",
    isA="(RemoteEvent,string)=>(boolean)",
    isDescendantOf="(RemoteEvent,any)=>(boolean)",
    remove="(RemoteEvent)=>()"}


, RemoteFunction={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(RemoteFunction)=>()",
    Clone="(RemoteFunction)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(RemoteFunction)=>()",
    FindFirstAncestor="(RemoteFunction,string)=>(any)",
    FindFirstAncestorOfClass="(RemoteFunction,string)=>(any)",
    FindFirstAncestorWhichIsA="(RemoteFunction,string)=>(any)",
    FindFirstChild="(RemoteFunction,string,boolean)=>(any)",
    FindFirstChildOfClass="(RemoteFunction,string)=>(any)",
    FindFirstChildWhichIsA="(RemoteFunction,string,boolean)=>(any)",
    GetAttribute="(RemoteFunction,string)=>(any)",
    GetAttributeChangedSignal="(RemoteFunction,string)=>(any)",
    GetAttributes="(RemoteFunction)=>(any)",
    GetChildren="(RemoteFunction)=>(any)",
    GetDebugId="(RemoteFunction,number)=>(string)",
    GetDescendants="(RemoteFunction)=>(any)",
    GetFullName="(RemoteFunction)=>(string)",
    GetPropertyChangedSignal="(RemoteFunction,string)=>(any)",
    InvokeClient="(RemoteFunction,any,any)=>(any)",
    InvokeServer="(RemoteFunction,any)=>(any)",
    IsA="(RemoteFunction,string)=>(boolean)",
    IsAncestorOf="(RemoteFunction,any)=>(boolean)",
    IsDescendantOf="(RemoteFunction,any)=>(boolean)",
    Name="string",
    Parent="any",
    RemoteOnInvokeClient="Event",
    RemoteOnInvokeError="Event",
    RemoteOnInvokeServer="Event",
    RemoteOnInvokeSuccess="Event",
    Remove="(RemoteFunction)=>()",
    RobloxLocked="boolean",
    SetAttribute="(RemoteFunction,string,any)=>()",
    Tags="any",
    WaitForChild="(RemoteFunction,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(RemoteFunction)=>(any)",
    className="string",
    clone="(RemoteFunction)=>(any)",
    destroy="(RemoteFunction)=>()",
    findFirstChild="(RemoteFunction,string,boolean)=>(any)",
    getChildren="(RemoteFunction)=>(any)",
    isA="(RemoteFunction,string)=>(boolean)",
    isDescendantOf="(RemoteFunction,any)=>(boolean)",
    remove="(RemoteFunction)=>()"}


, RenderSettings={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoFRMLevel="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(RenderSettings)=>()",
    Clone="(RenderSettings)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(RenderSettings)=>()",
    EagerBulkExecution="boolean",
    EditQualityLevel="any",
    EnableFRM="boolean",
    ExportMergeByMaterial="boolean",
    FindFirstAncestor="(RenderSettings,string)=>(any)",
    FindFirstAncestorOfClass="(RenderSettings,string)=>(any)",
    FindFirstAncestorWhichIsA="(RenderSettings,string)=>(any)",
    FindFirstChild="(RenderSettings,string,boolean)=>(any)",
    FindFirstChildOfClass="(RenderSettings,string)=>(any)",
    FindFirstChildWhichIsA="(RenderSettings,string,boolean)=>(any)",
    FrameRateManager="any",
    GetAttribute="(RenderSettings,string)=>(any)",
    GetAttributeChangedSignal="(RenderSettings,string)=>(any)",
    GetAttributes="(RenderSettings)=>(any)",
    GetChildren="(RenderSettings)=>(any)",
    GetDebugId="(RenderSettings,number)=>(string)",
    GetDescendants="(RenderSettings)=>(any)",
    GetFullName="(RenderSettings)=>(string)",
    GetMaxQualityLevel="(RenderSettings)=>(number)",
    GetPropertyChangedSignal="(RenderSettings,string)=>(any)",
    GraphicsMode="any",
    IsA="(RenderSettings,string)=>(boolean)",
    IsAncestorOf="(RenderSettings,any)=>(boolean)",
    IsDescendantOf="(RenderSettings,any)=>(boolean)",
    MeshCacheSize="number",
    Name="string",
    Parent="any",
    QualityLevel="any",
    ReloadAssets="boolean",
    Remove="(RenderSettings)=>()",
    RenderCSGTrianglesDebug="boolean",
    RobloxLocked="boolean",
    SetAttribute="(RenderSettings,string,any)=>()",
    ShowBoundingBoxes="boolean",
    Tags="any",
    WaitForChild="(RenderSettings,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(RenderSettings)=>(any)",
    className="string",
    clone="(RenderSettings)=>(any)",
    destroy="(RenderSettings)=>()",
    findFirstChild="(RenderSettings,string,boolean)=>(any)",
    getChildren="(RenderSettings)=>(any)",
    isA="(RenderSettings,string)=>(boolean)",
    isDescendantOf="(RenderSettings,any)=>(boolean)",
    remove="(RenderSettings)=>()"}


, RenderingTest={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CFrame="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(RenderingTest)=>()",
    Clone="(RenderingTest)=>(any)",
    ComparisonDiffThreshold="number",
    ComparisonMethod="any",
    ComparisonPsnrThreshold="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Description="string",
    Destroy="(RenderingTest)=>()",
    FieldOfView="number",
    FindFirstAncestor="(RenderingTest,string)=>(any)",
    FindFirstAncestorOfClass="(RenderingTest,string)=>(any)",
    FindFirstAncestorWhichIsA="(RenderingTest,string)=>(any)",
    FindFirstChild="(RenderingTest,string,boolean)=>(any)",
    FindFirstChildOfClass="(RenderingTest,string)=>(any)",
    FindFirstChildWhichIsA="(RenderingTest,string,boolean)=>(any)",
    GetAttribute="(RenderingTest,string)=>(any)",
    GetAttributeChangedSignal="(RenderingTest,string)=>(any)",
    GetAttributes="(RenderingTest)=>(any)",
    GetChildren="(RenderingTest)=>(any)",
    GetDebugId="(RenderingTest,number)=>(string)",
    GetDescendants="(RenderingTest)=>(any)",
    GetFullName="(RenderingTest)=>(string)",
    GetPropertyChangedSignal="(RenderingTest,string)=>(any)",
    IsA="(RenderingTest,string)=>(boolean)",
    IsAncestorOf="(RenderingTest,any)=>(boolean)",
    IsDescendantOf="(RenderingTest,any)=>(boolean)",
    Name="string",
    Orientation="Vector3",
    Parent="any",
    Position="Vector3",
    QualityLevel="number",
    Remove="(RenderingTest)=>()",
    RenderdocTriggerCapture="(RenderingTest)=>()",
    RobloxLocked="boolean",
    SetAttribute="(RenderingTest,string,any)=>()",
    ShouldSkip="boolean",
    Tags="any",
    Ticket="string",
    WaitForChild="(RenderingTest,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(RenderingTest)=>(any)",
    className="string",
    clone="(RenderingTest)=>(any)",
    destroy="(RenderingTest)=>()",
    findFirstChild="(RenderingTest,string,boolean)=>(any)",
    getChildren="(RenderingTest)=>(any)",
    isA="(RenderingTest,string)=>(boolean)",
    isDescendantOf="(RenderingTest,any)=>(boolean)",
    remove="(RenderingTest)=>()"}


, ReplicatedFirst={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ReplicatedFirst)=>()",
    Clone="(ReplicatedFirst)=>(any)",
    DataCost="number",
    DefaultLoadingGuiRemoved="Event",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ReplicatedFirst)=>()",
    FindFirstAncestor="(ReplicatedFirst,string)=>(any)",
    FindFirstAncestorOfClass="(ReplicatedFirst,string)=>(any)",
    FindFirstAncestorWhichIsA="(ReplicatedFirst,string)=>(any)",
    FindFirstChild="(ReplicatedFirst,string,boolean)=>(any)",
    FindFirstChildOfClass="(ReplicatedFirst,string)=>(any)",
    FindFirstChildWhichIsA="(ReplicatedFirst,string,boolean)=>(any)",
    FinishedReplicating="Event",
    GetAttribute="(ReplicatedFirst,string)=>(any)",
    GetAttributeChangedSignal="(ReplicatedFirst,string)=>(any)",
    GetAttributes="(ReplicatedFirst)=>(any)",
    GetChildren="(ReplicatedFirst)=>(any)",
    GetDebugId="(ReplicatedFirst,number)=>(string)",
    GetDescendants="(ReplicatedFirst)=>(any)",
    GetFullName="(ReplicatedFirst)=>(string)",
    GetPropertyChangedSignal="(ReplicatedFirst,string)=>(any)",
    IsA="(ReplicatedFirst,string)=>(boolean)",
    IsAncestorOf="(ReplicatedFirst,any)=>(boolean)",
    IsDefaultLoadingGuiRemoved="(ReplicatedFirst)=>(boolean)",
    IsDescendantOf="(ReplicatedFirst,any)=>(boolean)",
    IsFinishedReplicating="(ReplicatedFirst)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(ReplicatedFirst)=>()",
    RemoveDefaultLoadingGuiSignal="Event",
    RemoveDefaultLoadingScreen="(ReplicatedFirst)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ReplicatedFirst,string,any)=>()",
    SetDefaultLoadingGuiRemoved="(ReplicatedFirst)=>()",
    Tags="any",
    WaitForChild="(ReplicatedFirst,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ReplicatedFirst)=>(any)",
    className="string",
    clone="(ReplicatedFirst)=>(any)",
    destroy="(ReplicatedFirst)=>()",
    findFirstChild="(ReplicatedFirst,string,boolean)=>(any)",
    getChildren="(ReplicatedFirst)=>(any)",
    isA="(ReplicatedFirst,string)=>(boolean)",
    isDescendantOf="(ReplicatedFirst,any)=>(boolean)",
    remove="(ReplicatedFirst)=>()"}


, ReverbSoundEffect={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ReverbSoundEffect)=>()",
    Clone="(ReverbSoundEffect)=>(any)",
    DataCost="number",
    DecayTime="number",
    Density="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ReverbSoundEffect)=>()",
    Diffusion="number",
    DryLevel="number",
    Enabled="boolean",
    FindFirstAncestor="(ReverbSoundEffect,string)=>(any)",
    FindFirstAncestorOfClass="(ReverbSoundEffect,string)=>(any)",
    FindFirstAncestorWhichIsA="(ReverbSoundEffect,string)=>(any)",
    FindFirstChild="(ReverbSoundEffect,string,boolean)=>(any)",
    FindFirstChildOfClass="(ReverbSoundEffect,string)=>(any)",
    FindFirstChildWhichIsA="(ReverbSoundEffect,string,boolean)=>(any)",
    GetAttribute="(ReverbSoundEffect,string)=>(any)",
    GetAttributeChangedSignal="(ReverbSoundEffect,string)=>(any)",
    GetAttributes="(ReverbSoundEffect)=>(any)",
    GetChildren="(ReverbSoundEffect)=>(any)",
    GetDebugId="(ReverbSoundEffect,number)=>(string)",
    GetDescendants="(ReverbSoundEffect)=>(any)",
    GetFullName="(ReverbSoundEffect)=>(string)",
    GetPropertyChangedSignal="(ReverbSoundEffect,string)=>(any)",
    IsA="(ReverbSoundEffect,string)=>(boolean)",
    IsAncestorOf="(ReverbSoundEffect,any)=>(boolean)",
    IsDescendantOf="(ReverbSoundEffect,any)=>(boolean)",
    Name="string",
    Parent="any",
    Priority="number",
    Remove="(ReverbSoundEffect)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ReverbSoundEffect,string,any)=>()",
    Tags="any",
    WaitForChild="(ReverbSoundEffect,string,number)=>(any)",
    WetLevel="number",
    archivable="boolean",
    childAdded="Event",
    children="(ReverbSoundEffect)=>(any)",
    className="string",
    clone="(ReverbSoundEffect)=>(any)",
    destroy="(ReverbSoundEffect)=>()",
    findFirstChild="(ReverbSoundEffect,string,boolean)=>(any)",
    getChildren="(ReverbSoundEffect)=>(any)",
    isA="(ReverbSoundEffect,string)=>(boolean)",
    isDescendantOf="(ReverbSoundEffect,any)=>(boolean)",
    remove="(ReverbSoundEffect)=>()"}


, SelectionBox={
    Adornee="any",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SelectionBox)=>()",
    Clone="(SelectionBox)=>(any)",
    Color="any",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SelectionBox)=>()",
    FindFirstAncestor="(SelectionBox,string)=>(any)",
    FindFirstAncestorOfClass="(SelectionBox,string)=>(any)",
    FindFirstAncestorWhichIsA="(SelectionBox,string)=>(any)",
    FindFirstChild="(SelectionBox,string,boolean)=>(any)",
    FindFirstChildOfClass="(SelectionBox,string)=>(any)",
    FindFirstChildWhichIsA="(SelectionBox,string,boolean)=>(any)",
    GetAttribute="(SelectionBox,string)=>(any)",
    GetAttributeChangedSignal="(SelectionBox,string)=>(any)",
    GetAttributes="(SelectionBox)=>(any)",
    GetChildren="(SelectionBox)=>(any)",
    GetDebugId="(SelectionBox,number)=>(string)",
    GetDescendants="(SelectionBox)=>(any)",
    GetFullName="(SelectionBox)=>(string)",
    GetPropertyChangedSignal="(SelectionBox,string)=>(any)",
    IsA="(SelectionBox,string)=>(boolean)",
    IsAncestorOf="(SelectionBox,any)=>(boolean)",
    IsDescendantOf="(SelectionBox,any)=>(boolean)",
    LineThickness="number",
    Name="string",
    Parent="any",
    Remove="(SelectionBox)=>()",
    RobloxLocked="boolean",
    SetAttribute="(SelectionBox,string,any)=>()",
    SurfaceColor="any",
    SurfaceColor3="Color3",
    SurfaceTransparency="number",
    Tags="any",
    Transparency="number",
    Visible="boolean",
    WaitForChild="(SelectionBox,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(SelectionBox)=>(any)",
    className="string",
    clone="(SelectionBox)=>(any)",
    destroy="(SelectionBox)=>()",
    findFirstChild="(SelectionBox,string,boolean)=>(any)",
    getChildren="(SelectionBox)=>(any)",
    isA="(SelectionBox,string)=>(boolean)",
    isDescendantOf="(SelectionBox,any)=>(boolean)",
    remove="(SelectionBox)=>()"}


, RobloxPluginGuiService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(RobloxPluginGuiService)=>()",
    Clone="(RobloxPluginGuiService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(RobloxPluginGuiService)=>()",
    FindFirstAncestor="(RobloxPluginGuiService,string)=>(any)",
    FindFirstAncestorOfClass="(RobloxPluginGuiService,string)=>(any)",
    FindFirstAncestorWhichIsA="(RobloxPluginGuiService,string)=>(any)",
    FindFirstChild="(RobloxPluginGuiService,string,boolean)=>(any)",
    FindFirstChildOfClass="(RobloxPluginGuiService,string)=>(any)",
    FindFirstChildWhichIsA="(RobloxPluginGuiService,string,boolean)=>(any)",
    GetAttribute="(RobloxPluginGuiService,string)=>(any)",
    GetAttributeChangedSignal="(RobloxPluginGuiService,string)=>(any)",
    GetAttributes="(RobloxPluginGuiService)=>(any)",
    GetChildren="(RobloxPluginGuiService)=>(any)",
    GetDebugId="(RobloxPluginGuiService,number)=>(string)",
    GetDescendants="(RobloxPluginGuiService)=>(any)",
    GetFullName="(RobloxPluginGuiService)=>(string)",
    GetPropertyChangedSignal="(RobloxPluginGuiService,string)=>(any)",
    IsA="(RobloxPluginGuiService,string)=>(boolean)",
    IsAncestorOf="(RobloxPluginGuiService,any)=>(boolean)",
    IsDescendantOf="(RobloxPluginGuiService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(RobloxPluginGuiService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(RobloxPluginGuiService,string,any)=>()",
    Tags="any",
    WaitForChild="(RobloxPluginGuiService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(RobloxPluginGuiService)=>(any)",
    className="string",
    clone="(RobloxPluginGuiService)=>(any)",
    destroy="(RobloxPluginGuiService)=>()",
    findFirstChild="(RobloxPluginGuiService,string,boolean)=>(any)",
    getChildren="(RobloxPluginGuiService)=>(any)",
    isA="(RobloxPluginGuiService,string)=>(boolean)",
    isDescendantOf="(RobloxPluginGuiService,any)=>(boolean)",
    remove="(RobloxPluginGuiService)=>()"}


, RocketPropulsion={
    Abort="(RocketPropulsion)=>()",
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CartoonFactor="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(RocketPropulsion)=>()",
    Clone="(RocketPropulsion)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(RocketPropulsion)=>()",
    FindFirstAncestor="(RocketPropulsion,string)=>(any)",
    FindFirstAncestorOfClass="(RocketPropulsion,string)=>(any)",
    FindFirstAncestorWhichIsA="(RocketPropulsion,string)=>(any)",
    FindFirstChild="(RocketPropulsion,string,boolean)=>(any)",
    FindFirstChildOfClass="(RocketPropulsion,string)=>(any)",
    FindFirstChildWhichIsA="(RocketPropulsion,string,boolean)=>(any)",
    Fire="(RocketPropulsion)=>()",
    GetAttribute="(RocketPropulsion,string)=>(any)",
    GetAttributeChangedSignal="(RocketPropulsion,string)=>(any)",
    GetAttributes="(RocketPropulsion)=>(any)",
    GetChildren="(RocketPropulsion)=>(any)",
    GetDebugId="(RocketPropulsion,number)=>(string)",
    GetDescendants="(RocketPropulsion)=>(any)",
    GetFullName="(RocketPropulsion)=>(string)",
    GetPropertyChangedSignal="(RocketPropulsion,string)=>(any)",
    IsA="(RocketPropulsion,string)=>(boolean)",
    IsAncestorOf="(RocketPropulsion,any)=>(boolean)",
    IsDescendantOf="(RocketPropulsion,any)=>(boolean)",
    MaxSpeed="number",
    MaxThrust="number",
    MaxTorque="Vector3",
    Name="string",
    Parent="any",
    ReachedTarget="Event",
    Remove="(RocketPropulsion)=>()",
    RobloxLocked="boolean",
    SetAttribute="(RocketPropulsion,string,any)=>()",
    Tags="any",
    Target="any",
    TargetOffset="Vector3",
    TargetRadius="number",
    ThrustD="number",
    ThrustP="number",
    TurnD="number",
    TurnP="number",
    WaitForChild="(RocketPropulsion,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(RocketPropulsion)=>(any)",
    className="string",
    clone="(RocketPropulsion)=>(any)",
    destroy="(RocketPropulsion)=>()",
    findFirstChild="(RocketPropulsion,string,boolean)=>(any)",
    fire="(RocketPropulsion)=>()",
    getChildren="(RocketPropulsion)=>(any)",
    isA="(RocketPropulsion,string)=>(boolean)",
    isDescendantOf="(RocketPropulsion,any)=>(boolean)",
    remove="(RocketPropulsion)=>()"}


, RopeConstraint={
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    Attachment0="any",
    Attachment1="any",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(RopeConstraint)=>()",
    Clone="(RopeConstraint)=>(any)",
    Color="any",
    CurrentDistance="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(RopeConstraint)=>()",
    Enabled="boolean",
    FindFirstAncestor="(RopeConstraint,string)=>(any)",
    FindFirstAncestorOfClass="(RopeConstraint,string)=>(any)",
    FindFirstAncestorWhichIsA="(RopeConstraint,string)=>(any)",
    FindFirstChild="(RopeConstraint,string,boolean)=>(any)",
    FindFirstChildOfClass="(RopeConstraint,string)=>(any)",
    FindFirstChildWhichIsA="(RopeConstraint,string,boolean)=>(any)",
    GetAttribute="(RopeConstraint,string)=>(any)",
    GetAttributeChangedSignal="(RopeConstraint,string)=>(any)",
    GetAttributes="(RopeConstraint)=>(any)",
    GetChildren="(RopeConstraint)=>(any)",
    GetDebugId="(RopeConstraint,number)=>(string)",
    GetDescendants="(RopeConstraint)=>(any)",
    GetFullName="(RopeConstraint)=>(string)",
    GetPropertyChangedSignal="(RopeConstraint,string)=>(any)",
    IsA="(RopeConstraint,string)=>(boolean)",
    IsAncestorOf="(RopeConstraint,any)=>(boolean)",
    IsDescendantOf="(RopeConstraint,any)=>(boolean)",
    Length="number",
    Name="string",
    Parent="any",
    Remove="(RopeConstraint)=>()",
    Restitution="number",
    RobloxLocked="boolean",
    SetAttribute="(RopeConstraint,string,any)=>()",
    Tags="any",
    Thickness="number",
    Visible="boolean",
    WaitForChild="(RopeConstraint,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(RopeConstraint)=>(any)",
    className="string",
    clone="(RopeConstraint)=>(any)",
    destroy="(RopeConstraint)=>()",
    findFirstChild="(RopeConstraint,string,boolean)=>(any)",
    getChildren="(RopeConstraint)=>(any)",
    isA="(RopeConstraint,string)=>(boolean)",
    isDescendantOf="(RopeConstraint,any)=>(boolean)",
    remove="(RopeConstraint)=>()"}


, Rotate={
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    C0="CFrame",
    C1="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Rotate)=>()",
    Clone="(Rotate)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Rotate)=>()",
    Enabled="boolean",
    FindFirstAncestor="(Rotate,string)=>(any)",
    FindFirstAncestorOfClass="(Rotate,string)=>(any)",
    FindFirstAncestorWhichIsA="(Rotate,string)=>(any)",
    FindFirstChild="(Rotate,string,boolean)=>(any)",
    FindFirstChildOfClass="(Rotate,string)=>(any)",
    FindFirstChildWhichIsA="(Rotate,string,boolean)=>(any)",
    GetAttribute="(Rotate,string)=>(any)",
    GetAttributeChangedSignal="(Rotate,string)=>(any)",
    GetAttributes="(Rotate)=>(any)",
    GetChildren="(Rotate)=>(any)",
    GetDebugId="(Rotate,number)=>(string)",
    GetDescendants="(Rotate)=>(any)",
    GetFullName="(Rotate)=>(string)",
    GetPropertyChangedSignal="(Rotate,string)=>(any)",
    IsA="(Rotate,string)=>(boolean)",
    IsAncestorOf="(Rotate,any)=>(boolean)",
    IsAutoJoint="boolean",
    IsDescendantOf="(Rotate,any)=>(boolean)",
    Name="string",
    Parent="any",
    Part0="any",
    Part1="any",
    Remove="(Rotate)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Rotate,string,any)=>()",
    Tags="any",
    WaitForChild="(Rotate,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Rotate)=>(any)",
    className="string",
    clone="(Rotate)=>(any)",
    destroy="(Rotate)=>()",
    findFirstChild="(Rotate,string,boolean)=>(any)",
    getChildren="(Rotate)=>(any)",
    isA="(Rotate,string)=>(boolean)",
    isDescendantOf="(Rotate,any)=>(boolean)",
    part1="any",
    remove="(Rotate)=>()"}


, RotateV={
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BaseAngle="number",
    C0="CFrame",
    C1="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(RotateV)=>()",
    Clone="(RotateV)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(RotateV)=>()",
    Enabled="boolean",
    FindFirstAncestor="(RotateV,string)=>(any)",
    FindFirstAncestorOfClass="(RotateV,string)=>(any)",
    FindFirstAncestorWhichIsA="(RotateV,string)=>(any)",
    FindFirstChild="(RotateV,string,boolean)=>(any)",
    FindFirstChildOfClass="(RotateV,string)=>(any)",
    FindFirstChildWhichIsA="(RotateV,string,boolean)=>(any)",
    GetAttribute="(RotateV,string)=>(any)",
    GetAttributeChangedSignal="(RotateV,string)=>(any)",
    GetAttributes="(RotateV)=>(any)",
    GetChildren="(RotateV)=>(any)",
    GetDebugId="(RotateV,number)=>(string)",
    GetDescendants="(RotateV)=>(any)",
    GetFullName="(RotateV)=>(string)",
    GetPropertyChangedSignal="(RotateV,string)=>(any)",
    IsA="(RotateV,string)=>(boolean)",
    IsAncestorOf="(RotateV,any)=>(boolean)",
    IsAutoJoint="boolean",
    IsDescendantOf="(RotateV,any)=>(boolean)",
    Name="string",
    Parent="any",
    Part0="any",
    Part1="any",
    Remove="(RotateV)=>()",
    RobloxLocked="boolean",
    SetAttribute="(RotateV,string,any)=>()",
    Tags="any",
    WaitForChild="(RotateV,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(RotateV)=>(any)",
    className="string",
    clone="(RotateV)=>(any)",
    destroy="(RotateV)=>()",
    findFirstChild="(RotateV,string,boolean)=>(any)",
    getChildren="(RotateV)=>(any)",
    isA="(RotateV,string)=>(boolean)",
    isDescendantOf="(RotateV,any)=>(boolean)",
    part1="any",
    remove="(RotateV)=>()"}


, RunningAverageItemDouble={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(RunningAverageItemDouble)=>()",
    Clone="(RunningAverageItemDouble)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(RunningAverageItemDouble)=>()",
    FindFirstAncestor="(RunningAverageItemDouble,string)=>(any)",
    FindFirstAncestorOfClass="(RunningAverageItemDouble,string)=>(any)",
    FindFirstAncestorWhichIsA="(RunningAverageItemDouble,string)=>(any)",
    FindFirstChild="(RunningAverageItemDouble,string,boolean)=>(any)",
    FindFirstChildOfClass="(RunningAverageItemDouble,string)=>(any)",
    FindFirstChildWhichIsA="(RunningAverageItemDouble,string,boolean)=>(any)",
    GetAttribute="(RunningAverageItemDouble,string)=>(any)",
    GetAttributeChangedSignal="(RunningAverageItemDouble,string)=>(any)",
    GetAttributes="(RunningAverageItemDouble)=>(any)",
    GetChildren="(RunningAverageItemDouble)=>(any)",
    GetDebugId="(RunningAverageItemDouble,number)=>(string)",
    GetDescendants="(RunningAverageItemDouble)=>(any)",
    GetFullName="(RunningAverageItemDouble)=>(string)",
    GetPropertyChangedSignal="(RunningAverageItemDouble,string)=>(any)",
    GetValue="(RunningAverageItemDouble)=>(number)",
    GetValueString="(RunningAverageItemDouble)=>(string)",
    IsA="(RunningAverageItemDouble,string)=>(boolean)",
    IsAncestorOf="(RunningAverageItemDouble,any)=>(boolean)",
    IsDescendantOf="(RunningAverageItemDouble,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(RunningAverageItemDouble)=>()",
    RobloxLocked="boolean",
    SetAttribute="(RunningAverageItemDouble,string,any)=>()",
    Tags="any",
    WaitForChild="(RunningAverageItemDouble,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(RunningAverageItemDouble)=>(any)",
    className="string",
    clone="(RunningAverageItemDouble)=>(any)",
    destroy="(RunningAverageItemDouble)=>()",
    findFirstChild="(RunningAverageItemDouble,string,boolean)=>(any)",
    getChildren="(RunningAverageItemDouble)=>(any)",
    isA="(RunningAverageItemDouble,string)=>(boolean)",
    isDescendantOf="(RunningAverageItemDouble,any)=>(boolean)",
    remove="(RunningAverageItemDouble)=>()"}


, RunningAverageItemInt={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(RunningAverageItemInt)=>()",
    Clone="(RunningAverageItemInt)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(RunningAverageItemInt)=>()",
    FindFirstAncestor="(RunningAverageItemInt,string)=>(any)",
    FindFirstAncestorOfClass="(RunningAverageItemInt,string)=>(any)",
    FindFirstAncestorWhichIsA="(RunningAverageItemInt,string)=>(any)",
    FindFirstChild="(RunningAverageItemInt,string,boolean)=>(any)",
    FindFirstChildOfClass="(RunningAverageItemInt,string)=>(any)",
    FindFirstChildWhichIsA="(RunningAverageItemInt,string,boolean)=>(any)",
    GetAttribute="(RunningAverageItemInt,string)=>(any)",
    GetAttributeChangedSignal="(RunningAverageItemInt,string)=>(any)",
    GetAttributes="(RunningAverageItemInt)=>(any)",
    GetChildren="(RunningAverageItemInt)=>(any)",
    GetDebugId="(RunningAverageItemInt,number)=>(string)",
    GetDescendants="(RunningAverageItemInt)=>(any)",
    GetFullName="(RunningAverageItemInt)=>(string)",
    GetPropertyChangedSignal="(RunningAverageItemInt,string)=>(any)",
    GetValue="(RunningAverageItemInt)=>(number)",
    GetValueString="(RunningAverageItemInt)=>(string)",
    IsA="(RunningAverageItemInt,string)=>(boolean)",
    IsAncestorOf="(RunningAverageItemInt,any)=>(boolean)",
    IsDescendantOf="(RunningAverageItemInt,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(RunningAverageItemInt)=>()",
    RobloxLocked="boolean",
    SetAttribute="(RunningAverageItemInt,string,any)=>()",
    Tags="any",
    WaitForChild="(RunningAverageItemInt,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(RunningAverageItemInt)=>(any)",
    className="string",
    clone="(RunningAverageItemInt)=>(any)",
    destroy="(RunningAverageItemInt)=>()",
    findFirstChild="(RunningAverageItemInt,string,boolean)=>(any)",
    getChildren="(RunningAverageItemInt)=>(any)",
    isA="(RunningAverageItemInt,string)=>(boolean)",
    isDescendantOf="(RunningAverageItemInt,any)=>(boolean)",
    remove="(RunningAverageItemInt)=>()"}


, Script={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CachedRemoteSource="any",
    CachedRemoteSourceLoadState="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Script)=>()",
    Clone="(Script)=>(any)",
    CurrentEditor="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Script)=>()",
    Disabled="boolean",
    FindFirstAncestor="(Script,string)=>(any)",
    FindFirstAncestorOfClass="(Script,string)=>(any)",
    FindFirstAncestorWhichIsA="(Script,string)=>(any)",
    FindFirstChild="(Script,string,boolean)=>(any)",
    FindFirstChildOfClass="(Script,string)=>(any)",
    FindFirstChildWhichIsA="(Script,string,boolean)=>(any)",
    GetAttribute="(Script,string)=>(any)",
    GetAttributeChangedSignal="(Script,string)=>(any)",
    GetAttributes="(Script)=>(any)",
    GetChildren="(Script)=>(any)",
    GetDebugId="(Script,number)=>(string)",
    GetDescendants="(Script)=>(any)",
    GetFullName="(Script)=>(string)",
    GetHash="(Script)=>(string)",
    GetPropertyChangedSignal="(Script,string)=>(any)",
    HasAssociatedDrafts="boolean",
    IsA="(Script,string)=>(boolean)",
    IsAncestorOf="(Script,any)=>(boolean)",
    IsDescendantOf="(Script,any)=>(boolean)",
    LinkedSource="any",
    LockGrantedOrNot="Event",
    LostLock="Event",
    Name="string",
    Parent="any",
    Remove="(Script)=>()",
    RequestLock="Event",
    RequestScriptHash="Event",
    RobloxLocked="boolean",
    SandboxedSource="any",
    ScriptGuid="string",
    SetAttribute="(Script,string,any)=>()",
    Source="any",
    Tags="any",
    VerifyScriptHash="Event",
    WaitForChild="(Script,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Script)=>(any)",
    className="string",
    clone="(Script)=>(any)",
    destroy="(Script)=>()",
    findFirstChild="(Script,string,boolean)=>(any)",
    getChildren="(Script)=>(any)",
    isA="(Script,string)=>(boolean)",
    isDescendantOf="(Script,any)=>(boolean)",
    remove="(Script)=>()"}


, TriangleMeshPart={
    AncestryChanged="Event",
    Anchored="boolean",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BackParamA="number",
    BackParamB="number",
    BackSurface="any",
    BackSurfaceInput="any",
    BottomParamA="number",
    BottomParamB="number",
    BottomSurface="any",
    BottomSurfaceInput="any",
    BreakJoints="(TriangleMeshPart)=>()",
    BrickColor="any",
    CFrame="CFrame",
    CanCollide="boolean",
    CanCollideWith="(TriangleMeshPart,any)=>(boolean)",
    CanSetNetworkOwnership="(TriangleMeshPart)=>(any)",
    CastShadow="boolean",
    CenterOfMass="Vector3",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(TriangleMeshPart)=>()",
    Clone="(TriangleMeshPart)=>(any)",
    CollisionFidelity="any",
    CollisionGroupId="number",
    Color="Color3",
    Color3uint8="any",
    CustomPhysicalProperties="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(TriangleMeshPart)=>()",
    DraggingV1="boolean",
    Elasticity="number",
    FindFirstAncestor="(TriangleMeshPart,string)=>(any)",
    FindFirstAncestorOfClass="(TriangleMeshPart,string)=>(any)",
    FindFirstAncestorWhichIsA="(TriangleMeshPart,string)=>(any)",
    FindFirstChild="(TriangleMeshPart,string,boolean)=>(any)",
    FindFirstChildOfClass="(TriangleMeshPart,string)=>(any)",
    FindFirstChildWhichIsA="(TriangleMeshPart,string,boolean)=>(any)",
    Friction="number",
    FrontParamA="number",
    FrontParamB="number",
    FrontSurface="any",
    FrontSurfaceInput="any",
    GetAttribute="(TriangleMeshPart,string)=>(any)",
    GetAttributeChangedSignal="(TriangleMeshPart,string)=>(any)",
    GetAttributes="(TriangleMeshPart)=>(any)",
    GetChildren="(TriangleMeshPart)=>(any)",
    GetConnectedParts="(TriangleMeshPart,boolean)=>(any)",
    GetDebugId="(TriangleMeshPart,number)=>(string)",
    GetDescendants="(TriangleMeshPart)=>(any)",
    GetFullName="(TriangleMeshPart)=>(string)",
    GetJoints="(TriangleMeshPart)=>(any)",
    GetMass="(TriangleMeshPart)=>(number)",
    GetNetworkOwner="(TriangleMeshPart)=>(any)",
    GetNetworkOwnershipAuto="(TriangleMeshPart)=>(boolean)",
    GetPropertyChangedSignal="(TriangleMeshPart,string)=>(any)",
    GetRenderCFrame="(TriangleMeshPart)=>(CFrame)",
    GetRootPart="(TriangleMeshPart)=>(any)",
    GetTouchingParts="(TriangleMeshPart)=>(any)",
    IsA="(TriangleMeshPart,string)=>(boolean)",
    IsAncestorOf="(TriangleMeshPart,any)=>(boolean)",
    IsDescendantOf="(TriangleMeshPart,any)=>(boolean)",
    IsGrounded="(TriangleMeshPart)=>(boolean)",
    LODData="any",
    LeftParamA="number",
    LeftParamB="number",
    LeftSurface="any",
    LeftSurfaceInput="any",
    LocalSimulationTouched="Event",
    LocalTransparencyModifier="number",
    Locked="boolean",
    MakeJoints="(TriangleMeshPart)=>()",
    Massless="boolean",
    Material="any",
    Name="string",
    NetworkIsSleeping="boolean",
    NetworkOwnerChanged="Event",
    NetworkOwnerV3="any",
    NetworkOwnershipRule="any",
    Orientation="Vector3",
    OutfitChanged="Event",
    Parent="any",
    PhysicalConfigData="any",
    Position="Vector3",
    ReceiveAge="number",
    Reflectance="number",
    Remove="(TriangleMeshPart)=>()",
    Resize="(TriangleMeshPart,any,number)=>(boolean)",
    ResizeIncrement="number",
    ResizeableFaces="any",
    RightParamA="number",
    RightParamB="number",
    RightSurface="any",
    RightSurfaceInput="any",
    RobloxLocked="boolean",
    RootPriority="number",
    RotVelocity="Vector3",
    Rotation="Vector3",
    SetAttribute="(TriangleMeshPart,string,any)=>()",
    SetNetworkOwner="(TriangleMeshPart,any)=>()",
    SetNetworkOwnershipAuto="(TriangleMeshPart)=>()",
    Size="Vector3",
    SpecificGravity="number",
    StoppedTouching="Event",
    SubtractAsync="(TriangleMeshPart,any,any,any)=>(any)",
    Tags="any",
    TopParamA="number",
    TopParamB="number",
    TopSurface="any",
    TopSurfaceInput="any",
    TouchEnded="Event",
    Touched="Event",
    Transparency="number",
    UnionAsync="(TriangleMeshPart,any,any,any)=>(any)",
    Velocity="Vector3",
    WaitForChild="(TriangleMeshPart,string,number)=>(any)",
    archivable="boolean",
    breakJoints="(TriangleMeshPart)=>()",
    brickColor="any",
    childAdded="Event",
    children="(TriangleMeshPart)=>(any)",
    className="string",
    clone="(TriangleMeshPart)=>(any)",
    destroy="(TriangleMeshPart)=>()",
    findFirstChild="(TriangleMeshPart,string,boolean)=>(any)",
    getChildren="(TriangleMeshPart)=>(any)",
    getMass="(TriangleMeshPart)=>(number)",
    isA="(TriangleMeshPart,string)=>(boolean)",
    isDescendantOf="(TriangleMeshPart,any)=>(boolean)",
    makeJoints="(TriangleMeshPart)=>()",
    remove="(TriangleMeshPart)=>()",
    resize="(TriangleMeshPart,any,number)=>(boolean)",
    siz="Vector3",
    size="Vector3",
    touched="Event"}


, ScriptDebugger={
    AddWatch="(ScriptDebugger,string)=>(any)",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BreakpointAdded="Event",
    BreakpointRemoved="Event",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ScriptDebugger)=>()",
    Clone="(ScriptDebugger)=>(any)",
    CoreScriptIdentifier="string",
    CurrentLine="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ScriptDebugger)=>()",
    EncounteredBreak="Event",
    FindFirstAncestor="(ScriptDebugger,string)=>(any)",
    FindFirstAncestorOfClass="(ScriptDebugger,string)=>(any)",
    FindFirstAncestorWhichIsA="(ScriptDebugger,string)=>(any)",
    FindFirstChild="(ScriptDebugger,string,boolean)=>(any)",
    FindFirstChildOfClass="(ScriptDebugger,string)=>(any)",
    FindFirstChildWhichIsA="(ScriptDebugger,string,boolean)=>(any)",
    GetAttribute="(ScriptDebugger,string)=>(any)",
    GetAttributeChangedSignal="(ScriptDebugger,string)=>(any)",
    GetAttributes="(ScriptDebugger)=>(any)",
    GetBreakpoints="(ScriptDebugger)=>(any)",
    GetChildren="(ScriptDebugger)=>(any)",
    GetDebugId="(ScriptDebugger,number)=>(string)",
    GetDescendants="(ScriptDebugger)=>(any)",
    GetFullName="(ScriptDebugger)=>(string)",
    GetGlobals="(ScriptDebugger)=>(any)",
    GetLocals="(ScriptDebugger,number)=>(any)",
    GetPropertyChangedSignal="(ScriptDebugger,string)=>(any)",
    GetStack="(ScriptDebugger)=>(any)",
    GetUpvalues="(ScriptDebugger,number)=>(any)",
    GetWatchValue="(ScriptDebugger,any)=>(any)",
    GetWatches="(ScriptDebugger)=>(any)",
    IsA="(ScriptDebugger,string)=>(boolean)",
    IsAncestorOf="(ScriptDebugger,any)=>(boolean)",
    IsDebugging="boolean",
    IsDescendantOf="(ScriptDebugger,any)=>(boolean)",
    IsPaused="boolean",
    Name="string",
    Parent="any",
    Remove="(ScriptDebugger)=>()",
    Resume="(ScriptDebugger)=>()",
    Resuming="Event",
    RobloxLocked="boolean",
    Script="any",
    ScriptGuid="string",
    SetAttribute="(ScriptDebugger,string,any)=>()",
    SetBreakpoint="(ScriptDebugger,number)=>(any)",
    SetGlobal="(ScriptDebugger,string,any)=>()",
    SetLocal="(ScriptDebugger,string,any,number)=>()",
    SetUpvalue="(ScriptDebugger,string,any,number)=>()",
    StepIn="(ScriptDebugger)=>()",
    StepOut="(ScriptDebugger)=>()",
    StepOver="(ScriptDebugger)=>()",
    Tags="any",
    WaitForChild="(ScriptDebugger,string,number)=>(any)",
    WatchAdded="Event",
    WatchRemoved="Event",
    archivable="boolean",
    childAdded="Event",
    children="(ScriptDebugger)=>(any)",
    className="string",
    clone="(ScriptDebugger)=>(any)",
    destroy="(ScriptDebugger)=>()",
    findFirstChild="(ScriptDebugger,string,boolean)=>(any)",
    getChildren="(ScriptDebugger)=>(any)",
    isA="(ScriptDebugger,string)=>(boolean)",
    isDescendantOf="(ScriptDebugger,any)=>(boolean)",
    remove="(ScriptDebugger)=>()"}


, ScriptService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ScriptService)=>()",
    Clone="(ScriptService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ScriptService)=>()",
    FindFirstAncestor="(ScriptService,string)=>(any)",
    FindFirstAncestorOfClass="(ScriptService,string)=>(any)",
    FindFirstAncestorWhichIsA="(ScriptService,string)=>(any)",
    FindFirstChild="(ScriptService,string,boolean)=>(any)",
    FindFirstChildOfClass="(ScriptService,string)=>(any)",
    FindFirstChildWhichIsA="(ScriptService,string,boolean)=>(any)",
    GetAttribute="(ScriptService,string)=>(any)",
    GetAttributeChangedSignal="(ScriptService,string)=>(any)",
    GetAttributes="(ScriptService)=>(any)",
    GetChildren="(ScriptService)=>(any)",
    GetDebugId="(ScriptService,number)=>(string)",
    GetDescendants="(ScriptService)=>(any)",
    GetFullName="(ScriptService)=>(string)",
    GetPropertyChangedSignal="(ScriptService,string)=>(any)",
    IsA="(ScriptService,string)=>(boolean)",
    IsAncestorOf="(ScriptService,any)=>(boolean)",
    IsDescendantOf="(ScriptService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(ScriptService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ScriptService,string,any)=>()",
    Tags="any",
    WaitForChild="(ScriptService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ScriptService)=>(any)",
    className="string",
    clone="(ScriptService)=>(any)",
    destroy="(ScriptService)=>()",
    findFirstChild="(ScriptService,string,boolean)=>(any)",
    getChildren="(ScriptService)=>(any)",
    isA="(ScriptService,string)=>(boolean)",
    isDescendantOf="(ScriptService,any)=>(boolean)",
    remove="(ScriptService)=>()"}


, ScrollingFrame={
    AbsolutePosition="Vector2",
    AbsoluteRotation="number",
    AbsoluteSize="Vector2",
    AbsoluteWindowSize="Vector2",
    Active="boolean",
    AncestryChanged="Event",
    AnchorPoint="Vector2",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoLocalize="boolean",
    BackgroundColor="any",
    BackgroundColor3="Color3",
    BackgroundTransparency="number",
    BorderColor="any",
    BorderColor3="Color3",
    BorderMode="any",
    BorderSizePixel="number",
    BottomImage="any",
    CanvasPosition="Vector2",
    CanvasSize="UDim2",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ScrollingFrame)=>()",
    ClearInertialScrolling="(ScrollingFrame)=>()",
    ClipsDescendants="boolean",
    Clone="(ScrollingFrame)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ScrollingFrame)=>()",
    DragBegin="Event",
    DragBeginConnectionCount="number",
    DragStopped="Event",
    DragStoppedConnectionCount="number",
    Draggable="boolean",
    ElasticBehavior="any",
    FindFirstAncestor="(ScrollingFrame,string)=>(any)",
    FindFirstAncestorOfClass="(ScrollingFrame,string)=>(any)",
    FindFirstAncestorWhichIsA="(ScrollingFrame,string)=>(any)",
    FindFirstChild="(ScrollingFrame,string,boolean)=>(any)",
    FindFirstChildOfClass="(ScrollingFrame,string)=>(any)",
    FindFirstChildWhichIsA="(ScrollingFrame,string,boolean)=>(any)",
    GetAttribute="(ScrollingFrame,string)=>(any)",
    GetAttributeChangedSignal="(ScrollingFrame,string)=>(any)",
    GetAttributes="(ScrollingFrame)=>(any)",
    GetChildren="(ScrollingFrame)=>(any)",
    GetDebugId="(ScrollingFrame,number)=>(string)",
    GetDescendants="(ScrollingFrame)=>(any)",
    GetFullName="(ScrollingFrame)=>(string)",
    GetPropertyChangedSignal="(ScrollingFrame,string)=>(any)",
    GetSampledInertialVelocity="(ScrollingFrame)=>(Vector2)",
    HorizontalScrollBarInset="any",
    InputBegan="Event",
    InputChanged="Event",
    InputEnded="Event",
    IsA="(ScrollingFrame,string)=>(boolean)",
    IsAncestorOf="(ScrollingFrame,any)=>(boolean)",
    IsDescendantOf="(ScrollingFrame,any)=>(boolean)",
    IsNotOccluded="boolean",
    LayoutOrder="number",
    Localize="boolean",
    MidImage="any",
    MouseEnter="Event",
    MouseEnterConnectionCount="number",
    MouseLeave="Event",
    MouseLeaveConnectionCount="number",
    MouseMoved="Event",
    MouseMovedConnectionCount="number",
    MouseWheelBackward="Event",
    MouseWheelBackwardConnectionCount="number",
    MouseWheelForward="Event",
    MouseWheelForwardConnectionCount="number",
    Name="string",
    NextSelectionDown="any",
    NextSelectionLeft="any",
    NextSelectionRight="any",
    NextSelectionUp="any",
    Parent="any",
    Position="UDim2",
    Remove="(ScrollingFrame)=>()",
    RobloxLocked="boolean",
    RootLocalizationTable="any",
    Rotation="number",
    ScrollBarImageColor3="Color3",
    ScrollBarImageTransparency="number",
    ScrollBarThickness="number",
    ScrollToTop="(ScrollingFrame)=>()",
    ScrollingDirection="any",
    ScrollingEnabled="boolean",
    Selectable="boolean",
    SelectionGained="Event",
    SelectionImageObject="any",
    SelectionLost="Event",
    SetAttribute="(ScrollingFrame,string,any)=>()",
    Size="UDim2",
    SizeConstraint="any",
    Tags="any",
    TopImage="any",
    TouchLongPress="Event",
    TouchPan="Event",
    TouchPinch="Event",
    TouchRotate="Event",
    TouchSwipe="Event",
    TouchTap="Event",
    Transparency="number",
    TweenPosition="(ScrollingFrame,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSize="(ScrollingFrame,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSizeAndPosition="(ScrollingFrame,UDim2,UDim2,any,any,number,boolean,any)=>(boolean)",
    VerticalScrollBarInset="any",
    VerticalScrollBarPosition="any",
    Visible="boolean",
    WaitForChild="(ScrollingFrame,string,number)=>(any)",
    ZIndex="number",
    archivable="boolean",
    childAdded="Event",
    children="(ScrollingFrame)=>(any)",
    className="string",
    clone="(ScrollingFrame)=>(any)",
    destroy="(ScrollingFrame)=>()",
    findFirstChild="(ScrollingFrame,string,boolean)=>(any)",
    getChildren="(ScrollingFrame)=>(any)",
    isA="(ScrollingFrame,string)=>(boolean)",
    isDescendantOf="(ScrollingFrame,any)=>(boolean)",
    remove="(ScrollingFrame)=>()"}


, Seat={
    AncestryChanged="Event",
    Anchored="boolean",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BackParamA="number",
    BackParamB="number",
    BackSurface="any",
    BackSurfaceInput="any",
    BottomParamA="number",
    BottomParamB="number",
    BottomSurface="any",
    BottomSurfaceInput="any",
    BreakJoints="(Seat)=>()",
    BrickColor="any",
    CFrame="CFrame",
    CanCollide="boolean",
    CanCollideWith="(Seat,any)=>(boolean)",
    CanSetNetworkOwnership="(Seat)=>(any)",
    CastShadow="boolean",
    CenterOfMass="Vector3",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Seat)=>()",
    Clone="(Seat)=>(any)",
    CollisionGroupId="number",
    Color="Color3",
    Color3uint8="any",
    CustomPhysicalProperties="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Seat)=>()",
    Disabled="boolean",
    DraggingV1="boolean",
    Elasticity="number",
    FindFirstAncestor="(Seat,string)=>(any)",
    FindFirstAncestorOfClass="(Seat,string)=>(any)",
    FindFirstAncestorWhichIsA="(Seat,string)=>(any)",
    FindFirstChild="(Seat,string,boolean)=>(any)",
    FindFirstChildOfClass="(Seat,string)=>(any)",
    FindFirstChildWhichIsA="(Seat,string,boolean)=>(any)",
    FormFactor="any",
    Friction="number",
    FrontParamA="number",
    FrontParamB="number",
    FrontSurface="any",
    FrontSurfaceInput="any",
    GetAttribute="(Seat,string)=>(any)",
    GetAttributeChangedSignal="(Seat,string)=>(any)",
    GetAttributes="(Seat)=>(any)",
    GetChildren="(Seat)=>(any)",
    GetConnectedParts="(Seat,boolean)=>(any)",
    GetDebugId="(Seat,number)=>(string)",
    GetDescendants="(Seat)=>(any)",
    GetFullName="(Seat)=>(string)",
    GetJoints="(Seat)=>(any)",
    GetMass="(Seat)=>(number)",
    GetNetworkOwner="(Seat)=>(any)",
    GetNetworkOwnershipAuto="(Seat)=>(boolean)",
    GetPropertyChangedSignal="(Seat,string)=>(any)",
    GetRenderCFrame="(Seat)=>(CFrame)",
    GetRootPart="(Seat)=>(any)",
    GetTouchingParts="(Seat)=>(any)",
    IsA="(Seat,string)=>(boolean)",
    IsAncestorOf="(Seat,any)=>(boolean)",
    IsDescendantOf="(Seat,any)=>(boolean)",
    IsGrounded="(Seat)=>(boolean)",
    LeftParamA="number",
    LeftParamB="number",
    LeftSurface="any",
    LeftSurfaceInput="any",
    LocalSimulationTouched="Event",
    LocalTransparencyModifier="number",
    Locked="boolean",
    MakeJoints="(Seat)=>()",
    Massless="boolean",
    Material="any",
    Name="string",
    NetworkIsSleeping="boolean",
    NetworkOwnerChanged="Event",
    NetworkOwnerV3="any",
    NetworkOwnershipRule="any",
    Occupant="any",
    Orientation="Vector3",
    OutfitChanged="Event",
    Parent="any",
    Position="Vector3",
    ReceiveAge="number",
    Reflectance="number",
    RemoteCreateSeatWeld="Event",
    RemoteDestroySeatWeld="Event",
    Remove="(Seat)=>()",
    Resize="(Seat,any,number)=>(boolean)",
    ResizeIncrement="number",
    ResizeableFaces="any",
    RightParamA="number",
    RightParamB="number",
    RightSurface="any",
    RightSurfaceInput="any",
    RobloxLocked="boolean",
    RootPriority="number",
    RotVelocity="Vector3",
    Rotation="Vector3",
    SetAttribute="(Seat,string,any)=>()",
    SetNetworkOwner="(Seat,any)=>()",
    SetNetworkOwnershipAuto="(Seat)=>()",
    Shape="any",
    Sit="(Seat,any)=>()",
    Size="Vector3",
    SpecificGravity="number",
    StoppedTouching="Event",
    SubtractAsync="(Seat,any,any,any)=>(any)",
    Tags="any",
    TopParamA="number",
    TopParamB="number",
    TopSurface="any",
    TopSurfaceInput="any",
    TouchEnded="Event",
    Touched="Event",
    Transparency="number",
    UnionAsync="(Seat,any,any,any)=>(any)",
    Velocity="Vector3",
    WaitForChild="(Seat,string,number)=>(any)",
    archivable="boolean",
    breakJoints="(Seat)=>()",
    brickColor="any",
    childAdded="Event",
    children="(Seat)=>(any)",
    className="string",
    clone="(Seat)=>(any)",
    destroy="(Seat)=>()",
    findFirstChild="(Seat,string,boolean)=>(any)",
    formFactor="any",
    formFactorRaw="any",
    getChildren="(Seat)=>(any)",
    getMass="(Seat)=>(number)",
    isA="(Seat,string)=>(boolean)",
    isDescendantOf="(Seat,any)=>(boolean)",
    makeJoints="(Seat)=>()",
    remove="(Seat)=>()",
    resize="(Seat,any,number)=>(boolean)",
    shap="any",
    shape="any",
    siz="Vector3",
    size="Vector3",
    touched="Event"}


, NumberRange=any

, Selection={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Selection)=>()",
    Clone="(Selection)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Selection)=>()",
    FindFirstAncestor="(Selection,string)=>(any)",
    FindFirstAncestorOfClass="(Selection,string)=>(any)",
    FindFirstAncestorWhichIsA="(Selection,string)=>(any)",
    FindFirstChild="(Selection,string,boolean)=>(any)",
    FindFirstChildOfClass="(Selection,string)=>(any)",
    FindFirstChildWhichIsA="(Selection,string,boolean)=>(any)",
    Get="(Selection)=>(any)",
    GetAttribute="(Selection,string)=>(any)",
    GetAttributeChangedSignal="(Selection,string)=>(any)",
    GetAttributes="(Selection)=>(any)",
    GetChildren="(Selection)=>(any)",
    GetDebugId="(Selection,number)=>(string)",
    GetDescendants="(Selection)=>(any)",
    GetFullName="(Selection)=>(string)",
    GetPropertyChangedSignal="(Selection,string)=>(any)",
    IsA="(Selection,string)=>(boolean)",
    IsAncestorOf="(Selection,any)=>(boolean)",
    IsDescendantOf="(Selection,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Selection)=>()",
    RobloxLocked="boolean",
    SelectionChanged="Event",
    Set="(Selection,any)=>()",
    SetAttribute="(Selection,string,any)=>()",
    Tags="any",
    WaitForChild="(Selection,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Selection)=>(any)",
    className="string",
    clone="(Selection)=>(any)",
    destroy="(Selection)=>()",
    findFirstChild="(Selection,string,boolean)=>(any)",
    getChildren="(Selection)=>(any)",
    isA="(Selection,string)=>(boolean)",
    isDescendantOf="(Selection,any)=>(boolean)",
    remove="(Selection)=>()"}


, SelectionLasso={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SelectionLasso)=>()",
    Clone="(SelectionLasso)=>(any)",
    Color="any",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SelectionLasso)=>()",
    FindFirstAncestor="(SelectionLasso,string)=>(any)",
    FindFirstAncestorOfClass="(SelectionLasso,string)=>(any)",
    FindFirstAncestorWhichIsA="(SelectionLasso,string)=>(any)",
    FindFirstChild="(SelectionLasso,string,boolean)=>(any)",
    FindFirstChildOfClass="(SelectionLasso,string)=>(any)",
    FindFirstChildWhichIsA="(SelectionLasso,string,boolean)=>(any)",
    GetAttribute="(SelectionLasso,string)=>(any)",
    GetAttributeChangedSignal="(SelectionLasso,string)=>(any)",
    GetAttributes="(SelectionLasso)=>(any)",
    GetChildren="(SelectionLasso)=>(any)",
    GetDebugId="(SelectionLasso,number)=>(string)",
    GetDescendants="(SelectionLasso)=>(any)",
    GetFullName="(SelectionLasso)=>(string)",
    GetPropertyChangedSignal="(SelectionLasso,string)=>(any)",
    Humanoid="any",
    IsA="(SelectionLasso,string)=>(boolean)",
    IsAncestorOf="(SelectionLasso,any)=>(boolean)",
    IsDescendantOf="(SelectionLasso,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(SelectionLasso)=>()",
    RobloxLocked="boolean",
    SetAttribute="(SelectionLasso,string,any)=>()",
    Tags="any",
    Transparency="number",
    Visible="boolean",
    WaitForChild="(SelectionLasso,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(SelectionLasso)=>(any)",
    className="string",
    clone="(SelectionLasso)=>(any)",
    destroy="(SelectionLasso)=>()",
    findFirstChild="(SelectionLasso,string,boolean)=>(any)",
    getChildren="(SelectionLasso)=>(any)",
    isA="(SelectionLasso,string)=>(boolean)",
    isDescendantOf="(SelectionLasso,any)=>(boolean)",
    remove="(SelectionLasso)=>()"}


, SelectionPointLasso={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SelectionPointLasso)=>()",
    Clone="(SelectionPointLasso)=>(any)",
    Color="any",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SelectionPointLasso)=>()",
    FindFirstAncestor="(SelectionPointLasso,string)=>(any)",
    FindFirstAncestorOfClass="(SelectionPointLasso,string)=>(any)",
    FindFirstAncestorWhichIsA="(SelectionPointLasso,string)=>(any)",
    FindFirstChild="(SelectionPointLasso,string,boolean)=>(any)",
    FindFirstChildOfClass="(SelectionPointLasso,string)=>(any)",
    FindFirstChildWhichIsA="(SelectionPointLasso,string,boolean)=>(any)",
    GetAttribute="(SelectionPointLasso,string)=>(any)",
    GetAttributeChangedSignal="(SelectionPointLasso,string)=>(any)",
    GetAttributes="(SelectionPointLasso)=>(any)",
    GetChildren="(SelectionPointLasso)=>(any)",
    GetDebugId="(SelectionPointLasso,number)=>(string)",
    GetDescendants="(SelectionPointLasso)=>(any)",
    GetFullName="(SelectionPointLasso)=>(string)",
    GetPropertyChangedSignal="(SelectionPointLasso,string)=>(any)",
    Humanoid="any",
    IsA="(SelectionPointLasso,string)=>(boolean)",
    IsAncestorOf="(SelectionPointLasso,any)=>(boolean)",
    IsDescendantOf="(SelectionPointLasso,any)=>(boolean)",
    Name="string",
    Parent="any",
    Point="Vector3",
    Remove="(SelectionPointLasso)=>()",
    RobloxLocked="boolean",
    SetAttribute="(SelectionPointLasso,string,any)=>()",
    Tags="any",
    Transparency="number",
    Visible="boolean",
    WaitForChild="(SelectionPointLasso,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(SelectionPointLasso)=>(any)",
    className="string",
    clone="(SelectionPointLasso)=>(any)",
    destroy="(SelectionPointLasso)=>()",
    findFirstChild="(SelectionPointLasso,string,boolean)=>(any)",
    getChildren="(SelectionPointLasso)=>(any)",
    isA="(SelectionPointLasso,string)=>(boolean)",
    isDescendantOf="(SelectionPointLasso,any)=>(boolean)",
    remove="(SelectionPointLasso)=>()"}


, ServerReplicator={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ServerReplicator)=>()",
    Clone="(ServerReplicator)=>(any)",
    CloseConnection="(ServerReplicator)=>()",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ServerReplicator)=>()",
    FindFirstAncestor="(ServerReplicator,string)=>(any)",
    FindFirstAncestorOfClass="(ServerReplicator,string)=>(any)",
    FindFirstAncestorWhichIsA="(ServerReplicator,string)=>(any)",
    FindFirstChild="(ServerReplicator,string,boolean)=>(any)",
    FindFirstChildOfClass="(ServerReplicator,string)=>(any)",
    FindFirstChildWhichIsA="(ServerReplicator,string,boolean)=>(any)",
    GetAttribute="(ServerReplicator,string)=>(any)",
    GetAttributeChangedSignal="(ServerReplicator,string)=>(any)",
    GetAttributes="(ServerReplicator)=>(any)",
    GetChildren="(ServerReplicator)=>(any)",
    GetDebugId="(ServerReplicator,number)=>(string)",
    GetDescendants="(ServerReplicator)=>(any)",
    GetFullName="(ServerReplicator)=>(string)",
    GetPlayer="(ServerReplicator)=>(any)",
    GetPropertyChangedSignal="(ServerReplicator,string)=>(any)",
    GetRakStatsString="(ServerReplicator,number)=>(string)",
    IsA="(ServerReplicator,string)=>(boolean)",
    IsAncestorOf="(ServerReplicator,any)=>(boolean)",
    IsDescendantOf="(ServerReplicator,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(ServerReplicator)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ServerReplicator,string,any)=>()",
    Tags="any",
    WaitForChild="(ServerReplicator,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ServerReplicator)=>(any)",
    className="string",
    clone="(ServerReplicator)=>(any)",
    destroy="(ServerReplicator)=>()",
    findFirstChild="(ServerReplicator,string,boolean)=>(any)",
    getChildren="(ServerReplicator)=>(any)",
    isA="(ServerReplicator,string)=>(boolean)",
    isDescendantOf="(ServerReplicator,any)=>(boolean)",
    remove="(ServerReplicator)=>()"}


, ViewportFrame={
    AbsolutePosition="Vector2",
    AbsoluteRotation="number",
    AbsoluteSize="Vector2",
    Active="boolean",
    Ambient="Color3",
    AncestryChanged="Event",
    AnchorPoint="Vector2",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoLocalize="boolean",
    BackgroundColor="any",
    BackgroundColor3="Color3",
    BackgroundTransparency="number",
    BorderColor="any",
    BorderColor3="Color3",
    BorderMode="any",
    BorderSizePixel="number",
    CameraCFrame="CFrame",
    CameraFieldOfView="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ViewportFrame)=>()",
    ClipsDescendants="boolean",
    Clone="(ViewportFrame)=>(any)",
    CurrentCamera="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ViewportFrame)=>()",
    DragBegin="Event",
    DragBeginConnectionCount="number",
    DragStopped="Event",
    DragStoppedConnectionCount="number",
    Draggable="boolean",
    FindFirstAncestor="(ViewportFrame,string)=>(any)",
    FindFirstAncestorOfClass="(ViewportFrame,string)=>(any)",
    FindFirstAncestorWhichIsA="(ViewportFrame,string)=>(any)",
    FindFirstChild="(ViewportFrame,string,boolean)=>(any)",
    FindFirstChildOfClass="(ViewportFrame,string)=>(any)",
    FindFirstChildWhichIsA="(ViewportFrame,string,boolean)=>(any)",
    GetAttribute="(ViewportFrame,string)=>(any)",
    GetAttributeChangedSignal="(ViewportFrame,string)=>(any)",
    GetAttributes="(ViewportFrame)=>(any)",
    GetChildren="(ViewportFrame)=>(any)",
    GetDebugId="(ViewportFrame,number)=>(string)",
    GetDescendants="(ViewportFrame)=>(any)",
    GetFullName="(ViewportFrame)=>(string)",
    GetPropertyChangedSignal="(ViewportFrame,string)=>(any)",
    ImageColor3="Color3",
    ImageTransparency="number",
    InputBegan="Event",
    InputChanged="Event",
    InputEnded="Event",
    IsA="(ViewportFrame,string)=>(boolean)",
    IsAncestorOf="(ViewportFrame,any)=>(boolean)",
    IsDescendantOf="(ViewportFrame,any)=>(boolean)",
    IsNotOccluded="boolean",
    LayoutOrder="number",
    LightColor="Color3",
    LightDirection="Vector3",
    Localize="boolean",
    MouseEnter="Event",
    MouseEnterConnectionCount="number",
    MouseLeave="Event",
    MouseLeaveConnectionCount="number",
    MouseMoved="Event",
    MouseMovedConnectionCount="number",
    MouseWheelBackward="Event",
    MouseWheelBackwardConnectionCount="number",
    MouseWheelForward="Event",
    MouseWheelForwardConnectionCount="number",
    Name="string",
    NextSelectionDown="any",
    NextSelectionLeft="any",
    NextSelectionRight="any",
    NextSelectionUp="any",
    Parent="any",
    Position="UDim2",
    Remove="(ViewportFrame)=>()",
    RobloxLocked="boolean",
    RootLocalizationTable="any",
    Rotation="number",
    Selectable="boolean",
    SelectionGained="Event",
    SelectionImageObject="any",
    SelectionLost="Event",
    SetAttribute="(ViewportFrame,string,any)=>()",
    Size="UDim2",
    SizeConstraint="any",
    Tags="any",
    TouchLongPress="Event",
    TouchPan="Event",
    TouchPinch="Event",
    TouchRotate="Event",
    TouchSwipe="Event",
    TouchTap="Event",
    Transparency="number",
    TweenPosition="(ViewportFrame,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSize="(ViewportFrame,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSizeAndPosition="(ViewportFrame,UDim2,UDim2,any,any,number,boolean,any)=>(boolean)",
    Visible="boolean",
    WaitForChild="(ViewportFrame,string,number)=>(any)",
    ZIndex="number",
    archivable="boolean",
    childAdded="Event",
    children="(ViewportFrame)=>(any)",
    className="string",
    clone="(ViewportFrame)=>(any)",
    destroy="(ViewportFrame)=>()",
    findFirstChild="(ViewportFrame,string,boolean)=>(any)",
    getChildren="(ViewportFrame)=>(any)",
    isA="(ViewportFrame,string)=>(boolean)",
    isDescendantOf="(ViewportFrame,any)=>(boolean)",
    remove="(ViewportFrame)=>()"}


, ServerScriptService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ServerScriptService)=>()",
    Clone="(ServerScriptService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ServerScriptService)=>()",
    FindFirstAncestor="(ServerScriptService,string)=>(any)",
    FindFirstAncestorOfClass="(ServerScriptService,string)=>(any)",
    FindFirstAncestorWhichIsA="(ServerScriptService,string)=>(any)",
    FindFirstChild="(ServerScriptService,string,boolean)=>(any)",
    FindFirstChildOfClass="(ServerScriptService,string)=>(any)",
    FindFirstChildWhichIsA="(ServerScriptService,string,boolean)=>(any)",
    GetAttribute="(ServerScriptService,string)=>(any)",
    GetAttributeChangedSignal="(ServerScriptService,string)=>(any)",
    GetAttributes="(ServerScriptService)=>(any)",
    GetChildren="(ServerScriptService)=>(any)",
    GetDebugId="(ServerScriptService,number)=>(string)",
    GetDescendants="(ServerScriptService)=>(any)",
    GetFullName="(ServerScriptService)=>(string)",
    GetPropertyChangedSignal="(ServerScriptService,string)=>(any)",
    IsA="(ServerScriptService,string)=>(boolean)",
    IsAncestorOf="(ServerScriptService,any)=>(boolean)",
    IsDescendantOf="(ServerScriptService,any)=>(boolean)",
    LoadStringEnabled="boolean",
    Name="string",
    Parent="any",
    Remove="(ServerScriptService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ServerScriptService,string,any)=>()",
    Tags="any",
    WaitForChild="(ServerScriptService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ServerScriptService)=>(any)",
    className="string",
    clone="(ServerScriptService)=>(any)",
    destroy="(ServerScriptService)=>()",
    findFirstChild="(ServerScriptService,string,boolean)=>(any)",
    getChildren="(ServerScriptService)=>(any)",
    isA="(ServerScriptService,string)=>(boolean)",
    isDescendantOf="(ServerScriptService,any)=>(boolean)",
    remove="(ServerScriptService)=>()"}


, ServerStorage={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ServerStorage)=>()",
    Clone="(ServerStorage)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ServerStorage)=>()",
    FindFirstAncestor="(ServerStorage,string)=>(any)",
    FindFirstAncestorOfClass="(ServerStorage,string)=>(any)",
    FindFirstAncestorWhichIsA="(ServerStorage,string)=>(any)",
    FindFirstChild="(ServerStorage,string,boolean)=>(any)",
    FindFirstChildOfClass="(ServerStorage,string)=>(any)",
    FindFirstChildWhichIsA="(ServerStorage,string,boolean)=>(any)",
    GetAttribute="(ServerStorage,string)=>(any)",
    GetAttributeChangedSignal="(ServerStorage,string)=>(any)",
    GetAttributes="(ServerStorage)=>(any)",
    GetChildren="(ServerStorage)=>(any)",
    GetDebugId="(ServerStorage,number)=>(string)",
    GetDescendants="(ServerStorage)=>(any)",
    GetFullName="(ServerStorage)=>(string)",
    GetPropertyChangedSignal="(ServerStorage,string)=>(any)",
    IsA="(ServerStorage,string)=>(boolean)",
    IsAncestorOf="(ServerStorage,any)=>(boolean)",
    IsDescendantOf="(ServerStorage,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(ServerStorage)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ServerStorage,string,any)=>()",
    Tags="any",
    WaitForChild="(ServerStorage,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ServerStorage)=>(any)",
    className="string",
    clone="(ServerStorage)=>(any)",
    destroy="(ServerStorage)=>()",
    findFirstChild="(ServerStorage,string,boolean)=>(any)",
    getChildren="(ServerStorage)=>(any)",
    isA="(ServerStorage,string)=>(boolean)",
    isDescendantOf="(ServerStorage,any)=>(boolean)",
    remove="(ServerStorage)=>()"}


, ServiceProvider={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ServiceProvider)=>()",
    Clone="(ServiceProvider)=>(any)",
    Close="Event",
    CloseLate="Event",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ServiceProvider)=>()",
    FindFirstAncestor="(ServiceProvider,string)=>(any)",
    FindFirstAncestorOfClass="(ServiceProvider,string)=>(any)",
    FindFirstAncestorWhichIsA="(ServiceProvider,string)=>(any)",
    FindFirstChild="(ServiceProvider,string,boolean)=>(any)",
    FindFirstChildOfClass="(ServiceProvider,string)=>(any)",
    FindFirstChildWhichIsA="(ServiceProvider,string,boolean)=>(any)",
    FindService="(ServiceProvider,string)=>(any)",
    GetAttribute="(ServiceProvider,string)=>(any)",
    GetAttributeChangedSignal="(ServiceProvider,string)=>(any)",
    GetAttributes="(ServiceProvider)=>(any)",
    GetChildren="(ServiceProvider)=>(any)",
    GetDebugId="(ServiceProvider,number)=>(string)",
    GetDescendants="(ServiceProvider)=>(any)",
    GetFullName="(ServiceProvider)=>(string)",
    GetPropertyChangedSignal="(ServiceProvider,string)=>(any)",
    GetService="(ServiceProvider,string)=>(any)",
    IsA="(ServiceProvider,string)=>(boolean)",
    IsAncestorOf="(ServiceProvider,any)=>(boolean)",
    IsDescendantOf="(ServiceProvider,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(ServiceProvider)=>()",
    RobloxLocked="boolean",
    ServiceAdded="Event",
    ServiceRemoving="Event",
    SetAttribute="(ServiceProvider,string,any)=>()",
    Tags="any",
    WaitForChild="(ServiceProvider,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ServiceProvider)=>(any)",
    className="string",
    clone="(ServiceProvider)=>(any)",
    destroy="(ServiceProvider)=>()",
    findFirstChild="(ServiceProvider,string,boolean)=>(any)",
    getChildren="(ServiceProvider)=>(any)",
    getService="(ServiceProvider,string)=>(any)",
    isA="(ServiceProvider,string)=>(boolean)",
    isDescendantOf="(ServiceProvider,any)=>(boolean)",
    remove="(ServiceProvider)=>()",
    service="(ServiceProvider,string)=>(any)"}


, Vector3int16=Vector3

, Shirt={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Shirt)=>()",
    Clone="(Shirt)=>(any)",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Shirt)=>()",
    FindFirstAncestor="(Shirt,string)=>(any)",
    FindFirstAncestorOfClass="(Shirt,string)=>(any)",
    FindFirstAncestorWhichIsA="(Shirt,string)=>(any)",
    FindFirstChild="(Shirt,string,boolean)=>(any)",
    FindFirstChildOfClass="(Shirt,string)=>(any)",
    FindFirstChildWhichIsA="(Shirt,string,boolean)=>(any)",
    GetAttribute="(Shirt,string)=>(any)",
    GetAttributeChangedSignal="(Shirt,string)=>(any)",
    GetAttributes="(Shirt)=>(any)",
    GetChildren="(Shirt)=>(any)",
    GetDebugId="(Shirt,number)=>(string)",
    GetDescendants="(Shirt)=>(any)",
    GetFullName="(Shirt)=>(string)",
    GetPropertyChangedSignal="(Shirt,string)=>(any)",
    IsA="(Shirt,string)=>(boolean)",
    IsAncestorOf="(Shirt,any)=>(boolean)",
    IsDescendantOf="(Shirt,any)=>(boolean)",
    Name="string",
    Outfit1="any",
    Outfit2="any",
    Parent="any",
    Remove="(Shirt)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Shirt,string,any)=>()",
    ShirtTemplate="any",
    Tags="any",
    WaitForChild="(Shirt,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Shirt)=>(any)",
    className="string",
    clone="(Shirt)=>(any)",
    destroy="(Shirt)=>()",
    findFirstChild="(Shirt,string,boolean)=>(any)",
    getChildren="(Shirt)=>(any)",
    isA="(Shirt,string)=>(boolean)",
    isDescendantOf="(Shirt,any)=>(boolean)",
    remove="(Shirt)=>()"}


, SkateboardController={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AxisChanged="Event",
    BindButton="(SkateboardController,any,string)=>()",
    ButtonChanged="Event",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SkateboardController)=>()",
    Clone="(SkateboardController)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SkateboardController)=>()",
    FindFirstAncestor="(SkateboardController,string)=>(any)",
    FindFirstAncestorOfClass="(SkateboardController,string)=>(any)",
    FindFirstAncestorWhichIsA="(SkateboardController,string)=>(any)",
    FindFirstChild="(SkateboardController,string,boolean)=>(any)",
    FindFirstChildOfClass="(SkateboardController,string)=>(any)",
    FindFirstChildWhichIsA="(SkateboardController,string,boolean)=>(any)",
    GetAttribute="(SkateboardController,string)=>(any)",
    GetAttributeChangedSignal="(SkateboardController,string)=>(any)",
    GetAttributes="(SkateboardController)=>(any)",
    GetButton="(SkateboardController,any)=>(boolean)",
    GetChildren="(SkateboardController)=>(any)",
    GetDebugId="(SkateboardController,number)=>(string)",
    GetDescendants="(SkateboardController)=>(any)",
    GetFullName="(SkateboardController)=>(string)",
    GetPropertyChangedSignal="(SkateboardController,string)=>(any)",
    IsA="(SkateboardController,string)=>(boolean)",
    IsAncestorOf="(SkateboardController,any)=>(boolean)",
    IsDescendantOf="(SkateboardController,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(SkateboardController)=>()",
    RobloxLocked="boolean",
    SetAttribute="(SkateboardController,string,any)=>()",
    Steer="number",
    Tags="any",
    Throttle="number",
    UnbindButton="(SkateboardController,any)=>()",
    WaitForChild="(SkateboardController,string,number)=>(any)",
    archivable="boolean",
    bindButton="(SkateboardController,any,string)=>()",
    childAdded="Event",
    children="(SkateboardController)=>(any)",
    className="string",
    clone="(SkateboardController)=>(any)",
    destroy="(SkateboardController)=>()",
    findFirstChild="(SkateboardController,string,boolean)=>(any)",
    getButton="(SkateboardController,any)=>(boolean)",
    getChildren="(SkateboardController)=>(any)",
    isA="(SkateboardController,string)=>(boolean)",
    isDescendantOf="(SkateboardController,any)=>(boolean)",
    remove="(SkateboardController)=>()"}


, SkateboardPlatform={
    AncestryChanged="Event",
    Anchored="boolean",
    ApplySpecificImpulse="(SkateboardPlatform,Vector3)=>()",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BackParamA="number",
    BackParamB="number",
    BackSurface="any",
    BackSurfaceInput="any",
    BottomParamA="number",
    BottomParamB="number",
    BottomSurface="any",
    BottomSurfaceInput="any",
    BreakJoints="(SkateboardPlatform)=>()",
    BrickColor="any",
    CFrame="CFrame",
    CanCollide="boolean",
    CanCollideWith="(SkateboardPlatform,any)=>(boolean)",
    CanSetNetworkOwnership="(SkateboardPlatform)=>(any)",
    CastShadow="boolean",
    CenterOfMass="Vector3",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SkateboardPlatform)=>()",
    Clone="(SkateboardPlatform)=>(any)",
    CollisionGroupId="number",
    Color="Color3",
    Color3uint8="any",
    Controller="any",
    ControllingHumanoid="any",
    CustomPhysicalProperties="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SkateboardPlatform)=>()",
    DraggingV1="boolean",
    Elasticity="number",
    Equipped="Event",
    FindFirstAncestor="(SkateboardPlatform,string)=>(any)",
    FindFirstAncestorOfClass="(SkateboardPlatform,string)=>(any)",
    FindFirstAncestorWhichIsA="(SkateboardPlatform,string)=>(any)",
    FindFirstChild="(SkateboardPlatform,string,boolean)=>(any)",
    FindFirstChildOfClass="(SkateboardPlatform,string)=>(any)",
    FindFirstChildWhichIsA="(SkateboardPlatform,string,boolean)=>(any)",
    FormFactor="any",
    Friction="number",
    FrontParamA="number",
    FrontParamB="number",
    FrontSurface="any",
    FrontSurfaceInput="any",
    GetAttribute="(SkateboardPlatform,string)=>(any)",
    GetAttributeChangedSignal="(SkateboardPlatform,string)=>(any)",
    GetAttributes="(SkateboardPlatform)=>(any)",
    GetChildren="(SkateboardPlatform)=>(any)",
    GetConnectedParts="(SkateboardPlatform,boolean)=>(any)",
    GetDebugId="(SkateboardPlatform,number)=>(string)",
    GetDescendants="(SkateboardPlatform)=>(any)",
    GetFullName="(SkateboardPlatform)=>(string)",
    GetJoints="(SkateboardPlatform)=>(any)",
    GetMass="(SkateboardPlatform)=>(number)",
    GetNetworkOwner="(SkateboardPlatform)=>(any)",
    GetNetworkOwnershipAuto="(SkateboardPlatform)=>(boolean)",
    GetPropertyChangedSignal="(SkateboardPlatform,string)=>(any)",
    GetRenderCFrame="(SkateboardPlatform)=>(CFrame)",
    GetRootPart="(SkateboardPlatform)=>(any)",
    GetTouchingParts="(SkateboardPlatform)=>(any)",
    IsA="(SkateboardPlatform,string)=>(boolean)",
    IsAncestorOf="(SkateboardPlatform,any)=>(boolean)",
    IsDescendantOf="(SkateboardPlatform,any)=>(boolean)",
    IsGrounded="(SkateboardPlatform)=>(boolean)",
    LeftParamA="number",
    LeftParamB="number",
    LeftSurface="any",
    LeftSurfaceInput="any",
    LocalSimulationTouched="Event",
    LocalTransparencyModifier="number",
    Locked="boolean",
    MakeJoints="(SkateboardPlatform)=>()",
    Massless="boolean",
    Material="any",
    MoveState="any",
    MoveStateChanged="Event",
    Name="string",
    NetworkIsSleeping="boolean",
    NetworkOwnerChanged="Event",
    NetworkOwnerV3="any",
    NetworkOwnershipRule="any",
    Orientation="Vector3",
    OutfitChanged="Event",
    Parent="any",
    Position="Vector3",
    ReceiveAge="number",
    Reflectance="number",
    RemoteCreateMotor6D="Event",
    RemoteDestroyMotor6D="Event",
    Remove="(SkateboardPlatform)=>()",
    Resize="(SkateboardPlatform,any,number)=>(boolean)",
    ResizeIncrement="number",
    ResizeableFaces="any",
    RightParamA="number",
    RightParamB="number",
    RightSurface="any",
    RightSurfaceInput="any",
    RobloxLocked="boolean",
    RootPriority="number",
    RotVelocity="Vector3",
    Rotation="Vector3",
    SetAttribute="(SkateboardPlatform,string,any)=>()",
    SetNetworkOwner="(SkateboardPlatform,any)=>()",
    SetNetworkOwnershipAuto="(SkateboardPlatform)=>()",
    Shape="any",
    Size="Vector3",
    SpecificGravity="number",
    Steer="number",
    StickyWheels="boolean",
    StoppedTouching="Event",
    SubtractAsync="(SkateboardPlatform,any,any,any)=>(any)",
    Tags="any",
    Throttle="number",
    TopParamA="number",
    TopParamB="number",
    TopSurface="any",
    TopSurfaceInput="any",
    TouchEnded="Event",
    Touched="Event",
    Transparency="number",
    Unequipped="Event",
    UnionAsync="(SkateboardPlatform,any,any,any)=>(any)",
    Velocity="Vector3",
    WaitForChild="(SkateboardPlatform,string,number)=>(any)",
    archivable="boolean",
    breakJoints="(SkateboardPlatform)=>()",
    brickColor="any",
    childAdded="Event",
    children="(SkateboardPlatform)=>(any)",
    className="string",
    clone="(SkateboardPlatform)=>(any)",
    destroy="(SkateboardPlatform)=>()",
    equipped="Event",
    findFirstChild="(SkateboardPlatform,string,boolean)=>(any)",
    formFactor="any",
    formFactorRaw="any",
    getChildren="(SkateboardPlatform)=>(any)",
    getMass="(SkateboardPlatform)=>(number)",
    isA="(SkateboardPlatform,string)=>(boolean)",
    isDescendantOf="(SkateboardPlatform,any)=>(boolean)",
    makeJoints="(SkateboardPlatform)=>()",
    remove="(SkateboardPlatform)=>()",
    resize="(SkateboardPlatform,any,number)=>(boolean)",
    shap="any",
    shape="any",
    siz="Vector3",
    size="Vector3",
    touched="Event",
    unequipped="Event"}


, Skin={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Skin)=>()",
    Clone="(Skin)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Skin)=>()",
    FindFirstAncestor="(Skin,string)=>(any)",
    FindFirstAncestorOfClass="(Skin,string)=>(any)",
    FindFirstAncestorWhichIsA="(Skin,string)=>(any)",
    FindFirstChild="(Skin,string,boolean)=>(any)",
    FindFirstChildOfClass="(Skin,string)=>(any)",
    FindFirstChildWhichIsA="(Skin,string,boolean)=>(any)",
    GetAttribute="(Skin,string)=>(any)",
    GetAttributeChangedSignal="(Skin,string)=>(any)",
    GetAttributes="(Skin)=>(any)",
    GetChildren="(Skin)=>(any)",
    GetDebugId="(Skin,number)=>(string)",
    GetDescendants="(Skin)=>(any)",
    GetFullName="(Skin)=>(string)",
    GetPropertyChangedSignal="(Skin,string)=>(any)",
    IsA="(Skin,string)=>(boolean)",
    IsAncestorOf="(Skin,any)=>(boolean)",
    IsDescendantOf="(Skin,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Skin)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Skin,string,any)=>()",
    SkinColor="any",
    Tags="any",
    WaitForChild="(Skin,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Skin)=>(any)",
    className="string",
    clone="(Skin)=>(any)",
    destroy="(Skin)=>()",
    findFirstChild="(Skin,string,boolean)=>(any)",
    getChildren="(Skin)=>(any)",
    isA="(Skin,string)=>(boolean)",
    isDescendantOf="(Skin,any)=>(boolean)",
    remove="(Skin)=>()"}


, Smoke={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Smoke)=>()",
    Clone="(Smoke)=>(any)",
    Color="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Smoke)=>()",
    Enabled="boolean",
    FindFirstAncestor="(Smoke,string)=>(any)",
    FindFirstAncestorOfClass="(Smoke,string)=>(any)",
    FindFirstAncestorWhichIsA="(Smoke,string)=>(any)",
    FindFirstChild="(Smoke,string,boolean)=>(any)",
    FindFirstChildOfClass="(Smoke,string)=>(any)",
    FindFirstChildWhichIsA="(Smoke,string,boolean)=>(any)",
    GetAttribute="(Smoke,string)=>(any)",
    GetAttributeChangedSignal="(Smoke,string)=>(any)",
    GetAttributes="(Smoke)=>(any)",
    GetChildren="(Smoke)=>(any)",
    GetDebugId="(Smoke,number)=>(string)",
    GetDescendants="(Smoke)=>(any)",
    GetFullName="(Smoke)=>(string)",
    GetPropertyChangedSignal="(Smoke,string)=>(any)",
    IsA="(Smoke,string)=>(boolean)",
    IsAncestorOf="(Smoke,any)=>(boolean)",
    IsDescendantOf="(Smoke,any)=>(boolean)",
    Name="string",
    Opacity="number",
    Parent="any",
    Remove="(Smoke)=>()",
    RiseVelocity="number",
    RobloxLocked="boolean",
    SetAttribute="(Smoke,string,any)=>()",
    Size="number",
    Tags="any",
    WaitForChild="(Smoke,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Smoke)=>(any)",
    className="string",
    clone="(Smoke)=>(any)",
    destroy="(Smoke)=>()",
    findFirstChild="(Smoke,string,boolean)=>(any)",
    getChildren="(Smoke)=>(any)",
    isA="(Smoke,string)=>(boolean)",
    isDescendantOf="(Smoke,any)=>(boolean)",
    opacity_xml="number",
    remove="(Smoke)=>()",
    riseVelocity_xml="number",
    size_xml="number"}


, Snap={
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    C0="CFrame",
    C1="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Snap)=>()",
    Clone="(Snap)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Snap)=>()",
    Enabled="boolean",
    FindFirstAncestor="(Snap,string)=>(any)",
    FindFirstAncestorOfClass="(Snap,string)=>(any)",
    FindFirstAncestorWhichIsA="(Snap,string)=>(any)",
    FindFirstChild="(Snap,string,boolean)=>(any)",
    FindFirstChildOfClass="(Snap,string)=>(any)",
    FindFirstChildWhichIsA="(Snap,string,boolean)=>(any)",
    GetAttribute="(Snap,string)=>(any)",
    GetAttributeChangedSignal="(Snap,string)=>(any)",
    GetAttributes="(Snap)=>(any)",
    GetChildren="(Snap)=>(any)",
    GetDebugId="(Snap,number)=>(string)",
    GetDescendants="(Snap)=>(any)",
    GetFullName="(Snap)=>(string)",
    GetPropertyChangedSignal="(Snap,string)=>(any)",
    IsA="(Snap,string)=>(boolean)",
    IsAncestorOf="(Snap,any)=>(boolean)",
    IsAutoJoint="boolean",
    IsDescendantOf="(Snap,any)=>(boolean)",
    Name="string",
    Parent="any",
    Part0="any",
    Part1="any",
    Remove="(Snap)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Snap,string,any)=>()",
    Tags="any",
    WaitForChild="(Snap,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Snap)=>(any)",
    className="string",
    clone="(Snap)=>(any)",
    destroy="(Snap)=>()",
    findFirstChild="(Snap,string,boolean)=>(any)",
    getChildren="(Snap)=>(any)",
    isA="(Snap,string)=>(boolean)",
    isDescendantOf="(Snap,any)=>(boolean)",
    part1="any",
    remove="(Snap)=>()"}


, Sound={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Sound)=>()",
    Clone="(Sound)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Sound)=>()",
    DidLoop="Event",
    EmitterSize="number",
    Ended="Event",
    FindFirstAncestor="(Sound,string)=>(any)",
    FindFirstAncestorOfClass="(Sound,string)=>(any)",
    FindFirstAncestorWhichIsA="(Sound,string)=>(any)",
    FindFirstChild="(Sound,string,boolean)=>(any)",
    FindFirstChildOfClass="(Sound,string)=>(any)",
    FindFirstChildWhichIsA="(Sound,string,boolean)=>(any)",
    GetAttribute="(Sound,string)=>(any)",
    GetAttributeChangedSignal="(Sound,string)=>(any)",
    GetAttributes="(Sound)=>(any)",
    GetChildren="(Sound)=>(any)",
    GetDebugId="(Sound,number)=>(string)",
    GetDescendants="(Sound)=>(any)",
    GetFullName="(Sound)=>(string)",
    GetPropertyChangedSignal="(Sound,string)=>(any)",
    IsA="(Sound,string)=>(boolean)",
    IsAncestorOf="(Sound,any)=>(boolean)",
    IsDescendantOf="(Sound,any)=>(boolean)",
    IsLoaded="boolean",
    IsPaused="boolean",
    IsPlaying="boolean",
    Loaded="Event",
    Looped="boolean",
    MaxDistance="number",
    MinDistance="number",
    Name="string",
    Parent="any",
    Pause="(Sound)=>()",
    Paused="Event",
    Pitch="number",
    Play="(Sound)=>()",
    PlayOnRemove="boolean",
    PlaybackLoudness="number",
    PlaybackSpeed="number",
    Played="Event",
    Playing="boolean",
    PlayingReplicator="boolean",
    PlayingUpdatedFromClient="Event",
    PlayingUpdatedFromServer="Event",
    Remove="(Sound)=>()",
    Resume="(Sound)=>()",
    Resumed="Event",
    RobloxLocked="boolean",
    RollOffMode="any",
    SetAttribute="(Sound,string,any)=>()",
    SoundGroup="any",
    SoundId="any",
    Stop="(Sound)=>()",
    Stopped="Event",
    Tags="any",
    TimeLength="number",
    TimePosition="number",
    TimePositionReplicator="number",
    TimePositionUpdatedFromClient="Event",
    TimePositionUpdatedFromServer="Event",
    Volume="number",
    WaitForChild="(Sound,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Sound)=>(any)",
    className="string",
    clone="(Sound)=>(any)",
    destroy="(Sound)=>()",
    findFirstChild="(Sound,string,boolean)=>(any)",
    getChildren="(Sound)=>(any)",
    isA="(Sound,string)=>(boolean)",
    isDescendantOf="(Sound,any)=>(boolean)",
    isPlaying="boolean",
    pause="(Sound)=>()",
    play="(Sound)=>()",
    playbackActionSync="Event",
    remove="(Sound)=>()",
    stop="(Sound)=>()",
    xmlRead_MaxDistance_3="number",
    xmlRead_MinDistance_3="number"}


, Tool={
    Activate="(Tool)=>()",
    Activated="Event",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CanBeDropped="boolean",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Tool)=>()",
    Clone="(Tool)=>(any)",
    DataCost="number",
    Deactivate="(Tool)=>()",
    Deactivated="Event",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Tool)=>()",
    Enabled="boolean",
    Equipped="Event",
    FindFirstAncestor="(Tool,string)=>(any)",
    FindFirstAncestorOfClass="(Tool,string)=>(any)",
    FindFirstAncestorWhichIsA="(Tool,string)=>(any)",
    FindFirstChild="(Tool,string,boolean)=>(any)",
    FindFirstChildOfClass="(Tool,string)=>(any)",
    FindFirstChildWhichIsA="(Tool,string,boolean)=>(any)",
    GetAttribute="(Tool,string)=>(any)",
    GetAttributeChangedSignal="(Tool,string)=>(any)",
    GetAttributes="(Tool)=>(any)",
    GetChildren="(Tool)=>(any)",
    GetDebugId="(Tool,number)=>(string)",
    GetDescendants="(Tool)=>(any)",
    GetFullName="(Tool)=>(string)",
    GetPropertyChangedSignal="(Tool,string)=>(any)",
    Grip="CFrame",
    GripForward="Vector3",
    GripPos="Vector3",
    GripRight="Vector3",
    GripUp="Vector3",
    IsA="(Tool,string)=>(boolean)",
    IsAncestorOf="(Tool,any)=>(boolean)",
    IsDescendantOf="(Tool,any)=>(boolean)",
    ManualActivationOnly="boolean",
    Name="string",
    Parent="any",
    Remove="(Tool)=>()",
    RequiresHandle="boolean",
    RobloxLocked="boolean",
    SetAttribute="(Tool,string,any)=>()",
    Tags="any",
    TextureId="any",
    ToolTip="string",
    Unequipped="Event",
    WaitForChild="(Tool,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Tool)=>(any)",
    className="string",
    clone="(Tool)=>(any)",
    destroy="(Tool)=>()",
    findFirstChild="(Tool,string,boolean)=>(any)",
    getChildren="(Tool)=>(any)",
    isA="(Tool,string)=>(boolean)",
    isDescendantOf="(Tool,any)=>(boolean)",
    remove="(Tool)=>()"}


, SoundGroup={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SoundGroup)=>()",
    Clone="(SoundGroup)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SoundGroup)=>()",
    FindFirstAncestor="(SoundGroup,string)=>(any)",
    FindFirstAncestorOfClass="(SoundGroup,string)=>(any)",
    FindFirstAncestorWhichIsA="(SoundGroup,string)=>(any)",
    FindFirstChild="(SoundGroup,string,boolean)=>(any)",
    FindFirstChildOfClass="(SoundGroup,string)=>(any)",
    FindFirstChildWhichIsA="(SoundGroup,string,boolean)=>(any)",
    GetAttribute="(SoundGroup,string)=>(any)",
    GetAttributeChangedSignal="(SoundGroup,string)=>(any)",
    GetAttributes="(SoundGroup)=>(any)",
    GetChildren="(SoundGroup)=>(any)",
    GetDebugId="(SoundGroup,number)=>(string)",
    GetDescendants="(SoundGroup)=>(any)",
    GetFullName="(SoundGroup)=>(string)",
    GetPropertyChangedSignal="(SoundGroup,string)=>(any)",
    IsA="(SoundGroup,string)=>(boolean)",
    IsAncestorOf="(SoundGroup,any)=>(boolean)",
    IsDescendantOf="(SoundGroup,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(SoundGroup)=>()",
    RobloxLocked="boolean",
    SetAttribute="(SoundGroup,string,any)=>()",
    Tags="any",
    Volume="number",
    WaitForChild="(SoundGroup,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(SoundGroup)=>(any)",
    className="string",
    clone="(SoundGroup)=>(any)",
    destroy="(SoundGroup)=>()",
    findFirstChild="(SoundGroup,string,boolean)=>(any)",
    getChildren="(SoundGroup)=>(any)",
    isA="(SoundGroup,string)=>(boolean)",
    isDescendantOf="(SoundGroup,any)=>(boolean)",
    remove="(SoundGroup)=>()"}


, SoundService={
    AmbientReverb="any",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BeginRecording="(SoundService)=>(boolean)",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SoundService)=>()",
    Clone="(SoundService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SoundService)=>()",
    DistanceFactor="number",
    DopplerScale="number",
    EndRecording="(SoundService)=>(any)",
    FindFirstAncestor="(SoundService,string)=>(any)",
    FindFirstAncestorOfClass="(SoundService,string)=>(any)",
    FindFirstAncestorWhichIsA="(SoundService,string)=>(any)",
    FindFirstChild="(SoundService,string,boolean)=>(any)",
    FindFirstChildOfClass="(SoundService,string)=>(any)",
    FindFirstChildWhichIsA="(SoundService,string,boolean)=>(any)",
    GetAttribute="(SoundService,string)=>(any)",
    GetAttributeChangedSignal="(SoundService,string)=>(any)",
    GetAttributes="(SoundService)=>(any)",
    GetChildren="(SoundService)=>(any)",
    GetDebugId="(SoundService,number)=>(string)",
    GetDescendants="(SoundService)=>(any)",
    GetFullName="(SoundService)=>(string)",
    GetListener="(SoundService)=>(any)",
    GetPropertyChangedSignal="(SoundService,string)=>(any)",
    GetRecordingDevices="(SoundService)=>(any)",
    GetSoundMemoryData="(SoundService)=>(any)",
    IsA="(SoundService,string)=>(boolean)",
    IsAncestorOf="(SoundService,any)=>(boolean)",
    IsDescendantOf="(SoundService,any)=>(boolean)",
    Name="string",
    Parent="any",
    PlayLocalSound="(SoundService,any)=>()",
    PlayStockSound="(SoundService,any)=>()",
    Remove="(SoundService)=>()",
    RespectFilteringEnabled="boolean",
    RobloxLocked="boolean",
    RolloffScale="number",
    SetAttribute="(SoundService,string,any)=>()",
    SetListener="(SoundService,any,any)=>()",
    SetRecordingDevice="(SoundService,number)=>(boolean)",
    Tags="any",
    WaitForChild="(SoundService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(SoundService)=>(any)",
    className="string",
    clone="(SoundService)=>(any)",
    destroy="(SoundService)=>()",
    findFirstChild="(SoundService,string,boolean)=>(any)",
    getChildren="(SoundService)=>(any)",
    isA="(SoundService,string)=>(boolean)",
    isDescendantOf="(SoundService,any)=>(boolean)",
    remove="(SoundService)=>()"}


, SpawnLocation={
    AllowTeamChangeOnTouch="boolean",
    AncestryChanged="Event",
    Anchored="boolean",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BackParamA="number",
    BackParamB="number",
    BackSurface="any",
    BackSurfaceInput="any",
    BottomParamA="number",
    BottomParamB="number",
    BottomSurface="any",
    BottomSurfaceInput="any",
    BreakJoints="(SpawnLocation)=>()",
    BrickColor="any",
    CFrame="CFrame",
    CanCollide="boolean",
    CanCollideWith="(SpawnLocation,any)=>(boolean)",
    CanSetNetworkOwnership="(SpawnLocation)=>(any)",
    CastShadow="boolean",
    CenterOfMass="Vector3",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SpawnLocation)=>()",
    Clone="(SpawnLocation)=>(any)",
    CollisionGroupId="number",
    Color="Color3",
    Color3uint8="any",
    CustomPhysicalProperties="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SpawnLocation)=>()",
    DraggingV1="boolean",
    Duration="number",
    Elasticity="number",
    Enabled="boolean",
    FindFirstAncestor="(SpawnLocation,string)=>(any)",
    FindFirstAncestorOfClass="(SpawnLocation,string)=>(any)",
    FindFirstAncestorWhichIsA="(SpawnLocation,string)=>(any)",
    FindFirstChild="(SpawnLocation,string,boolean)=>(any)",
    FindFirstChildOfClass="(SpawnLocation,string)=>(any)",
    FindFirstChildWhichIsA="(SpawnLocation,string,boolean)=>(any)",
    FormFactor="any",
    Friction="number",
    FrontParamA="number",
    FrontParamB="number",
    FrontSurface="any",
    FrontSurfaceInput="any",
    GetAttribute="(SpawnLocation,string)=>(any)",
    GetAttributeChangedSignal="(SpawnLocation,string)=>(any)",
    GetAttributes="(SpawnLocation)=>(any)",
    GetChildren="(SpawnLocation)=>(any)",
    GetConnectedParts="(SpawnLocation,boolean)=>(any)",
    GetDebugId="(SpawnLocation,number)=>(string)",
    GetDescendants="(SpawnLocation)=>(any)",
    GetFullName="(SpawnLocation)=>(string)",
    GetJoints="(SpawnLocation)=>(any)",
    GetMass="(SpawnLocation)=>(number)",
    GetNetworkOwner="(SpawnLocation)=>(any)",
    GetNetworkOwnershipAuto="(SpawnLocation)=>(boolean)",
    GetPropertyChangedSignal="(SpawnLocation,string)=>(any)",
    GetRenderCFrame="(SpawnLocation)=>(CFrame)",
    GetRootPart="(SpawnLocation)=>(any)",
    GetTouchingParts="(SpawnLocation)=>(any)",
    IsA="(SpawnLocation,string)=>(boolean)",
    IsAncestorOf="(SpawnLocation,any)=>(boolean)",
    IsDescendantOf="(SpawnLocation,any)=>(boolean)",
    IsGrounded="(SpawnLocation)=>(boolean)",
    LeftParamA="number",
    LeftParamB="number",
    LeftSurface="any",
    LeftSurfaceInput="any",
    LocalSimulationTouched="Event",
    LocalTransparencyModifier="number",
    Locked="boolean",
    MakeJoints="(SpawnLocation)=>()",
    Massless="boolean",
    Material="any",
    Name="string",
    NetworkIsSleeping="boolean",
    NetworkOwnerChanged="Event",
    NetworkOwnerV3="any",
    NetworkOwnershipRule="any",
    Neutral="boolean",
    Orientation="Vector3",
    OutfitChanged="Event",
    Parent="any",
    Position="Vector3",
    ReceiveAge="number",
    Reflectance="number",
    Remove="(SpawnLocation)=>()",
    Resize="(SpawnLocation,any,number)=>(boolean)",
    ResizeIncrement="number",
    ResizeableFaces="any",
    RightParamA="number",
    RightParamB="number",
    RightSurface="any",
    RightSurfaceInput="any",
    RobloxLocked="boolean",
    RootPriority="number",
    RotVelocity="Vector3",
    Rotation="Vector3",
    SetAttribute="(SpawnLocation,string,any)=>()",
    SetNetworkOwner="(SpawnLocation,any)=>()",
    SetNetworkOwnershipAuto="(SpawnLocation)=>()",
    Shape="any",
    Size="Vector3",
    SpecificGravity="number",
    StoppedTouching="Event",
    SubtractAsync="(SpawnLocation,any,any,any)=>(any)",
    Tags="any",
    TeamColor="any",
    TopParamA="number",
    TopParamB="number",
    TopSurface="any",
    TopSurfaceInput="any",
    TouchEnded="Event",
    Touched="Event",
    Transparency="number",
    UnionAsync="(SpawnLocation,any,any,any)=>(any)",
    Velocity="Vector3",
    WaitForChild="(SpawnLocation,string,number)=>(any)",
    archivable="boolean",
    breakJoints="(SpawnLocation)=>()",
    brickColor="any",
    childAdded="Event",
    children="(SpawnLocation)=>(any)",
    className="string",
    clone="(SpawnLocation)=>(any)",
    destroy="(SpawnLocation)=>()",
    findFirstChild="(SpawnLocation,string,boolean)=>(any)",
    formFactor="any",
    formFactorRaw="any",
    getChildren="(SpawnLocation)=>(any)",
    getMass="(SpawnLocation)=>(number)",
    isA="(SpawnLocation,string)=>(boolean)",
    isDescendantOf="(SpawnLocation,any)=>(boolean)",
    makeJoints="(SpawnLocation)=>()",
    remove="(SpawnLocation)=>()",
    resize="(SpawnLocation,any,number)=>(boolean)",
    shap="any",
    shape="any",
    siz="Vector3",
    size="Vector3",
    touched="Event"}


, PhysicalProperties=any

, SpecialMesh={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SpecialMesh)=>()",
    Clone="(SpecialMesh)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SpecialMesh)=>()",
    FindFirstAncestor="(SpecialMesh,string)=>(any)",
    FindFirstAncestorOfClass="(SpecialMesh,string)=>(any)",
    FindFirstAncestorWhichIsA="(SpecialMesh,string)=>(any)",
    FindFirstChild="(SpecialMesh,string,boolean)=>(any)",
    FindFirstChildOfClass="(SpecialMesh,string)=>(any)",
    FindFirstChildWhichIsA="(SpecialMesh,string,boolean)=>(any)",
    GetAttribute="(SpecialMesh,string)=>(any)",
    GetAttributeChangedSignal="(SpecialMesh,string)=>(any)",
    GetAttributes="(SpecialMesh)=>(any)",
    GetChildren="(SpecialMesh)=>(any)",
    GetDebugId="(SpecialMesh,number)=>(string)",
    GetDescendants="(SpecialMesh)=>(any)",
    GetFullName="(SpecialMesh)=>(string)",
    GetPropertyChangedSignal="(SpecialMesh,string)=>(any)",
    IsA="(SpecialMesh,string)=>(boolean)",
    IsAncestorOf="(SpecialMesh,any)=>(boolean)",
    IsDescendantOf="(SpecialMesh,any)=>(boolean)",
    LODX="any",
    LODY="any",
    MeshId="any",
    Mesh,="any",
    Name="string",
    Offset="Vector3",
    Parent="any",
    Remove="(SpecialMesh)=>()",
    RobloxLocked="boolean",
    Scale="Vector3",
    SetAttribute="(SpecialMesh,string,any)=>()",
    Tags="any",
    TextureId="any",
    VertexColor="Vector3",
    WaitForChild="(SpecialMesh,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(SpecialMesh)=>(any)",
    className="string",
    clone="(SpecialMesh)=>(any)",
    destroy="(SpecialMesh)=>()",
    findFirstChild="(SpecialMesh,string,boolean)=>(any)",
    getChildren="(SpecialMesh)=>(any)",
    isA="(SpecialMesh,string)=>(boolean)",
    isDescendantOf="(SpecialMesh,any)=>(boolean)",
    remove="(SpecialMesh)=>()"}


, Region3int16=Region3

, CellId=any

, SphereHandleAdornment={
    Adornee="any",
    AlwaysOnTop="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CFrame="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SphereHandleAdornment)=>()",
    Clone="(SphereHandleAdornment)=>(any)",
    Color="any",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SphereHandleAdornment)=>()",
    FindFirstAncestor="(SphereHandleAdornment,string)=>(any)",
    FindFirstAncestorOfClass="(SphereHandleAdornment,string)=>(any)",
    FindFirstAncestorWhichIsA="(SphereHandleAdornment,string)=>(any)",
    FindFirstChild="(SphereHandleAdornment,string,boolean)=>(any)",
    FindFirstChildOfClass="(SphereHandleAdornment,string)=>(any)",
    FindFirstChildWhichIsA="(SphereHandleAdornment,string,boolean)=>(any)",
    GetAttribute="(SphereHandleAdornment,string)=>(any)",
    GetAttributeChangedSignal="(SphereHandleAdornment,string)=>(any)",
    GetAttributes="(SphereHandleAdornment)=>(any)",
    GetChildren="(SphereHandleAdornment)=>(any)",
    GetDebugId="(SphereHandleAdornment,number)=>(string)",
    GetDescendants="(SphereHandleAdornment)=>(any)",
    GetFullName="(SphereHandleAdornment)=>(string)",
    GetPropertyChangedSignal="(SphereHandleAdornment,string)=>(any)",
    IsA="(SphereHandleAdornment,string)=>(boolean)",
    IsAncestorOf="(SphereHandleAdornment,any)=>(boolean)",
    IsDescendantOf="(SphereHandleAdornment,any)=>(boolean)",
    MouseButton1Down="Event",
    MouseButton1Up="Event",
    MouseEnter="Event",
    MouseLeave="Event",
    Name="string",
    Parent="any",
    Radius="number",
    Remove="(SphereHandleAdornment)=>()",
    RobloxLocked="boolean",
    SetAttribute="(SphereHandleAdornment,string,any)=>()",
    SizeRelativeOffset="Vector3",
    Tags="any",
    Transparency="number",
    Visible="boolean",
    WaitForChild="(SphereHandleAdornment,string,number)=>(any)",
    ZIndex="number",
    archivable="boolean",
    childAdded="Event",
    children="(SphereHandleAdornment)=>(any)",
    className="string",
    clone="(SphereHandleAdornment)=>(any)",
    destroy="(SphereHandleAdornment)=>()",
    findFirstChild="(SphereHandleAdornment,string,boolean)=>(any)",
    getChildren="(SphereHandleAdornment)=>(any)",
    isA="(SphereHandleAdornment,string)=>(boolean)",
    isDescendantOf="(SphereHandleAdornment,any)=>(boolean)",
    remove="(SphereHandleAdornment)=>()"}


, SpotLight={
    AncestryChanged="Event",
    Angle="number",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Brightness="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SpotLight)=>()",
    Clone="(SpotLight)=>(any)",
    Color="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SpotLight)=>()",
    Enabled="boolean",
    Face="any",
    FindFirstAncestor="(SpotLight,string)=>(any)",
    FindFirstAncestorOfClass="(SpotLight,string)=>(any)",
    FindFirstAncestorWhichIsA="(SpotLight,string)=>(any)",
    FindFirstChild="(SpotLight,string,boolean)=>(any)",
    FindFirstChildOfClass="(SpotLight,string)=>(any)",
    FindFirstChildWhichIsA="(SpotLight,string,boolean)=>(any)",
    GetAttribute="(SpotLight,string)=>(any)",
    GetAttributeChangedSignal="(SpotLight,string)=>(any)",
    GetAttributes="(SpotLight)=>(any)",
    GetChildren="(SpotLight)=>(any)",
    GetDebugId="(SpotLight,number)=>(string)",
    GetDescendants="(SpotLight)=>(any)",
    GetFullName="(SpotLight)=>(string)",
    GetPropertyChangedSignal="(SpotLight,string)=>(any)",
    IsA="(SpotLight,string)=>(boolean)",
    IsAncestorOf="(SpotLight,any)=>(boolean)",
    IsDescendantOf="(SpotLight,any)=>(boolean)",
    Name="string",
    Parent="any",
    Range="number",
    Remove="(SpotLight)=>()",
    RobloxLocked="boolean",
    SetAttribute="(SpotLight,string,any)=>()",
    Shadows="boolean",
    Tags="any",
    WaitForChild="(SpotLight,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(SpotLight)=>(any)",
    className="string",
    clone="(SpotLight)=>(any)",
    destroy="(SpotLight)=>()",
    findFirstChild="(SpotLight,string,boolean)=>(any)",
    getChildren="(SpotLight)=>(any)",
    isA="(SpotLight,string)=>(boolean)",
    isDescendantOf="(SpotLight,any)=>(boolean)",
    remove="(SpotLight)=>()"}


, StarterGear={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(StarterGear)=>()",
    Clone="(StarterGear)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(StarterGear)=>()",
    FindFirstAncestor="(StarterGear,string)=>(any)",
    FindFirstAncestorOfClass="(StarterGear,string)=>(any)",
    FindFirstAncestorWhichIsA="(StarterGear,string)=>(any)",
    FindFirstChild="(StarterGear,string,boolean)=>(any)",
    FindFirstChildOfClass="(StarterGear,string)=>(any)",
    FindFirstChildWhichIsA="(StarterGear,string,boolean)=>(any)",
    GetAttribute="(StarterGear,string)=>(any)",
    GetAttributeChangedSignal="(StarterGear,string)=>(any)",
    GetAttributes="(StarterGear)=>(any)",
    GetChildren="(StarterGear)=>(any)",
    GetDebugId="(StarterGear,number)=>(string)",
    GetDescendants="(StarterGear)=>(any)",
    GetFullName="(StarterGear)=>(string)",
    GetPropertyChangedSignal="(StarterGear,string)=>(any)",
    IsA="(StarterGear,string)=>(boolean)",
    IsAncestorOf="(StarterGear,any)=>(boolean)",
    IsDescendantOf="(StarterGear,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(StarterGear)=>()",
    RobloxLocked="boolean",
    SetAttribute="(StarterGear,string,any)=>()",
    Tags="any",
    WaitForChild="(StarterGear,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(StarterGear)=>(any)",
    className="string",
    clone="(StarterGear)=>(any)",
    destroy="(StarterGear)=>()",
    findFirstChild="(StarterGear,string,boolean)=>(any)",
    getChildren="(StarterGear)=>(any)",
    isA="(StarterGear,string)=>(boolean)",
    isDescendantOf="(StarterGear,any)=>(boolean)",
    remove="(StarterGear)=>()"}


, StarterGui={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(StarterGui)=>()",
    Clone="(StarterGui)=>(any)",
    CoreGuiChangedSignal="Event",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(StarterGui)=>()",
    FindFirstAncestor="(StarterGui,string)=>(any)",
    FindFirstAncestorOfClass="(StarterGui,string)=>(any)",
    FindFirstAncestorWhichIsA="(StarterGui,string)=>(any)",
    FindFirstChild="(StarterGui,string,boolean)=>(any)",
    FindFirstChildOfClass="(StarterGui,string)=>(any)",
    FindFirstChildWhichIsA="(StarterGui,string,boolean)=>(any)",
    GetAttribute="(StarterGui,string)=>(any)",
    GetAttributeChangedSignal="(StarterGui,string)=>(any)",
    GetAttributes="(StarterGui)=>(any)",
    GetChildren="(StarterGui)=>(any)",
    GetCore="(StarterGui,string)=>(any)",
    GetCoreGuiEnabled="(StarterGui,any)=>(boolean)",
    GetDebugId="(StarterGui,number)=>(string)",
    GetDescendants="(StarterGui)=>(any)",
    GetFullName="(StarterGui)=>(string)",
    GetGuiObjectsAtPosition="(StarterGui,number,number)=>(any)",
    GetPropertyChangedSignal="(StarterGui,string)=>(any)",
    IsA="(StarterGui,string)=>(boolean)",
    IsAncestorOf="(StarterGui,any)=>(boolean)",
    IsDescendantOf="(StarterGui,any)=>(boolean)",
    Name="string",
    Parent="any",
    ProcessUserInput="boolean",
    RegisterGetCore="(StarterGui,string,any)=>()",
    RegisterSetCore="(StarterGui,string,any)=>()",
    Remove="(StarterGui)=>()",
    ResetPlayerGuiOnSpawn="boolean",
    RobloxLocked="boolean",
    ScreenOrientation="any",
    SetAttribute="(StarterGui,string,any)=>()",
    SetCore="(StarterGui,string,any)=>()",
    SetCoreGuiEnabled="(StarterGui,any,boolean)=>()",
    ShowDevelopmentGui="boolean",
    Tags="any",
    WaitForChild="(StarterGui,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(StarterGui)=>(any)",
    className="string",
    clone="(StarterGui)=>(any)",
    destroy="(StarterGui)=>()",
    findFirstChild="(StarterGui,string,boolean)=>(any)",
    getChildren="(StarterGui)=>(any)",
    isA="(StarterGui,string)=>(boolean)",
    isDescendantOf="(StarterGui,any)=>(boolean)",
    remove="(StarterGui)=>()"}


, Stats={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Stats)=>()",
    Clone="(Stats)=>(any)",
    ContactsCount="number",
    DataCost="number",
    DataReceiveKbps="number",
    DataSendKbps="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Stats)=>()",
    FindFirstAncestor="(Stats,string)=>(any)",
    FindFirstAncestorOfClass="(Stats,string)=>(any)",
    FindFirstAncestorWhichIsA="(Stats,string)=>(any)",
    FindFirstChild="(Stats,string,boolean)=>(any)",
    FindFirstChildOfClass="(Stats,string)=>(any)",
    FindFirstChildWhichIsA="(Stats,string,boolean)=>(any)",
    GetAttribute="(Stats,string)=>(any)",
    GetAttributeChangedSignal="(Stats,string)=>(any)",
    GetAttributes="(Stats)=>(any)",
    GetBrowserTrackerId="(Stats)=>(string)",
    GetChildren="(Stats)=>(any)",
    GetDebugId="(Stats,number)=>(string)",
    GetDescendants="(Stats)=>(any)",
    GetFullName="(Stats)=>(string)",
    GetMemoryUsageMbForTag="(Stats,any)=>(number)",
    GetPaginatedMemoryByTexture="(Stats,any,number,number)=>(any)",
    GetPropertyChangedSignal="(Stats,string)=>(any)",
    GetTotalMemoryUsageMb="(Stats)=>(number)",
    HeartbeatTimeMs="number",
    InstanceCount="number",
    IsA="(Stats,string)=>(boolean)",
    IsAncestorOf="(Stats,any)=>(boolean)",
    IsDescendantOf="(Stats,any)=>(boolean)",
    MovingPrimitivesCount="number",
    Name="string",
    Parent="any",
    PhysicsReceiveKbps="number",
    PhysicsSendKbps="number",
    PhysicsStepTimeMs="number",
    PrimitivesCount="number",
    Remove="(Stats)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Stats,string,any)=>()",
    Tags="any",
    WaitForChild="(Stats,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Stats)=>(any)",
    className="string",
    clone="(Stats)=>(any)",
    destroy="(Stats)=>()",
    findFirstChild="(Stats,string,boolean)=>(any)",
    getChildren="(Stats)=>(any)",
    isA="(Stats,string)=>(boolean)",
    isDescendantOf="(Stats,any)=>(boolean)",
    remove="(Stats)=>()"}


, StatsItem={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(StatsItem)=>()",
    Clone="(StatsItem)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(StatsItem)=>()",
    FindFirstAncestor="(StatsItem,string)=>(any)",
    FindFirstAncestorOfClass="(StatsItem,string)=>(any)",
    FindFirstAncestorWhichIsA="(StatsItem,string)=>(any)",
    FindFirstChild="(StatsItem,string,boolean)=>(any)",
    FindFirstChildOfClass="(StatsItem,string)=>(any)",
    FindFirstChildWhichIsA="(StatsItem,string,boolean)=>(any)",
    GetAttribute="(StatsItem,string)=>(any)",
    GetAttributeChangedSignal="(StatsItem,string)=>(any)",
    GetAttributes="(StatsItem)=>(any)",
    GetChildren="(StatsItem)=>(any)",
    GetDebugId="(StatsItem,number)=>(string)",
    GetDescendants="(StatsItem)=>(any)",
    GetFullName="(StatsItem)=>(string)",
    GetPropertyChangedSignal="(StatsItem,string)=>(any)",
    GetValue="(StatsItem)=>(number)",
    GetValueString="(StatsItem)=>(string)",
    IsA="(StatsItem,string)=>(boolean)",
    IsAncestorOf="(StatsItem,any)=>(boolean)",
    IsDescendantOf="(StatsItem,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(StatsItem)=>()",
    RobloxLocked="boolean",
    SetAttribute="(StatsItem,string,any)=>()",
    Tags="any",
    WaitForChild="(StatsItem,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(StatsItem)=>(any)",
    className="string",
    clone="(StatsItem)=>(any)",
    destroy="(StatsItem)=>()",
    findFirstChild="(StatsItem,string,boolean)=>(any)",
    getChildren="(StatsItem)=>(any)",
    isA="(StatsItem,string)=>(boolean)",
    isDescendantOf="(StatsItem,any)=>(boolean)",
    remove="(StatsItem)=>()"}


, VirtualInputManager={
    AdditionalLuaState="string",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(VirtualInputManager)=>()",
    Clone="(VirtualInputManager)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(VirtualInputManager)=>()",
    Dump="(VirtualInputManager)=>()",
    FindFirstAncestor="(VirtualInputManager,string)=>(any)",
    FindFirstAncestorOfClass="(VirtualInputManager,string)=>(any)",
    FindFirstAncestorWhichIsA="(VirtualInputManager,string)=>(any)",
    FindFirstChild="(VirtualInputManager,string,boolean)=>(any)",
    FindFirstChildOfClass="(VirtualInputManager,string)=>(any)",
    FindFirstChildWhichIsA="(VirtualInputManager,string,boolean)=>(any)",
    GetAttribute="(VirtualInputManager,string)=>(any)",
    GetAttributeChangedSignal="(VirtualInputManager,string)=>(any)",
    GetAttributes="(VirtualInputManager)=>(any)",
    GetChildren="(VirtualInputManager)=>(any)",
    GetDebugId="(VirtualInputManager,number)=>(string)",
    GetDescendants="(VirtualInputManager)=>(any)",
    GetFullName="(VirtualInputManager)=>(string)",
    GetPropertyChangedSignal="(VirtualInputManager,string)=>(any)",
    HandleGamepadAxisInput="(VirtualInputManager,number,any,number,number,number)=>()",
    HandleGamepadButtonInput="(VirtualInputManager,number,any,number)=>()",
    HandleGamepadConnect="(VirtualInputManager,number)=>()",
    HandleGamepadDisconnect="(VirtualInputManager,number)=>()",
    IsA="(VirtualInputManager,string)=>(boolean)",
    IsAncestorOf="(VirtualInputManager,any)=>(boolean)",
    IsDescendantOf="(VirtualInputManager,any)=>(boolean)",
    Name="string",
    Parent="any",
    PlaybackCompleted="Event",
    RecordingCompleted="Event",
    Remove="(VirtualInputManager)=>()",
    RobloxLocked="boolean",
    SendAccelerometerEvent="(VirtualInputManager,number,number,number)=>()",
    SendGravityEvent="(VirtualInputManager,number,number,number)=>()",
    SendGyroscopeEvent="(VirtualInputManager,number,number,number,number)=>()",
    SendKeyEvent="(VirtualInputManager,boolean,any,boolean,any)=>()",
    SendMouseButtonEvent="(VirtualInputManager,number,number,number,boolean,any)=>()",
    SendMouseMoveEvent="(VirtualInputManager,number,number,any)=>()",
    SendMouseWheelEvent="(VirtualInputManager,number,number,boolean,any)=>()",
    SendTextInputCharacterEvent="(VirtualInputManager,string,any)=>()",
    SendTouchEvent="(VirtualInputManager,number,number,number,number)=>()",
    SetAttribute="(VirtualInputManager,string,any)=>()",
    StartPlaying="(VirtualInputManager,string)=>()",
    StartRecording="(VirtualInputManager)=>()",
    StopRecording="(VirtualInputManager)=>()",
    Tags="any",
    WaitForChild="(VirtualInputManager,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(VirtualInputManager)=>(any)",
    className="string",
    clone="(VirtualInputManager)=>(any)",
    destroy="(VirtualInputManager)=>()",
    findFirstChild="(VirtualInputManager,string,boolean)=>(any)",
    getChildren="(VirtualInputManager)=>(any)",
    isA="(VirtualInputManager,string)=>(boolean)",
    isDescendantOf="(VirtualInputManager,any)=>(boolean)",
    remove="(VirtualInputManager)=>()",
    sendRobloxEvent="(VirtualInputManager,string,string,string)=>()"}


, SurfaceGui={
    AbsolutePosition="Vector2",
    AbsoluteRotation="number",
    AbsoluteSize="Vector2",
    Active="boolean",
    Adornee="any",
    AlwaysOnTop="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoLocalize="boolean",
    CanvasSize="Vector2",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SurfaceGui)=>()",
    ClipsDescendants="boolean",
    Clone="(SurfaceGui)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SurfaceGui)=>()",
    Enabled="boolean",
    Face="any",
    FindFirstAncestor="(SurfaceGui,string)=>(any)",
    FindFirstAncestorOfClass="(SurfaceGui,string)=>(any)",
    FindFirstAncestorWhichIsA="(SurfaceGui,string)=>(any)",
    FindFirstChild="(SurfaceGui,string,boolean)=>(any)",
    FindFirstChildOfClass="(SurfaceGui,string)=>(any)",
    FindFirstChildWhichIsA="(SurfaceGui,string,boolean)=>(any)",
    GetAttribute="(SurfaceGui,string)=>(any)",
    GetAttributeChangedSignal="(SurfaceGui,string)=>(any)",
    GetAttributes="(SurfaceGui)=>(any)",
    GetChildren="(SurfaceGui)=>(any)",
    GetDebugId="(SurfaceGui,number)=>(string)",
    GetDescendants="(SurfaceGui)=>(any)",
    GetFullName="(SurfaceGui)=>(string)",
    GetPropertyChangedSignal="(SurfaceGui,string)=>(any)",
    IsA="(SurfaceGui,string)=>(boolean)",
    IsAncestorOf="(SurfaceGui,any)=>(boolean)",
    IsDescendantOf="(SurfaceGui,any)=>(boolean)",
    IsNotOccluded="boolean",
    LightInfluence="number",
    Localize="boolean",
    Name="string",
    Parent="any",
    PixelsPerStud="number",
    Remove="(SurfaceGui)=>()",
    ResetOnSpawn="boolean",
    RobloxLocked="boolean",
    RootLocalizationTable="any",
    SetAttribute="(SurfaceGui,string,any)=>()",
    SizingMode="any",
    Tags="any",
    ToolPunchThroughDistance="number",
    WaitForChild="(SurfaceGui,string,number)=>(any)",
    ZIndexBehavior="any",
    ZOffset="number",
    archivable="boolean",
    childAdded="Event",
    children="(SurfaceGui)=>(any)",
    className="string",
    clone="(SurfaceGui)=>(any)",
    destroy="(SurfaceGui)=>()",
    findFirstChild="(SurfaceGui,string,boolean)=>(any)",
    getChildren="(SurfaceGui)=>(any)",
    isA="(SurfaceGui,string)=>(boolean)",
    isDescendantOf="(SurfaceGui,any)=>(boolean)",
    remove="(SurfaceGui)=>()"}


, Status={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BreakJoints="(Status)=>()",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Status)=>()",
    Clone="(Status)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Status)=>()",
    FindFirstAncestor="(Status,string)=>(any)",
    FindFirstAncestorOfClass="(Status,string)=>(any)",
    FindFirstAncestorWhichIsA="(Status,string)=>(any)",
    FindFirstChild="(Status,string,boolean)=>(any)",
    FindFirstChildOfClass="(Status,string)=>(any)",
    FindFirstChildWhichIsA="(Status,string,boolean)=>(any)",
    GetAttribute="(Status,string)=>(any)",
    GetAttributeChangedSignal="(Status,string)=>(any)",
    GetAttributes="(Status)=>(any)",
    GetBoundingBox="(Status)=>(any)",
    GetChildren="(Status)=>(any)",
    GetDebugId="(Status,number)=>(string)",
    GetDescendants="(Status)=>(any)",
    GetExtentsSize="(Status)=>(Vector3)",
    GetFullName="(Status)=>(string)",
    GetModelCFrame="(Status)=>(CFrame)",
    GetModelSize="(Status)=>(Vector3)",
    GetPrimaryPartCFrame="(Status)=>(CFrame)",
    GetPropertyChangedSignal="(Status,string)=>(any)",
    IsA="(Status,string)=>(boolean)",
    IsAncestorOf="(Status,any)=>(boolean)",
    IsDescendantOf="(Status,any)=>(boolean)",
    MakeJoints="(Status)=>()",
    ModelComplete="Event",
    ModelInPrimary="CFrame",
    ModelIncomplete="Event",
    MoveTo="(Status,Vector3)=>()",
    Name="string",
    Parent="any",
    PrimaryPart="any",
    Remove="(Status)=>()",
    ResetOrientationToIdentity="(Status)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Status,string,any)=>()",
    SetIdentityOrientation="(Status)=>()",
    SetPrimaryPartCFrame="(Status,CFrame)=>()",
    Tags="any",
    TranslateBy="(Status,Vector3)=>()",
    WaitForChild="(Status,string,number)=>(any)",
    archivable="boolean",
    breakJoints="(Status)=>()",
    childAdded="Event",
    children="(Status)=>(any)",
    className="string",
    clone="(Status)=>(any)",
    destroy="(Status)=>()",
    findFirstChild="(Status,string,boolean)=>(any)",
    getChildren="(Status)=>(any)",
    isA="(Status,string)=>(boolean)",
    isDescendantOf="(Status,any)=>(boolean)",
    makeJoints="(Status)=>()",
    move="(Status,Vector3)=>()",
    moveTo="(Status,Vector3)=>()",
    remove="(Status)=>()"}


, StopWatchReporter={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(StopWatchReporter)=>()",
    Clone="(StopWatchReporter)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(StopWatchReporter)=>()",
    FindFirstAncestor="(StopWatchReporter,string)=>(any)",
    FindFirstAncestorOfClass="(StopWatchReporter,string)=>(any)",
    FindFirstAncestorWhichIsA="(StopWatchReporter,string)=>(any)",
    FindFirstChild="(StopWatchReporter,string,boolean)=>(any)",
    FindFirstChildOfClass="(StopWatchReporter,string)=>(any)",
    FindFirstChildWhichIsA="(StopWatchReporter,string,boolean)=>(any)",
    FinishTask="(StopWatchReporter,number)=>()",
    GetAttribute="(StopWatchReporter,string)=>(any)",
    GetAttributeChangedSignal="(StopWatchReporter,string)=>(any)",
    GetAttributes="(StopWatchReporter)=>(any)",
    GetChildren="(StopWatchReporter)=>(any)",
    GetDebugId="(StopWatchReporter,number)=>(string)",
    GetDescendants="(StopWatchReporter)=>(any)",
    GetFullName="(StopWatchReporter)=>(string)",
    GetPropertyChangedSignal="(StopWatchReporter,string)=>(any)",
    IsA="(StopWatchReporter,string)=>(boolean)",
    IsAncestorOf="(StopWatchReporter,any)=>(boolean)",
    IsDescendantOf="(StopWatchReporter,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(StopWatchReporter)=>()",
    RobloxLocked="boolean",
    SendReport="(StopWatchReporter,string)=>()",
    SetAttribute="(StopWatchReporter,string,any)=>()",
    StartTask="(StopWatchReporter,string,string)=>(number)",
    Tags="any",
    WaitForChild="(StopWatchReporter,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(StopWatchReporter)=>(any)",
    className="string",
    clone="(StopWatchReporter)=>(any)",
    destroy="(StopWatchReporter)=>()",
    findFirstChild="(StopWatchReporter,string,boolean)=>(any)",
    getChildren="(StopWatchReporter)=>(any)",
    isA="(StopWatchReporter,string)=>(boolean)",
    isDescendantOf="(StopWatchReporter,any)=>(boolean)",
    remove="(StopWatchReporter)=>()"}


, StringValue={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(StringValue)=>()",
    Clone="(StringValue)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(StringValue)=>()",
    FindFirstAncestor="(StringValue,string)=>(any)",
    FindFirstAncestorOfClass="(StringValue,string)=>(any)",
    FindFirstAncestorWhichIsA="(StringValue,string)=>(any)",
    FindFirstChild="(StringValue,string,boolean)=>(any)",
    FindFirstChildOfClass="(StringValue,string)=>(any)",
    FindFirstChildWhichIsA="(StringValue,string,boolean)=>(any)",
    GetAttribute="(StringValue,string)=>(any)",
    GetAttributeChangedSignal="(StringValue,string)=>(any)",
    GetAttributes="(StringValue)=>(any)",
    GetChildren="(StringValue)=>(any)",
    GetDebugId="(StringValue,number)=>(string)",
    GetDescendants="(StringValue)=>(any)",
    GetFullName="(StringValue)=>(string)",
    GetPropertyChangedSignal="(StringValue,string)=>(any)",
    IsA="(StringValue,string)=>(boolean)",
    IsAncestorOf="(StringValue,any)=>(boolean)",
    IsDescendantOf="(StringValue,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(StringValue)=>()",
    RobloxLocked="boolean",
    SetAttribute="(StringValue,string,any)=>()",
    Tags="any",
    Value="string",
    WaitForChild="(StringValue,string,number)=>(any)",
    archivable="boolean",
    changed="Event",
    childAdded="Event",
    children="(StringValue)=>(any)",
    className="string",
    clone="(StringValue)=>(any)",
    destroy="(StringValue)=>()",
    findFirstChild="(StringValue,string,boolean)=>(any)",
    getChildren="(StringValue)=>(any)",
    isA="(StringValue,string)=>(boolean)",
    isDescendantOf="(StringValue,any)=>(boolean)",
    remove="(StringValue)=>()"}


, StudioService={
    ActiveScript="any",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(StudioService)=>()",
    Clone="(StudioService)=>(any)",
    ConvertToPackageUpload="(StudioService,string)=>()",
    CopyToClipboard="(StudioService,string)=>()",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(StudioService)=>()",
    EmitPlacePublishedSignal="(StudioService)=>()",
    FindFirstAncestor="(StudioService,string)=>(any)",
    FindFirstAncestorOfClass="(StudioService,string)=>(any)",
    FindFirstAncestorWhichIsA="(StudioService,string)=>(any)",
    FindFirstChild="(StudioService,string,boolean)=>(any)",
    FindFirstChildOfClass="(StudioService,string)=>(any)",
    FindFirstChildWhichIsA="(StudioService,string,boolean)=>(any)",
    GamePublishFinished="Event",
    GetAttribute="(StudioService,string)=>(any)",
    GetAttributeChangedSignal="(StudioService,string)=>(any)",
    GetAttributes="(StudioService)=>(any)",
    GetChildren="(StudioService)=>(any)",
    GetClassIcon="(StudioService,string)=>(any)",
    GetDebugId="(StudioService,number)=>(string)",
    GetDescendants="(StudioService)=>(any)",
    GetFullName="(StudioService)=>(string)",
    GetPropertyChangedSignal="(StudioService,string)=>(any)",
    GetResourceByCategory="(StudioService,string)=>(any)",
    GetStartupPluginId="(StudioService)=>(string)",
    GetUserId="(StudioService)=>(number)",
    GridSize="number",
    InstalledPluginData="string",
    IsA="(StudioService,string)=>(boolean)",
    IsAncestorOf="(StudioService,any)=>(boolean)",
    IsDescendantOf="(StudioService,any)=>(boolean)",
    IsPluginInstalled="(StudioService,number)=>(boolean)",
    IsPluginUpToDate="(StudioService,number,number)=>(boolean)",
    LaunchBulkImport="(StudioService,number)=>(number)",
    Name="string",
    OnConvertToPackageResult="Event",
    OnOpenConvertToPackagePlugin="Event",
    OnOpenManagePackagePlugin="Event",
    OnPluginInstalledFromToolbox="Event",
    OnPluginInstalledFromWeb="Event",
    OnPublishAsPlugin="Event",
    OnPublishPlaceToRoblox="Event",
    OnSaveToRoblox="Event",
    OpenInBrowser_DONOTUSE="(StudioService,string)=>()",
    OpenPluginInsertPage="(StudioService,number)=>()",
    Parent="any",
    PromptImportFile="(StudioService,any)=>(any)",
    PromptImportFiles="(StudioService,any)=>(any)",
    PromptImportLocalAsset="(StudioService,string,any)=>(any)",
    PromptImportLocalAssets="(StudioService,string,any)=>(any)",
    PublishAs="(StudioService,number,number)=>()",
    Remove="(StudioService)=>()",
    RobloxLocked="boolean",
    RotateIncrement="number",
    SerializeInstances="(StudioService,any)=>(string)",
    SetAttribute="(StudioService,string,any)=>()",
    SetPluginEnabled="(StudioService,number,boolean)=>()",
    SetUniverseDisplayName="(StudioService,string)=>()",
    ShowPublishToRoblox="(StudioService)=>()",
    StudioLocaleId="string",
    Tags="any",
    TryInstallPlugin="(StudioService,number,number)=>()",
    UninstallPlugin="(StudioService,number)=>()",
    UpdatePluginManagement="(StudioService)=>()",
    UseLocalSpace="boolean",
    WaitForChild="(StudioService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(StudioService)=>(any)",
    className="string",
    clone="(StudioService)=>(any)",
    destroy="(StudioService)=>()",
    findFirstChild="(StudioService,string,boolean)=>(any)",
    getChildren="(StudioService)=>(any)",
    isA="(StudioService,string)=>(boolean)",
    isDescendantOf="(StudioService,any)=>(boolean)",
    remove="(StudioService)=>()"}


, SurfaceLight={
    AncestryChanged="Event",
    Angle="number",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Brightness="number",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SurfaceLight)=>()",
    Clone="(SurfaceLight)=>(any)",
    Color="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SurfaceLight)=>()",
    Enabled="boolean",
    Face="any",
    FindFirstAncestor="(SurfaceLight,string)=>(any)",
    FindFirstAncestorOfClass="(SurfaceLight,string)=>(any)",
    FindFirstAncestorWhichIsA="(SurfaceLight,string)=>(any)",
    FindFirstChild="(SurfaceLight,string,boolean)=>(any)",
    FindFirstChildOfClass="(SurfaceLight,string)=>(any)",
    FindFirstChildWhichIsA="(SurfaceLight,string,boolean)=>(any)",
    GetAttribute="(SurfaceLight,string)=>(any)",
    GetAttributeChangedSignal="(SurfaceLight,string)=>(any)",
    GetAttributes="(SurfaceLight)=>(any)",
    GetChildren="(SurfaceLight)=>(any)",
    GetDebugId="(SurfaceLight,number)=>(string)",
    GetDescendants="(SurfaceLight)=>(any)",
    GetFullName="(SurfaceLight)=>(string)",
    GetPropertyChangedSignal="(SurfaceLight,string)=>(any)",
    IsA="(SurfaceLight,string)=>(boolean)",
    IsAncestorOf="(SurfaceLight,any)=>(boolean)",
    IsDescendantOf="(SurfaceLight,any)=>(boolean)",
    Name="string",
    Parent="any",
    Range="number",
    Remove="(SurfaceLight)=>()",
    RobloxLocked="boolean",
    SetAttribute="(SurfaceLight,string,any)=>()",
    Shadows="boolean",
    Tags="any",
    WaitForChild="(SurfaceLight,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(SurfaceLight)=>(any)",
    className="string",
    clone="(SurfaceLight)=>(any)",
    destroy="(SurfaceLight)=>()",
    findFirstChild="(SurfaceLight,string,boolean)=>(any)",
    getChildren="(SurfaceLight)=>(any)",
    isA="(SurfaceLight,string)=>(boolean)",
    isDescendantOf="(SurfaceLight,any)=>(boolean)",
    remove="(SurfaceLight)=>()"}


, SurfaceSelection={
    Adornee="any",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(SurfaceSelection)=>()",
    Clone="(SurfaceSelection)=>(any)",
    Color="any",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(SurfaceSelection)=>()",
    FindFirstAncestor="(SurfaceSelection,string)=>(any)",
    FindFirstAncestorOfClass="(SurfaceSelection,string)=>(any)",
    FindFirstAncestorWhichIsA="(SurfaceSelection,string)=>(any)",
    FindFirstChild="(SurfaceSelection,string,boolean)=>(any)",
    FindFirstChildOfClass="(SurfaceSelection,string)=>(any)",
    FindFirstChildWhichIsA="(SurfaceSelection,string,boolean)=>(any)",
    GetAttribute="(SurfaceSelection,string)=>(any)",
    GetAttributeChangedSignal="(SurfaceSelection,string)=>(any)",
    GetAttributes="(SurfaceSelection)=>(any)",
    GetChildren="(SurfaceSelection)=>(any)",
    GetDebugId="(SurfaceSelection,number)=>(string)",
    GetDescendants="(SurfaceSelection)=>(any)",
    GetFullName="(SurfaceSelection)=>(string)",
    GetPropertyChangedSignal="(SurfaceSelection,string)=>(any)",
    IsA="(SurfaceSelection,string)=>(boolean)",
    IsAncestorOf="(SurfaceSelection,any)=>(boolean)",
    IsDescendantOf="(SurfaceSelection,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(SurfaceSelection)=>()",
    RobloxLocked="boolean",
    SetAttribute="(SurfaceSelection,string,any)=>()",
    Tags="any",
    TargetSurface="any",
    Transparency="number",
    Visible="boolean",
    WaitForChild="(SurfaceSelection,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(SurfaceSelection)=>(any)",
    className="string",
    clone="(SurfaceSelection)=>(any)",
    destroy="(SurfaceSelection)=>()",
    findFirstChild="(SurfaceSelection,string,boolean)=>(any)",
    getChildren="(SurfaceSelection)=>(any)",
    isA="(SurfaceSelection,string)=>(boolean)",
    isDescendantOf="(SurfaceSelection,any)=>(boolean)",
    remove="(SurfaceSelection)=>()"}


, Teams={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Teams)=>()",
    Clone="(Teams)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Teams)=>()",
    FindFirstAncestor="(Teams,string)=>(any)",
    FindFirstAncestorOfClass="(Teams,string)=>(any)",
    FindFirstAncestorWhichIsA="(Teams,string)=>(any)",
    FindFirstChild="(Teams,string,boolean)=>(any)",
    FindFirstChildOfClass="(Teams,string)=>(any)",
    FindFirstChildWhichIsA="(Teams,string,boolean)=>(any)",
    GetAttribute="(Teams,string)=>(any)",
    GetAttributeChangedSignal="(Teams,string)=>(any)",
    GetAttributes="(Teams)=>(any)",
    GetChildren="(Teams)=>(any)",
    GetDebugId="(Teams,number)=>(string)",
    GetDescendants="(Teams)=>(any)",
    GetFullName="(Teams)=>(string)",
    GetPropertyChangedSignal="(Teams,string)=>(any)",
    GetTeams="(Teams)=>(any)",
    IsA="(Teams,string)=>(boolean)",
    IsAncestorOf="(Teams,any)=>(boolean)",
    IsDescendantOf="(Teams,any)=>(boolean)",
    Name="string",
    Parent="any",
    RebalanceTeams="(Teams)=>()",
    Remove="(Teams)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Teams,string,any)=>()",
    Tags="any",
    WaitForChild="(Teams,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Teams)=>(any)",
    className="string",
    clone="(Teams)=>(any)",
    destroy="(Teams)=>()",
    findFirstChild="(Teams,string,boolean)=>(any)",
    getChildren="(Teams)=>(any)",
    isA="(Teams,string)=>(boolean)",
    isDescendantOf="(Teams,any)=>(boolean)",
    remove="(Teams)=>()"}


, TerrainRegion={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(TerrainRegion)=>()",
    Clone="(TerrainRegion)=>(any)",
    ConvertToSmooth="(TerrainRegion)=>()",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(TerrainRegion)=>()",
    ExtentsMax="any",
    ExtentsMin="any",
    FindFirstAncestor="(TerrainRegion,string)=>(any)",
    FindFirstAncestorOfClass="(TerrainRegion,string)=>(any)",
    FindFirstAncestorWhichIsA="(TerrainRegion,string)=>(any)",
    FindFirstChild="(TerrainRegion,string,boolean)=>(any)",
    FindFirstChildOfClass="(TerrainRegion,string)=>(any)",
    FindFirstChildWhichIsA="(TerrainRegion,string,boolean)=>(any)",
    GetAttribute="(TerrainRegion,string)=>(any)",
    GetAttributeChangedSignal="(TerrainRegion,string)=>(any)",
    GetAttributes="(TerrainRegion)=>(any)",
    GetChildren="(TerrainRegion)=>(any)",
    GetDebugId="(TerrainRegion,number)=>(string)",
    GetDescendants="(TerrainRegion)=>(any)",
    GetFullName="(TerrainRegion)=>(string)",
    GetPropertyChangedSignal="(TerrainRegion,string)=>(any)",
    GridV3="any",
    IsA="(TerrainRegion,string)=>(boolean)",
    IsAncestorOf="(TerrainRegion,any)=>(boolean)",
    IsDescendantOf="(TerrainRegion,any)=>(boolean)",
    IsSmooth="boolean",
    Name="string",
    Parent="any",
    Remove="(TerrainRegion)=>()",
    RobloxLocked="boolean",
    SetAttribute="(TerrainRegion,string,any)=>()",
    SizeInCells="Vector3",
    SmoothGrid="any",
    Tags="any",
    WaitForChild="(TerrainRegion,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(TerrainRegion)=>(any)",
    className="string",
    clone="(TerrainRegion)=>(any)",
    destroy="(TerrainRegion)=>()",
    findFirstChild="(TerrainRegion,string,boolean)=>(any)",
    getChildren="(TerrainRegion)=>(any)",
    isA="(TerrainRegion,string)=>(boolean)",
    isDescendantOf="(TerrainRegion,any)=>(boolean)",
    remove="(TerrainRegion)=>()"}


, TextBox={
    AbsolutePosition="Vector2",
    AbsoluteRotation="number",
    AbsoluteSize="Vector2",
    Active="boolean",
    AncestryChanged="Event",
    AnchorPoint="Vector2",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    AutoLocalize="boolean",
    BackgroundColor="any",
    BackgroundColor3="Color3",
    BackgroundTransparency="number",
    BorderColor="any",
    BorderColor3="Color3",
    BorderMode="any",
    BorderSizePixel="number",
    CaptureFocus="(TextBox)=>()",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(TextBox)=>()",
    ClearTextOnFocus="boolean",
    ClipsDescendants="boolean",
    Clone="(TextBox)=>(any)",
    Confidential="boolean",
    CursorPosition="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(TextBox)=>()",
    DragBegin="Event",
    DragBeginConnectionCount="number",
    DragStopped="Event",
    DragStoppedConnectionCount="number",
    Draggable="boolean",
    EnableRealtimeFilteringHints="boolean",
    FindFirstAncestor="(TextBox,string)=>(any)",
    FindFirstAncestorOfClass="(TextBox,string)=>(any)",
    FindFirstAncestorWhichIsA="(TextBox,string)=>(any)",
    FindFirstChild="(TextBox,string,boolean)=>(any)",
    FindFirstChildOfClass="(TextBox,string)=>(any)",
    FindFirstChildWhichIsA="(TextBox,string,boolean)=>(any)",
    FocusLost="Event",
    Focused="Event",
    Font="any",
    FontSize="any",
    GetAttribute="(TextBox,string)=>(any)",
    GetAttributeChangedSignal="(TextBox,string)=>(any)",
    GetAttributes="(TextBox)=>(any)",
    GetChildren="(TextBox)=>(any)",
    GetDebugId="(TextBox,number)=>(string)",
    GetDescendants="(TextBox)=>(any)",
    GetFullName="(TextBox)=>(string)",
    GetPropertyChangedSignal="(TextBox,string)=>(any)",
    InputBegan="Event",
    InputChanged="Event",
    InputEnded="Event",
    IsA="(TextBox,string)=>(boolean)",
    IsAncestorOf="(TextBox,any)=>(boolean)",
    IsDescendantOf="(TextBox,any)=>(boolean)",
    IsFocused="(TextBox)=>(boolean)",
    IsNotOccluded="boolean",
    LayoutOrder="number",
    LineHeight="number",
    Localize="boolean",
    ManualFocusRelease="boolean",
    MouseEnter="Event",
    MouseEnterConnectionCount="number",
    MouseLeave="Event",
    MouseLeaveConnectionCount="number",
    MouseMoved="Event",
    MouseMovedConnectionCount="number",
    MouseWheelBackward="Event",
    MouseWheelBackwardConnectionCount="number",
    MouseWheelForward="Event",
    MouseWheelForwardConnectionCount="number",
    MultiLine="boolean",
    Name="string",
    NextSelectionDown="any",
    NextSelectionLeft="any",
    NextSelectionRight="any",
    NextSelectionUp="any",
    OverlayNativeInput="boolean",
    Parent="any",
    PlaceholderColor3="Color3",
    PlaceholderText="string",
    Position="UDim2",
    ReleaseFocus="(TextBox,boolean)=>()",
    Remove="(TextBox)=>()",
    ResetKeyboardMode="(TextBox)=>()",
    ReturnKey,="any",
    ReturnPressedFromOnScreenKeyboard="Event",
    RobloxLocked="boolean",
    RootLocalizationTable="any",
    Rotation="number",
    Selectable="boolean",
    SelectionGained="Event",
    SelectionImageObject="any",
    SelectionLost="Event",
    SelectionStart="number",
    SetAttribute="(TextBox,string,any)=>()",
    SetTextFromInput="(TextBox,string)=>()",
    ShowNativeInput="boolean",
    Size="UDim2",
    SizeConstraint="any",
    Tags="any",
    Text="string",
    TextBounds="Vector2",
    TextColor="any",
    TextColor3="Color3",
    TextEditable="boolean",
    TextFits="boolean",
    TextInput,="any",
    TextScaled="boolean",
    TextSize="number",
    TextStrokeColor3="Color3",
    TextStrokeTransparency="number",
    TextTransparency="number",
    TextTruncate="any",
    TextWrap="boolean",
    TextWrapped="boolean",
    TextXAlignment="any",
    TextYAlignment="any",
    TouchLongPress="Event",
    TouchPan="Event",
    TouchPinch="Event",
    TouchRotate="Event",
    TouchSwipe="Event",
    TouchTap="Event",
    Transparency="number",
    TweenPosition="(TextBox,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSize="(TextBox,UDim2,any,any,number,boolean,any)=>(boolean)",
    TweenSizeAndPosition="(TextBox,UDim2,UDim2,any,any,number,boolean,any)=>(boolean)",
    Visible="boolean",
    WaitForChild="(TextBox,string,number)=>(any)",
    ZIndex="number",
    archivable="boolean",
    childAdded="Event",
    children="(TextBox)=>(any)",
    className="string",
    clone="(TextBox)=>(any)",
    destroy="(TextBox)=>()",
    findFirstChild="(TextBox,string,boolean)=>(any)",
    getChildren="(TextBox)=>(any)",
    isA="(TextBox,string)=>(boolean)",
    isDescendantOf="(TextBox,any)=>(boolean)",
    remove="(TextBox)=>()"}


, Texture={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Texture)=>()",
    Clone="(Texture)=>(any)",
    Color3="Color3",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Texture)=>()",
    Face="any",
    FindFirstAncestor="(Texture,string)=>(any)",
    FindFirstAncestorOfClass="(Texture,string)=>(any)",
    FindFirstAncestorWhichIsA="(Texture,string)=>(any)",
    FindFirstChild="(Texture,string,boolean)=>(any)",
    FindFirstChildOfClass="(Texture,string)=>(any)",
    FindFirstChildWhichIsA="(Texture,string,boolean)=>(any)",
    GetAttribute="(Texture,string)=>(any)",
    GetAttributeChangedSignal="(Texture,string)=>(any)",
    GetAttributes="(Texture)=>(any)",
    GetChildren="(Texture)=>(any)",
    GetDebugId="(Texture,number)=>(string)",
    GetDescendants="(Texture)=>(any)",
    GetFullName="(Texture)=>(string)",
    GetPropertyChangedSignal="(Texture,string)=>(any)",
    IsA="(Texture,string)=>(boolean)",
    IsAncestorOf="(Texture,any)=>(boolean)",
    IsDescendantOf="(Texture,any)=>(boolean)",
    LocalTransparencyModifier="number",
    Name="string",
    OffsetStudsU="number",
    OffsetStudsV="number",
    Parent="any",
    Remove="(Texture)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Texture,string,any)=>()",
    Shiny="number",
    Specular="number",
    StudsPerTileU="number",
    StudsPerTileV="number",
    Tags="any",
    Texture="any",
    Transparency="number",
    WaitForChild="(Texture,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Texture)=>(any)",
    className="string",
    clone="(Texture)=>(any)",
    destroy="(Texture)=>()",
    findFirstChild="(Texture,string,boolean)=>(any)",
    getChildren="(Texture)=>(any)",
    isA="(Texture,string)=>(boolean)",
    isDescendantOf="(Texture,any)=>(boolean)",
    remove="(Texture)=>()"}


, ThirdPartyUserService={
    ActiveGamepadAdded="Event",
    ActiveGamepadRemoved="Event",
    ActiveUserSignedOut="Event",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(ThirdPartyUserService)=>()",
    Clone="(ThirdPartyUserService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(ThirdPartyUserService)=>()",
    FindFirstAncestor="(ThirdPartyUserService,string)=>(any)",
    FindFirstAncestorOfClass="(ThirdPartyUserService,string)=>(any)",
    FindFirstAncestorWhichIsA="(ThirdPartyUserService,string)=>(any)",
    FindFirstChild="(ThirdPartyUserService,string,boolean)=>(any)",
    FindFirstChildOfClass="(ThirdPartyUserService,string)=>(any)",
    FindFirstChildWhichIsA="(ThirdPartyUserService,string,boolean)=>(any)",
    GetAttribute="(ThirdPartyUserService,string)=>(any)",
    GetAttributeChangedSignal="(ThirdPartyUserService,string)=>(any)",
    GetAttributes="(ThirdPartyUserService)=>(any)",
    GetChildren="(ThirdPartyUserService)=>(any)",
    GetDebugId="(ThirdPartyUserService,number)=>(string)",
    GetDescendants="(ThirdPartyUserService)=>(any)",
    GetFullName="(ThirdPartyUserService)=>(string)",
    GetPropertyChangedSignal="(ThirdPartyUserService,string)=>(any)",
    GetUserDisplayName="(ThirdPartyUserService)=>(string)",
    GetUserPlatformId="(ThirdPartyUserService)=>(string)",
    HaveActiveUser="(ThirdPartyUserService)=>(boolean)",
    IsA="(ThirdPartyUserService,string)=>(boolean)",
    IsAncestorOf="(ThirdPartyUserService,any)=>(boolean)",
    IsDescendantOf="(ThirdPartyUserService,any)=>(boolean)",
    Name="string",
    Parent="any",
    RegisterActiveUser="(ThirdPartyUserService,any)=>(number)",
    Remove="(ThirdPartyUserService)=>()",
    ReturnToEngagement="(ThirdPartyUserService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(ThirdPartyUserService,string,any)=>()",
    ShowAccountPicker="(ThirdPartyUserService)=>()",
    Tags="any",
    WaitForChild="(ThirdPartyUserService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(ThirdPartyUserService)=>(any)",
    className="string",
    clone="(ThirdPartyUserService)=>(any)",
    destroy="(ThirdPartyUserService)=>()",
    findFirstChild="(ThirdPartyUserService,string,boolean)=>(any)",
    getChildren="(ThirdPartyUserService)=>(any)",
    isA="(ThirdPartyUserService,string)=>(boolean)",
    isDescendantOf="(ThirdPartyUserService,any)=>(boolean)",
    remove="(ThirdPartyUserService)=>()"}


, Torque={
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    Attachment0="any",
    Attachment1="any",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Torque)=>()",
    Clone="(Torque)=>(any)",
    Color="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Torque)=>()",
    Enabled="boolean",
    FindFirstAncestor="(Torque,string)=>(any)",
    FindFirstAncestorOfClass="(Torque,string)=>(any)",
    FindFirstAncestorWhichIsA="(Torque,string)=>(any)",
    FindFirstChild="(Torque,string,boolean)=>(any)",
    FindFirstChildOfClass="(Torque,string)=>(any)",
    FindFirstChildWhichIsA="(Torque,string,boolean)=>(any)",
    GetAttribute="(Torque,string)=>(any)",
    GetAttributeChangedSignal="(Torque,string)=>(any)",
    GetAttributes="(Torque)=>(any)",
    GetChildren="(Torque)=>(any)",
    GetDebugId="(Torque,number)=>(string)",
    GetDescendants="(Torque)=>(any)",
    GetFullName="(Torque)=>(string)",
    GetPropertyChangedSignal="(Torque,string)=>(any)",
    IsA="(Torque,string)=>(boolean)",
    IsAncestorOf="(Torque,any)=>(boolean)",
    IsDescendantOf="(Torque,any)=>(boolean)",
    Name="string",
    Parent="any",
    RelativeTo="any",
    Remove="(Torque)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Torque,string,any)=>()",
    Tags="any",
    Torque="Vector3",
    Visible="boolean",
    WaitForChild="(Torque,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Torque)=>(any)",
    className="string",
    clone="(Torque)=>(any)",
    destroy="(Torque)=>()",
    findFirstChild="(Torque,string,boolean)=>(any)",
    getChildren="(Torque)=>(any)",
    isA="(Torque,string)=>(boolean)",
    isDescendantOf="(Torque,any)=>(boolean)",
    remove="(Torque)=>()"}


, TotalCountTimeIntervalItem={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(TotalCountTimeIntervalItem)=>()",
    Clone="(TotalCountTimeIntervalItem)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(TotalCountTimeIntervalItem)=>()",
    FindFirstAncestor="(TotalCountTimeIntervalItem,string)=>(any)",
    FindFirstAncestorOfClass="(TotalCountTimeIntervalItem,string)=>(any)",
    FindFirstAncestorWhichIsA="(TotalCountTimeIntervalItem,string)=>(any)",
    FindFirstChild="(TotalCountTimeIntervalItem,string,boolean)=>(any)",
    FindFirstChildOfClass="(TotalCountTimeIntervalItem,string)=>(any)",
    FindFirstChildWhichIsA="(TotalCountTimeIntervalItem,string,boolean)=>(any)",
    GetAttribute="(TotalCountTimeIntervalItem,string)=>(any)",
    GetAttributeChangedSignal="(TotalCountTimeIntervalItem,string)=>(any)",
    GetAttributes="(TotalCountTimeIntervalItem)=>(any)",
    GetChildren="(TotalCountTimeIntervalItem)=>(any)",
    GetDebugId="(TotalCountTimeIntervalItem,number)=>(string)",
    GetDescendants="(TotalCountTimeIntervalItem)=>(any)",
    GetFullName="(TotalCountTimeIntervalItem)=>(string)",
    GetPropertyChangedSignal="(TotalCountTimeIntervalItem,string)=>(any)",
    GetValue="(TotalCountTimeIntervalItem)=>(number)",
    GetValueString="(TotalCountTimeIntervalItem)=>(string)",
    IsA="(TotalCountTimeIntervalItem,string)=>(boolean)",
    IsAncestorOf="(TotalCountTimeIntervalItem,any)=>(boolean)",
    IsDescendantOf="(TotalCountTimeIntervalItem,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(TotalCountTimeIntervalItem)=>()",
    RobloxLocked="boolean",
    SetAttribute="(TotalCountTimeIntervalItem,string,any)=>()",
    Tags="any",
    WaitForChild="(TotalCountTimeIntervalItem,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(TotalCountTimeIntervalItem)=>(any)",
    className="string",
    clone="(TotalCountTimeIntervalItem)=>(any)",
    destroy="(TotalCountTimeIntervalItem)=>()",
    findFirstChild="(TotalCountTimeIntervalItem,string,boolean)=>(any)",
    getChildren="(TotalCountTimeIntervalItem)=>(any)",
    isA="(TotalCountTimeIntervalItem,string)=>(boolean)",
    isDescendantOf="(TotalCountTimeIntervalItem,any)=>(boolean)",
    remove="(TotalCountTimeIntervalItem)=>()"}


, Trail={
    AncestryChanged="Event",
    Archivable="boolean",
    Attachment0="any",
    Attachment1="any",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    Clear="(Trail)=>()",
    ClearAllChildren="(Trail)=>()",
    Clone="(Trail)=>(any)",
    Color="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Trail)=>()",
    Enabled="boolean",
    FaceCamera="boolean",
    FindFirstAncestor="(Trail,string)=>(any)",
    FindFirstAncestorOfClass="(Trail,string)=>(any)",
    FindFirstAncestorWhichIsA="(Trail,string)=>(any)",
    FindFirstChild="(Trail,string,boolean)=>(any)",
    FindFirstChildOfClass="(Trail,string)=>(any)",
    FindFirstChildWhichIsA="(Trail,string,boolean)=>(any)",
    GetAttribute="(Trail,string)=>(any)",
    GetAttributeChangedSignal="(Trail,string)=>(any)",
    GetAttributes="(Trail)=>(any)",
    GetChildren="(Trail)=>(any)",
    GetDebugId="(Trail,number)=>(string)",
    GetDescendants="(Trail)=>(any)",
    GetFullName="(Trail)=>(string)",
    GetPropertyChangedSignal="(Trail,string)=>(any)",
    IsA="(Trail,string)=>(boolean)",
    IsAncestorOf="(Trail,any)=>(boolean)",
    IsDescendantOf="(Trail,any)=>(boolean)",
    Lifetime="number",
    LightEmission="number",
    LightInfluence="number",
    MaxLength="number",
    MinLength="number",
    Name="string",
    OnClearRequested="Event",
    Parent="any",
    Remove="(Trail)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Trail,string,any)=>()",
    Tags="any",
    Texture="any",
    TextureLength="number",
    TextureMode="any",
    Transparency="any",
    WaitForChild="(Trail,string,number)=>(any)",
    WidthScale="any",
    archivable="boolean",
    childAdded="Event",
    children="(Trail)=>(any)",
    className="string",
    clone="(Trail)=>(any)",
    destroy="(Trail)=>()",
    findFirstChild="(Trail,string,boolean)=>(any)",
    getChildren="(Trail)=>(any)",
    isA="(Trail,string)=>(boolean)",
    isDescendantOf="(Trail,any)=>(boolean)",
    remove="(Trail)=>()"}


, TouchTransmitter={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(TouchTransmitter)=>()",
    Clone="(TouchTransmitter)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(TouchTransmitter)=>()",
    FindFirstAncestor="(TouchTransmitter,string)=>(any)",
    FindFirstAncestorOfClass="(TouchTransmitter,string)=>(any)",
    FindFirstAncestorWhichIsA="(TouchTransmitter,string)=>(any)",
    FindFirstChild="(TouchTransmitter,string,boolean)=>(any)",
    FindFirstChildOfClass="(TouchTransmitter,string)=>(any)",
    FindFirstChildWhichIsA="(TouchTransmitter,string,boolean)=>(any)",
    GetAttribute="(TouchTransmitter,string)=>(any)",
    GetAttributeChangedSignal="(TouchTransmitter,string)=>(any)",
    GetAttributes="(TouchTransmitter)=>(any)",
    GetChildren="(TouchTransmitter)=>(any)",
    GetDebugId="(TouchTransmitter,number)=>(string)",
    GetDescendants="(TouchTransmitter)=>(any)",
    GetFullName="(TouchTransmitter)=>(string)",
    GetPropertyChangedSignal="(TouchTransmitter,string)=>(any)",
    IsA="(TouchTransmitter,string)=>(boolean)",
    IsAncestorOf="(TouchTransmitter,any)=>(boolean)",
    IsDescendantOf="(TouchTransmitter,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(TouchTransmitter)=>()",
    RobloxLocked="boolean",
    SetAttribute="(TouchTransmitter,string,any)=>()",
    Tags="any",
    WaitForChild="(TouchTransmitter,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(TouchTransmitter)=>(any)",
    className="string",
    clone="(TouchTransmitter)=>(any)",
    destroy="(TouchTransmitter)=>()",
    findFirstChild="(TouchTransmitter,string,boolean)=>(any)",
    getChildren="(TouchTransmitter)=>(any)",
    isA="(TouchTransmitter,string)=>(boolean)",
    isDescendantOf="(TouchTransmitter,any)=>(boolean)",
    remove="(TouchTransmitter)=>()"}


, Translator={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Translator)=>()",
    Clone="(Translator)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Translator)=>()",
    FindFirstAncestor="(Translator,string)=>(any)",
    FindFirstAncestorOfClass="(Translator,string)=>(any)",
    FindFirstAncestorWhichIsA="(Translator,string)=>(any)",
    FindFirstChild="(Translator,string,boolean)=>(any)",
    FindFirstChildOfClass="(Translator,string)=>(any)",
    FindFirstChildWhichIsA="(Translator,string,boolean)=>(any)",
    FormatByKey="(Translator,string,any)=>(string)",
    GetAttribute="(Translator,string)=>(any)",
    GetAttributeChangedSignal="(Translator,string)=>(any)",
    GetAttributes="(Translator)=>(any)",
    GetChildren="(Translator)=>(any)",
    GetDebugId="(Translator,number)=>(string)",
    GetDescendants="(Translator)=>(any)",
    GetFullName="(Translator)=>(string)",
    GetPropertyChangedSignal="(Translator,string)=>(any)",
    IsA="(Translator,string)=>(boolean)",
    IsAncestorOf="(Translator,any)=>(boolean)",
    IsDescendantOf="(Translator,any)=>(boolean)",
    LocaleId="string",
    Name="string",
    Parent="any",
    Remove="(Translator)=>()",
    RobloxLocked="boolean",
    RobloxOnlyTranslate="(Translator,any,string)=>(string)",
    SetAttribute="(Translator,string,any)=>()",
    Tags="any",
    Translate="(Translator,any,string)=>(string)",
    WaitForChild="(Translator,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Translator)=>(any)",
    className="string",
    clone="(Translator)=>(any)",
    destroy="(Translator)=>()",
    findFirstChild="(Translator,string,boolean)=>(any)",
    getChildren="(Translator)=>(any)",
    isA="(Translator,string)=>(boolean)",
    isDescendantOf="(Translator,any)=>(boolean)",
    remove="(Translator)=>()"}


, TremoloSoundEffect={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(TremoloSoundEffect)=>()",
    Clone="(TremoloSoundEffect)=>(any)",
    DataCost="number",
    Depth="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(TremoloSoundEffect)=>()",
    Duty="number",
    Enabled="boolean",
    FindFirstAncestor="(TremoloSoundEffect,string)=>(any)",
    FindFirstAncestorOfClass="(TremoloSoundEffect,string)=>(any)",
    FindFirstAncestorWhichIsA="(TremoloSoundEffect,string)=>(any)",
    FindFirstChild="(TremoloSoundEffect,string,boolean)=>(any)",
    FindFirstChildOfClass="(TremoloSoundEffect,string)=>(any)",
    FindFirstChildWhichIsA="(TremoloSoundEffect,string,boolean)=>(any)",
    Frequency="number",
    GetAttribute="(TremoloSoundEffect,string)=>(any)",
    GetAttributeChangedSignal="(TremoloSoundEffect,string)=>(any)",
    GetAttributes="(TremoloSoundEffect)=>(any)",
    GetChildren="(TremoloSoundEffect)=>(any)",
    GetDebugId="(TremoloSoundEffect,number)=>(string)",
    GetDescendants="(TremoloSoundEffect)=>(any)",
    GetFullName="(TremoloSoundEffect)=>(string)",
    GetPropertyChangedSignal="(TremoloSoundEffect,string)=>(any)",
    IsA="(TremoloSoundEffect,string)=>(boolean)",
    IsAncestorOf="(TremoloSoundEffect,any)=>(boolean)",
    IsDescendantOf="(TremoloSoundEffect,any)=>(boolean)",
    Name="string",
    Parent="any",
    Priority="number",
    Remove="(TremoloSoundEffect)=>()",
    RobloxLocked="boolean",
    SetAttribute="(TremoloSoundEffect,string,any)=>()",
    Tags="any",
    WaitForChild="(TremoloSoundEffect,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(TremoloSoundEffect)=>(any)",
    className="string",
    clone="(TremoloSoundEffect)=>(any)",
    destroy="(TremoloSoundEffect)=>()",
    findFirstChild="(TremoloSoundEffect,string,boolean)=>(any)",
    getChildren="(TremoloSoundEffect)=>(any)",
    isA="(TremoloSoundEffect,string)=>(boolean)",
    isDescendantOf="(TremoloSoundEffect,any)=>(boolean)",
    remove="(TremoloSoundEffect)=>()"}


, Tween={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Cancel="(Tween)=>()",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Tween)=>()",
    Clone="(Tween)=>(any)",
    Completed="Event",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Tween)=>()",
    FindFirstAncestor="(Tween,string)=>(any)",
    FindFirstAncestorOfClass="(Tween,string)=>(any)",
    FindFirstAncestorWhichIsA="(Tween,string)=>(any)",
    FindFirstChild="(Tween,string,boolean)=>(any)",
    FindFirstChildOfClass="(Tween,string)=>(any)",
    FindFirstChildWhichIsA="(Tween,string,boolean)=>(any)",
    GetAttribute="(Tween,string)=>(any)",
    GetAttributeChangedSignal="(Tween,string)=>(any)",
    GetAttributes="(Tween)=>(any)",
    GetChildren="(Tween)=>(any)",
    GetDebugId="(Tween,number)=>(string)",
    GetDescendants="(Tween)=>(any)",
    GetFullName="(Tween)=>(string)",
    GetPropertyChangedSignal="(Tween,string)=>(any)",
    Instance="any",
    IsA="(Tween,string)=>(boolean)",
    IsAncestorOf="(Tween,any)=>(boolean)",
    IsDescendantOf="(Tween,any)=>(boolean)",
    Name="string",
    Parent="any",
    Pause="(Tween)=>()",
    Play="(Tween)=>()",
    PlaybackState="any",
    Remove="(Tween)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Tween,string,any)=>()",
    Tags="any",
    TweenInfo="any",
    WaitForChild="(Tween,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Tween)=>(any)",
    className="string",
    clone="(Tween)=>(any)",
    destroy="(Tween)=>()",
    findFirstChild="(Tween,string,boolean)=>(any)",
    getChildren="(Tween)=>(any)",
    isA="(Tween,string)=>(boolean)",
    isDescendantOf="(Tween,any)=>(boolean)",
    remove="(Tween)=>()"}


, UISizeConstraint={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(UISizeConstraint)=>()",
    Clone="(UISizeConstraint)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(UISizeConstraint)=>()",
    FindFirstAncestor="(UISizeConstraint,string)=>(any)",
    FindFirstAncestorOfClass="(UISizeConstraint,string)=>(any)",
    FindFirstAncestorWhichIsA="(UISizeConstraint,string)=>(any)",
    FindFirstChild="(UISizeConstraint,string,boolean)=>(any)",
    FindFirstChildOfClass="(UISizeConstraint,string)=>(any)",
    FindFirstChildWhichIsA="(UISizeConstraint,string,boolean)=>(any)",
    GetAttribute="(UISizeConstraint,string)=>(any)",
    GetAttributeChangedSignal="(UISizeConstraint,string)=>(any)",
    GetAttributes="(UISizeConstraint)=>(any)",
    GetChildren="(UISizeConstraint)=>(any)",
    GetDebugId="(UISizeConstraint,number)=>(string)",
    GetDescendants="(UISizeConstraint)=>(any)",
    GetFullName="(UISizeConstraint)=>(string)",
    GetPropertyChangedSignal="(UISizeConstraint,string)=>(any)",
    IsA="(UISizeConstraint,string)=>(boolean)",
    IsAncestorOf="(UISizeConstraint,any)=>(boolean)",
    IsDescendantOf="(UISizeConstraint,any)=>(boolean)",
    MaxSize="Vector2",
    MinSize="Vector2",
    Name="string",
    Parent="any",
    Remove="(UISizeConstraint)=>()",
    RobloxLocked="boolean",
    SetAttribute="(UISizeConstraint,string,any)=>()",
    Tags="any",
    WaitForChild="(UISizeConstraint,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(UISizeConstraint)=>(any)",
    className="string",
    clone="(UISizeConstraint)=>(any)",
    destroy="(UISizeConstraint)=>()",
    findFirstChild="(UISizeConstraint,string,boolean)=>(any)",
    getChildren="(UISizeConstraint)=>(any)",
    isA="(UISizeConstraint,string)=>(boolean)",
    isDescendantOf="(UISizeConstraint,any)=>(boolean)",
    remove="(UISizeConstraint)=>()"}


, TweenBase={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Cancel="(TweenBase)=>()",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(TweenBase)=>()",
    Clone="(TweenBase)=>(any)",
    Completed="Event",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(TweenBase)=>()",
    FindFirstAncestor="(TweenBase,string)=>(any)",
    FindFirstAncestorOfClass="(TweenBase,string)=>(any)",
    FindFirstAncestorWhichIsA="(TweenBase,string)=>(any)",
    FindFirstChild="(TweenBase,string,boolean)=>(any)",
    FindFirstChildOfClass="(TweenBase,string)=>(any)",
    FindFirstChildWhichIsA="(TweenBase,string,boolean)=>(any)",
    GetAttribute="(TweenBase,string)=>(any)",
    GetAttributeChangedSignal="(TweenBase,string)=>(any)",
    GetAttributes="(TweenBase)=>(any)",
    GetChildren="(TweenBase)=>(any)",
    GetDebugId="(TweenBase,number)=>(string)",
    GetDescendants="(TweenBase)=>(any)",
    GetFullName="(TweenBase)=>(string)",
    GetPropertyChangedSignal="(TweenBase,string)=>(any)",
    IsA="(TweenBase,string)=>(boolean)",
    IsAncestorOf="(TweenBase,any)=>(boolean)",
    IsDescendantOf="(TweenBase,any)=>(boolean)",
    Name="string",
    Parent="any",
    Pause="(TweenBase)=>()",
    Play="(TweenBase)=>()",
    PlaybackState="any",
    Remove="(TweenBase)=>()",
    RobloxLocked="boolean",
    SetAttribute="(TweenBase,string,any)=>()",
    Tags="any",
    WaitForChild="(TweenBase,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(TweenBase)=>(any)",
    className="string",
    clone="(TweenBase)=>(any)",
    destroy="(TweenBase)=>()",
    findFirstChild="(TweenBase,string,boolean)=>(any)",
    getChildren="(TweenBase)=>(any)",
    isA="(TweenBase,string)=>(boolean)",
    isDescendantOf="(TweenBase,any)=>(boolean)",
    remove="(TweenBase)=>()"}


, UGCValidationService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(UGCValidationService)=>()",
    Clone="(UGCValidationService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(UGCValidationService)=>()",
    FindFirstAncestor="(UGCValidationService,string)=>(any)",
    FindFirstAncestorOfClass="(UGCValidationService,string)=>(any)",
    FindFirstAncestorWhichIsA="(UGCValidationService,string)=>(any)",
    FindFirstChild="(UGCValidationService,string,boolean)=>(any)",
    FindFirstChildOfClass="(UGCValidationService,string)=>(any)",
    FindFirstChildWhichIsA="(UGCValidationService,string,boolean)=>(any)",
    GetAttribute="(UGCValidationService,string)=>(any)",
    GetAttributeChangedSignal="(UGCValidationService,string)=>(any)",
    GetAttributes="(UGCValidationService)=>(any)",
    GetChildren="(UGCValidationService)=>(any)",
    GetDebugId="(UGCValidationService,number)=>(string)",
    GetDescendants="(UGCValidationService)=>(any)",
    GetFullName="(UGCValidationService)=>(string)",
    GetMeshTriCount="(UGCValidationService,string)=>(number)",
    GetMeshTriCountSync="(UGCValidationService,string)=>(number)",
    GetMeshVerts="(UGCValidationService,string)=>(any)",
    GetMeshVertsSync="(UGCValidationService,string)=>(any)",
    GetPropertyChangedSignal="(UGCValidationService,string)=>(any)",
    GetTextureSize="(UGCValidationService,string)=>(Vector2)",
    GetTextureSizeSync="(UGCValidationService,string)=>(Vector2)",
    IsA="(UGCValidationService,string)=>(boolean)",
    IsAncestorOf="(UGCValidationService,any)=>(boolean)",
    IsDescendantOf="(UGCValidationService,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(UGCValidationService)=>()",
    RobloxLocked="boolean",
    SetAttribute="(UGCValidationService,string,any)=>()",
    Tags="any",
    WaitForChild="(UGCValidationService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(UGCValidationService)=>(any)",
    className="string",
    clone="(UGCValidationService)=>(any)",
    destroy="(UGCValidationService)=>()",
    findFirstChild="(UGCValidationService,string,boolean)=>(any)",
    getChildren="(UGCValidationService)=>(any)",
    isA="(UGCValidationService,string)=>(boolean)",
    isDescendantOf="(UGCValidationService,any)=>(boolean)",
    remove="(UGCValidationService)=>()"}


, UIBase={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(UIBase)=>()",
    Clone="(UIBase)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(UIBase)=>()",
    FindFirstAncestor="(UIBase,string)=>(any)",
    FindFirstAncestorOfClass="(UIBase,string)=>(any)",
    FindFirstAncestorWhichIsA="(UIBase,string)=>(any)",
    FindFirstChild="(UIBase,string,boolean)=>(any)",
    FindFirstChildOfClass="(UIBase,string)=>(any)",
    FindFirstChildWhichIsA="(UIBase,string,boolean)=>(any)",
    GetAttribute="(UIBase,string)=>(any)",
    GetAttributeChangedSignal="(UIBase,string)=>(any)",
    GetAttributes="(UIBase)=>(any)",
    GetChildren="(UIBase)=>(any)",
    GetDebugId="(UIBase,number)=>(string)",
    GetDescendants="(UIBase)=>(any)",
    GetFullName="(UIBase)=>(string)",
    GetPropertyChangedSignal="(UIBase,string)=>(any)",
    IsA="(UIBase,string)=>(boolean)",
    IsAncestorOf="(UIBase,any)=>(boolean)",
    IsDescendantOf="(UIBase,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(UIBase)=>()",
    RobloxLocked="boolean",
    SetAttribute="(UIBase,string,any)=>()",
    Tags="any",
    WaitForChild="(UIBase,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(UIBase)=>(any)",
    className="string",
    clone="(UIBase)=>(any)",
    destroy="(UIBase)=>()",
    findFirstChild="(UIBase,string,boolean)=>(any)",
    getChildren="(UIBase)=>(any)",
    isA="(UIBase,string)=>(boolean)",
    isDescendantOf="(UIBase,any)=>(boolean)",
    remove="(UIBase)=>()"}


, UIComponent={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(UIComponent)=>()",
    Clone="(UIComponent)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(UIComponent)=>()",
    FindFirstAncestor="(UIComponent,string)=>(any)",
    FindFirstAncestorOfClass="(UIComponent,string)=>(any)",
    FindFirstAncestorWhichIsA="(UIComponent,string)=>(any)",
    FindFirstChild="(UIComponent,string,boolean)=>(any)",
    FindFirstChildOfClass="(UIComponent,string)=>(any)",
    FindFirstChildWhichIsA="(UIComponent,string,boolean)=>(any)",
    GetAttribute="(UIComponent,string)=>(any)",
    GetAttributeChangedSignal="(UIComponent,string)=>(any)",
    GetAttributes="(UIComponent)=>(any)",
    GetChildren="(UIComponent)=>(any)",
    GetDebugId="(UIComponent,number)=>(string)",
    GetDescendants="(UIComponent)=>(any)",
    GetFullName="(UIComponent)=>(string)",
    GetPropertyChangedSignal="(UIComponent,string)=>(any)",
    IsA="(UIComponent,string)=>(boolean)",
    IsAncestorOf="(UIComponent,any)=>(boolean)",
    IsDescendantOf="(UIComponent,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(UIComponent)=>()",
    RobloxLocked="boolean",
    SetAttribute="(UIComponent,string,any)=>()",
    Tags="any",
    WaitForChild="(UIComponent,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(UIComponent)=>(any)",
    className="string",
    clone="(UIComponent)=>(any)",
    destroy="(UIComponent)=>()",
    findFirstChild="(UIComponent,string,boolean)=>(any)",
    getChildren="(UIComponent)=>(any)",
    isA="(UIComponent,string)=>(boolean)",
    isDescendantOf="(UIComponent,any)=>(boolean)",
    remove="(UIComponent)=>()"}


, UIConstraint={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(UIConstraint)=>()",
    Clone="(UIConstraint)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(UIConstraint)=>()",
    FindFirstAncestor="(UIConstraint,string)=>(any)",
    FindFirstAncestorOfClass="(UIConstraint,string)=>(any)",
    FindFirstAncestorWhichIsA="(UIConstraint,string)=>(any)",
    FindFirstChild="(UIConstraint,string,boolean)=>(any)",
    FindFirstChildOfClass="(UIConstraint,string)=>(any)",
    FindFirstChildWhichIsA="(UIConstraint,string,boolean)=>(any)",
    GetAttribute="(UIConstraint,string)=>(any)",
    GetAttributeChangedSignal="(UIConstraint,string)=>(any)",
    GetAttributes="(UIConstraint)=>(any)",
    GetChildren="(UIConstraint)=>(any)",
    GetDebugId="(UIConstraint,number)=>(string)",
    GetDescendants="(UIConstraint)=>(any)",
    GetFullName="(UIConstraint)=>(string)",
    GetPropertyChangedSignal="(UIConstraint,string)=>(any)",
    IsA="(UIConstraint,string)=>(boolean)",
    IsAncestorOf="(UIConstraint,any)=>(boolean)",
    IsDescendantOf="(UIConstraint,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(UIConstraint)=>()",
    RobloxLocked="boolean",
    SetAttribute="(UIConstraint,string,any)=>()",
    Tags="any",
    WaitForChild="(UIConstraint,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(UIConstraint)=>(any)",
    className="string",
    clone="(UIConstraint)=>(any)",
    destroy="(UIConstraint)=>()",
    findFirstChild="(UIConstraint,string,boolean)=>(any)",
    getChildren="(UIConstraint)=>(any)",
    isA="(UIConstraint,string)=>(boolean)",
    isDescendantOf="(UIConstraint,any)=>(boolean)",
    remove="(UIConstraint)=>()"}


, UIGradient={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(UIGradient)=>()",
    Clone="(UIGradient)=>(any)",
    Color="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(UIGradient)=>()",
    FindFirstAncestor="(UIGradient,string)=>(any)",
    FindFirstAncestorOfClass="(UIGradient,string)=>(any)",
    FindFirstAncestorWhichIsA="(UIGradient,string)=>(any)",
    FindFirstChild="(UIGradient,string,boolean)=>(any)",
    FindFirstChildOfClass="(UIGradient,string)=>(any)",
    FindFirstChildWhichIsA="(UIGradient,string,boolean)=>(any)",
    GetAttribute="(UIGradient,string)=>(any)",
    GetAttributeChangedSignal="(UIGradient,string)=>(any)",
    GetAttributes="(UIGradient)=>(any)",
    GetChildren="(UIGradient)=>(any)",
    GetDebugId="(UIGradient,number)=>(string)",
    GetDescendants="(UIGradient)=>(any)",
    GetFullName="(UIGradient)=>(string)",
    GetPropertyChangedSignal="(UIGradient,string)=>(any)",
    IsA="(UIGradient,string)=>(boolean)",
    IsAncestorOf="(UIGradient,any)=>(boolean)",
    IsDescendantOf="(UIGradient,any)=>(boolean)",
    Name="string",
    Offset="Vector2",
    Parent="any",
    Remove="(UIGradient)=>()",
    RobloxLocked="boolean",
    Rotation="number",
    SetAttribute="(UIGradient,string,any)=>()",
    Tags="any",
    Transparency="any",
    WaitForChild="(UIGradient,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(UIGradient)=>(any)",
    className="string",
    clone="(UIGradient)=>(any)",
    destroy="(UIGradient)=>()",
    findFirstChild="(UIGradient,string,boolean)=>(any)",
    getChildren="(UIGradient)=>(any)",
    isA="(UIGradient,string)=>(boolean)",
    isDescendantOf="(UIGradient,any)=>(boolean)",
    remove="(UIGradient)=>()"}


, UIGridLayout={
    AbsoluteCellCount="Vector2",
    AbsoluteCellSize="Vector2",
    AbsoluteContentSize="Vector2",
    AncestryChanged="Event",
    ApplyLayout="(UIGridLayout)=>()",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    CellPadding="UDim2",
    CellSize="UDim2",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(UIGridLayout)=>()",
    Clone="(UIGridLayout)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(UIGridLayout)=>()",
    FillDirection="any",
    FillDirectionMaxCells="number",
    FindFirstAncestor="(UIGridLayout,string)=>(any)",
    FindFirstAncestorOfClass="(UIGridLayout,string)=>(any)",
    FindFirstAncestorWhichIsA="(UIGridLayout,string)=>(any)",
    FindFirstChild="(UIGridLayout,string,boolean)=>(any)",
    FindFirstChildOfClass="(UIGridLayout,string)=>(any)",
    FindFirstChildWhichIsA="(UIGridLayout,string,boolean)=>(any)",
    GetAttribute="(UIGridLayout,string)=>(any)",
    GetAttributeChangedSignal="(UIGridLayout,string)=>(any)",
    GetAttributes="(UIGridLayout)=>(any)",
    GetChildren="(UIGridLayout)=>(any)",
    GetDebugId="(UIGridLayout,number)=>(string)",
    GetDescendants="(UIGridLayout)=>(any)",
    GetFullName="(UIGridLayout)=>(string)",
    GetPropertyChangedSignal="(UIGridLayout,string)=>(any)",
    HorizontalAlignment="any",
    IsA="(UIGridLayout,string)=>(boolean)",
    IsAncestorOf="(UIGridLayout,any)=>(boolean)",
    IsDescendantOf="(UIGridLayout,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(UIGridLayout)=>()",
    RobloxLocked="boolean",
    SetAttribute="(UIGridLayout,string,any)=>()",
    SetCustomSortFunction="(UIGridLayout,any)=>()",
    SortOrder="any",
    StartCorner="any",
    Tags="any",
    VerticalAlignment="any",
    WaitForChild="(UIGridLayout,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(UIGridLayout)=>(any)",
    className="string",
    clone="(UIGridLayout)=>(any)",
    destroy="(UIGridLayout)=>()",
    findFirstChild="(UIGridLayout,string,boolean)=>(any)",
    getChildren="(UIGridLayout)=>(any)",
    isA="(UIGridLayout,string)=>(boolean)",
    isDescendantOf="(UIGridLayout,any)=>(boolean)",
    remove="(UIGridLayout)=>()"}


, UIGridStyleLayout={
    AbsoluteContentSize="Vector2",
    AncestryChanged="Event",
    ApplyLayout="(UIGridStyleLayout)=>()",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(UIGridStyleLayout)=>()",
    Clone="(UIGridStyleLayout)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(UIGridStyleLayout)=>()",
    FillDirection="any",
    FindFirstAncestor="(UIGridStyleLayout,string)=>(any)",
    FindFirstAncestorOfClass="(UIGridStyleLayout,string)=>(any)",
    FindFirstAncestorWhichIsA="(UIGridStyleLayout,string)=>(any)",
    FindFirstChild="(UIGridStyleLayout,string,boolean)=>(any)",
    FindFirstChildOfClass="(UIGridStyleLayout,string)=>(any)",
    FindFirstChildWhichIsA="(UIGridStyleLayout,string,boolean)=>(any)",
    GetAttribute="(UIGridStyleLayout,string)=>(any)",
    GetAttributeChangedSignal="(UIGridStyleLayout,string)=>(any)",
    GetAttributes="(UIGridStyleLayout)=>(any)",
    GetChildren="(UIGridStyleLayout)=>(any)",
    GetDebugId="(UIGridStyleLayout,number)=>(string)",
    GetDescendants="(UIGridStyleLayout)=>(any)",
    GetFullName="(UIGridStyleLayout)=>(string)",
    GetPropertyChangedSignal="(UIGridStyleLayout,string)=>(any)",
    HorizontalAlignment="any",
    IsA="(UIGridStyleLayout,string)=>(boolean)",
    IsAncestorOf="(UIGridStyleLayout,any)=>(boolean)",
    IsDescendantOf="(UIGridStyleLayout,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(UIGridStyleLayout)=>()",
    RobloxLocked="boolean",
    SetAttribute="(UIGridStyleLayout,string,any)=>()",
    SetCustomSortFunction="(UIGridStyleLayout,any)=>()",
    SortOrder="any",
    Tags="any",
    VerticalAlignment="any",
    WaitForChild="(UIGridStyleLayout,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(UIGridStyleLayout)=>(any)",
    className="string",
    clone="(UIGridStyleLayout)=>(any)",
    destroy="(UIGridStyleLayout)=>()",
    findFirstChild="(UIGridStyleLayout,string,boolean)=>(any)",
    getChildren="(UIGridStyleLayout)=>(any)",
    isA="(UIGridStyleLayout,string)=>(boolean)",
    isDescendantOf="(UIGridStyleLayout,any)=>(boolean)",
    remove="(UIGridStyleLayout)=>()"}


, UIInlineLayout={
    AbsoluteContentSize="Vector2",
    AncestryChanged="Event",
    ApplyLayout="(UIInlineLayout)=>()",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(UIInlineLayout)=>()",
    Clone="(UIInlineLayout)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(UIInlineLayout)=>()",
    FillDirection="any",
    FindFirstAncestor="(UIInlineLayout,string)=>(any)",
    FindFirstAncestorOfClass="(UIInlineLayout,string)=>(any)",
    FindFirstAncestorWhichIsA="(UIInlineLayout,string)=>(any)",
    FindFirstChild="(UIInlineLayout,string,boolean)=>(any)",
    FindFirstChildOfClass="(UIInlineLayout,string)=>(any)",
    FindFirstChildWhichIsA="(UIInlineLayout,string,boolean)=>(any)",
    GetAttribute="(UIInlineLayout,string)=>(any)",
    GetAttributeChangedSignal="(UIInlineLayout,string)=>(any)",
    GetAttributes="(UIInlineLayout)=>(any)",
    GetChildren="(UIInlineLayout)=>(any)",
    GetDebugId="(UIInlineLayout,number)=>(string)",
    GetDescendants="(UIInlineLayout)=>(any)",
    GetFullName="(UIInlineLayout)=>(string)",
    GetPropertyChangedSignal="(UIInlineLayout,string)=>(any)",
    HorizontalAlignment="any",
    InlineAlignment="any",
    InlinePadding="UDim2",
    IsA="(UIInlineLayout,string)=>(boolean)",
    IsAncestorOf="(UIInlineLayout,any)=>(boolean)",
    IsDescendantOf="(UIInlineLayout,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(UIInlineLayout)=>()",
    RobloxLocked="boolean",
    SetAttribute="(UIInlineLayout,string,any)=>()",
    SetCustomSortFunction="(UIInlineLayout,any)=>()",
    SortOrder="any",
    Tags="any",
    VerticalAlignment="any",
    WaitForChild="(UIInlineLayout,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(UIInlineLayout)=>(any)",
    className="string",
    clone="(UIInlineLayout)=>(any)",
    destroy="(UIInlineLayout)=>()",
    findFirstChild="(UIInlineLayout,string,boolean)=>(any)",
    getChildren="(UIInlineLayout)=>(any)",
    isA="(UIInlineLayout,string)=>(boolean)",
    isDescendantOf="(UIInlineLayout,any)=>(boolean)",
    remove="(UIInlineLayout)=>()"}


, UIPageLayout={
    AbsoluteContentSize="Vector2",
    AncestryChanged="Event",
    Animated="boolean",
    ApplyLayout="(UIPageLayout)=>()",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    Circular="boolean",
    ClassName="string",
    ClearAllChildren="(UIPageLayout)=>()",
    Clone="(UIPageLayout)=>(any)",
    CurrentPage="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(UIPageLayout)=>()",
    EasingDirection="any",
    EasingStyle="any",
    FillDirection="any",
    FindFirstAncestor="(UIPageLayout,string)=>(any)",
    FindFirstAncestorOfClass="(UIPageLayout,string)=>(any)",
    FindFirstAncestorWhichIsA="(UIPageLayout,string)=>(any)",
    FindFirstChild="(UIPageLayout,string,boolean)=>(any)",
    FindFirstChildOfClass="(UIPageLayout,string)=>(any)",
    FindFirstChildWhichIsA="(UIPageLayout,string,boolean)=>(any)",
    GamepadInputEnabled="boolean",
    GetAttribute="(UIPageLayout,string)=>(any)",
    GetAttributeChangedSignal="(UIPageLayout,string)=>(any)",
    GetAttributes="(UIPageLayout)=>(any)",
    GetChildren="(UIPageLayout)=>(any)",
    GetDebugId="(UIPageLayout,number)=>(string)",
    GetDescendants="(UIPageLayout)=>(any)",
    GetFullName="(UIPageLayout)=>(string)",
    GetPropertyChangedSignal="(UIPageLayout,string)=>(any)",
    HorizontalAlignment="any",
    IsA="(UIPageLayout,string)=>(boolean)",
    IsAncestorOf="(UIPageLayout,any)=>(boolean)",
    IsDescendantOf="(UIPageLayout,any)=>(boolean)",
    JumpTo="(UIPageLayout,any)=>()",
    JumpToIndex="(UIPageLayout,number)=>()",
    Name="string",
    Next="(UIPageLayout)=>()",
    Padding="UDim",
    PageEnter="Event",
    PageLeave="Event",
    Parent="any",
    Previous="(UIPageLayout)=>()",
    Remove="(UIPageLayout)=>()",
    RobloxLocked="boolean",
    ScrollWheelInputEnabled="boolean",
    SetAttribute="(UIPageLayout,string,any)=>()",
    SetCustomSortFunction="(UIPageLayout,any)=>()",
    SortOrder="any",
    Stopped="Event",
    Tags="any",
    TouchInputEnabled="boolean",
    TweenTime="number",
    VerticalAlignment="any",
    WaitForChild="(UIPageLayout,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(UIPageLayout)=>(any)",
    className="string",
    clone="(UIPageLayout)=>(any)",
    destroy="(UIPageLayout)=>()",
    findFirstChild="(UIPageLayout,string,boolean)=>(any)",
    getChildren="(UIPageLayout)=>(any)",
    isA="(UIPageLayout,string)=>(boolean)",
    isDescendantOf="(UIPageLayout,any)=>(boolean)",
    remove="(UIPageLayout)=>()"}


, UIScale={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(UIScale)=>()",
    Clone="(UIScale)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(UIScale)=>()",
    FindFirstAncestor="(UIScale,string)=>(any)",
    FindFirstAncestorOfClass="(UIScale,string)=>(any)",
    FindFirstAncestorWhichIsA="(UIScale,string)=>(any)",
    FindFirstChild="(UIScale,string,boolean)=>(any)",
    FindFirstChildOfClass="(UIScale,string)=>(any)",
    FindFirstChildWhichIsA="(UIScale,string,boolean)=>(any)",
    GetAttribute="(UIScale,string)=>(any)",
    GetAttributeChangedSignal="(UIScale,string)=>(any)",
    GetAttributes="(UIScale)=>(any)",
    GetChildren="(UIScale)=>(any)",
    GetDebugId="(UIScale,number)=>(string)",
    GetDescendants="(UIScale)=>(any)",
    GetFullName="(UIScale)=>(string)",
    GetPropertyChangedSignal="(UIScale,string)=>(any)",
    IsA="(UIScale,string)=>(boolean)",
    IsAncestorOf="(UIScale,any)=>(boolean)",
    IsDescendantOf="(UIScale,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(UIScale)=>()",
    RobloxLocked="boolean",
    Scale="number",
    SetAttribute="(UIScale,string,any)=>()",
    Tags="any",
    WaitForChild="(UIScale,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(UIScale)=>(any)",
    className="string",
    clone="(UIScale)=>(any)",
    destroy="(UIScale)=>()",
    findFirstChild="(UIScale,string,boolean)=>(any)",
    getChildren="(UIScale)=>(any)",
    isA="(UIScale,string)=>(boolean)",
    isDescendantOf="(UIScale,any)=>(boolean)",
    remove="(UIScale)=>()"}


, VRService={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(VRService)=>()",
    Clone="(VRService)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(VRService)=>()",
    FindFirstAncestor="(VRService,string)=>(any)",
    FindFirstAncestorOfClass="(VRService,string)=>(any)",
    FindFirstAncestorWhichIsA="(VRService,string)=>(any)",
    FindFirstChild="(VRService,string,boolean)=>(any)",
    FindFirstChildOfClass="(VRService,string)=>(any)",
    FindFirstChildWhichIsA="(VRService,string,boolean)=>(any)",
    GetAttribute="(VRService,string)=>(any)",
    GetAttributeChangedSignal="(VRService,string)=>(any)",
    GetAttributes="(VRService)=>(any)",
    GetChildren="(VRService)=>(any)",
    GetDebugId="(VRService,number)=>(string)",
    GetDescendants="(VRService)=>(any)",
    GetFullName="(VRService)=>(string)",
    GetPropertyChangedSignal="(VRService,string)=>(any)",
    GetTouchpadMode="(VRService,any)=>(any)",
    GetUserCFrame="(VRService,any)=>(CFrame)",
    GetUserCFrameEnabled="(VRService,any)=>(boolean)",
    GuiInputUserCFrame="any",
    IsA="(VRService,string)=>(boolean)",
    IsAncestorOf="(VRService,any)=>(boolean)",
    IsDescendantOf="(VRService,any)=>(boolean)",
    Name="string",
    NavigationRequested="Event",
    Parent="any",
    RecenterUserHeadCFrame="(VRService)=>()",
    Remove="(VRService)=>()",
    RequestNavigation="(VRService,CFrame,any)=>()",
    RobloxLocked="boolean",
    SetAttribute="(VRService,string,any)=>()",
    SetTouchpadMode="(VRService,any,any)=>()",
    Tags="any",
    TouchpadModeChanged="Event",
    UserCFrameChanged="Event",
    UserCFrameEnabled="Event",
    VRDeviceName="string",
    VREnabled="boolean",
    WaitForChild="(VRService,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(VRService)=>(any)",
    className="string",
    clone="(VRService)=>(any)",
    destroy="(VRService)=>()",
    findFirstChild="(VRService,string,boolean)=>(any)",
    getChildren="(VRService)=>(any)",
    isA="(VRService,string)=>(boolean)",
    isDescendantOf="(VRService,any)=>(boolean)",
    remove="(VRService)=>()"}


, VehicleController={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BindButton="(VehicleController,any,string)=>()",
    ButtonChanged="Event",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(VehicleController)=>()",
    Clone="(VehicleController)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(VehicleController)=>()",
    FindFirstAncestor="(VehicleController,string)=>(any)",
    FindFirstAncestorOfClass="(VehicleController,string)=>(any)",
    FindFirstAncestorWhichIsA="(VehicleController,string)=>(any)",
    FindFirstChild="(VehicleController,string,boolean)=>(any)",
    FindFirstChildOfClass="(VehicleController,string)=>(any)",
    FindFirstChildWhichIsA="(VehicleController,string,boolean)=>(any)",
    GetAttribute="(VehicleController,string)=>(any)",
    GetAttributeChangedSignal="(VehicleController,string)=>(any)",
    GetAttributes="(VehicleController)=>(any)",
    GetButton="(VehicleController,any)=>(boolean)",
    GetChildren="(VehicleController)=>(any)",
    GetDebugId="(VehicleController,number)=>(string)",
    GetDescendants="(VehicleController)=>(any)",
    GetFullName="(VehicleController)=>(string)",
    GetPropertyChangedSignal="(VehicleController,string)=>(any)",
    IsA="(VehicleController,string)=>(boolean)",
    IsAncestorOf="(VehicleController,any)=>(boolean)",
    IsDescendantOf="(VehicleController,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(VehicleController)=>()",
    RobloxLocked="boolean",
    SetAttribute="(VehicleController,string,any)=>()",
    Tags="any",
    UnbindButton="(VehicleController,any)=>()",
    WaitForChild="(VehicleController,string,number)=>(any)",
    archivable="boolean",
    bindButton="(VehicleController,any,string)=>()",
    childAdded="Event",
    children="(VehicleController)=>(any)",
    className="string",
    clone="(VehicleController)=>(any)",
    destroy="(VehicleController)=>()",
    findFirstChild="(VehicleController,string,boolean)=>(any)",
    getButton="(VehicleController,any)=>(boolean)",
    getChildren="(VehicleController)=>(any)",
    isA="(VehicleController,string)=>(boolean)",
    isDescendantOf="(VehicleController,any)=>(boolean)",
    remove="(VehicleController)=>()"}


, VehicleSeat={
    AncestryChanged="Event",
    Anchored="boolean",
    Archivable="boolean",
    AreHingesDetected="number",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BackParamA="number",
    BackParamB="number",
    BackSurface="any",
    BackSurfaceInput="any",
    BottomParamA="number",
    BottomParamB="number",
    BottomSurface="any",
    BottomSurfaceInput="any",
    BreakJoints="(VehicleSeat)=>()",
    BrickColor="any",
    CFrame="CFrame",
    CanCollide="boolean",
    CanCollideWith="(VehicleSeat,any)=>(boolean)",
    CanSetNetworkOwnership="(VehicleSeat)=>(any)",
    CastShadow="boolean",
    CenterOfMass="Vector3",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(VehicleSeat)=>()",
    Clone="(VehicleSeat)=>(any)",
    CollisionGroupId="number",
    Color="Color3",
    Color3uint8="any",
    CustomPhysicalProperties="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(VehicleSeat)=>()",
    Disabled="boolean",
    DraggingV1="boolean",
    Elasticity="number",
    FindFirstAncestor="(VehicleSeat,string)=>(any)",
    FindFirstAncestorOfClass="(VehicleSeat,string)=>(any)",
    FindFirstAncestorWhichIsA="(VehicleSeat,string)=>(any)",
    FindFirstChild="(VehicleSeat,string,boolean)=>(any)",
    FindFirstChildOfClass="(VehicleSeat,string)=>(any)",
    FindFirstChildWhichIsA="(VehicleSeat,string,boolean)=>(any)",
    Friction="number",
    FrontParamA="number",
    FrontParamB="number",
    FrontSurface="any",
    FrontSurfaceInput="any",
    GetAttribute="(VehicleSeat,string)=>(any)",
    GetAttributeChangedSignal="(VehicleSeat,string)=>(any)",
    GetAttributes="(VehicleSeat)=>(any)",
    GetChildren="(VehicleSeat)=>(any)",
    GetConnectedParts="(VehicleSeat,boolean)=>(any)",
    GetDebugId="(VehicleSeat,number)=>(string)",
    GetDescendants="(VehicleSeat)=>(any)",
    GetFullName="(VehicleSeat)=>(string)",
    GetJoints="(VehicleSeat)=>(any)",
    GetMass="(VehicleSeat)=>(number)",
    GetNetworkOwner="(VehicleSeat)=>(any)",
    GetNetworkOwnershipAuto="(VehicleSeat)=>(boolean)",
    GetPropertyChangedSignal="(VehicleSeat,string)=>(any)",
    GetRenderCFrame="(VehicleSeat)=>(CFrame)",
    GetRootPart="(VehicleSeat)=>(any)",
    GetTouchingParts="(VehicleSeat)=>(any)",
    HeadsUpDisplay="boolean",
    IsA="(VehicleSeat,string)=>(boolean)",
    IsAncestorOf="(VehicleSeat,any)=>(boolean)",
    IsDescendantOf="(VehicleSeat,any)=>(boolean)",
    IsGrounded="(VehicleSeat)=>(boolean)",
    LeftParamA="number",
    LeftParamB="number",
    LeftSurface="any",
    LeftSurfaceInput="any",
    LocalSimulationTouched="Event",
    LocalTransparencyModifier="number",
    Locked="boolean",
    MakeJoints="(VehicleSeat)=>()",
    Massless="boolean",
    Material="any",
    MaxSpeed="number",
    Name="string",
    NetworkIsSleeping="boolean",
    NetworkOwnerChanged="Event",
    NetworkOwnerV3="any",
    NetworkOwnershipRule="any",
    Occupant="any",
    Orientation="Vector3",
    OutfitChanged="Event",
    Parent="any",
    Position="Vector3",
    ReceiveAge="number",
    Reflectance="number",
    RemoteCreateSeatWeld="Event",
    RemoteDestroySeatWeld="Event",
    Remove="(VehicleSeat)=>()",
    Resize="(VehicleSeat,any,number)=>(boolean)",
    ResizeIncrement="number",
    ResizeableFaces="any",
    RightParamA="number",
    RightParamB="number",
    RightSurface="any",
    RightSurfaceInput="any",
    RobloxLocked="boolean",
    RootPriority="number",
    RotVelocity="Vector3",
    Rotation="Vector3",
    SetAttribute="(VehicleSeat,string,any)=>()",
    SetNetworkOwner="(VehicleSeat,any)=>()",
    SetNetworkOwnershipAuto="(VehicleSeat)=>()",
    Sit="(VehicleSeat,any)=>()",
    Size="Vector3",
    SpecificGravity="number",
    Steer="number",
    SteerFloat="number",
    StoppedTouching="Event",
    SubtractAsync="(VehicleSeat,any,any,any)=>(any)",
    Tags="any",
    Throttle="number",
    ThrottleFloat="number",
    TopParamA="number",
    TopParamB="number",
    TopSurface="any",
    TopSurfaceInput="any",
    Torque="number",
    TouchEnded="Event",
    Touched="Event",
    Transparency="number",
    TurnSpeed="number",
    UnionAsync="(VehicleSeat,any,any,any)=>(any)",
    Velocity="Vector3",
    WaitForChild="(VehicleSeat,string,number)=>(any)",
    archivable="boolean",
    breakJoints="(VehicleSeat)=>()",
    brickColor="any",
    childAdded="Event",
    children="(VehicleSeat)=>(any)",
    className="string",
    clone="(VehicleSeat)=>(any)",
    destroy="(VehicleSeat)=>()",
    findFirstChild="(VehicleSeat,string,boolean)=>(any)",
    getChildren="(VehicleSeat)=>(any)",
    getMass="(VehicleSeat)=>(number)",
    isA="(VehicleSeat,string)=>(boolean)",
    isDescendantOf="(VehicleSeat,any)=>(boolean)",
    makeJoints="(VehicleSeat)=>()",
    remove="(VehicleSeat)=>()",
    resize="(VehicleSeat,any,number)=>(boolean)",
    siz="Vector3",
    size="Vector3",
    touched="Event"}


, VelocityMotor={
    Active="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    C0="CFrame",
    C1="CFrame",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(VelocityMotor)=>()",
    Clone="(VelocityMotor)=>(any)",
    CurrentAngle="number",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    DesiredAngle="number",
    Destroy="(VelocityMotor)=>()",
    Enabled="boolean",
    FindFirstAncestor="(VelocityMotor,string)=>(any)",
    FindFirstAncestorOfClass="(VelocityMotor,string)=>(any)",
    FindFirstAncestorWhichIsA="(VelocityMotor,string)=>(any)",
    FindFirstChild="(VelocityMotor,string,boolean)=>(any)",
    FindFirstChildOfClass="(VelocityMotor,string)=>(any)",
    FindFirstChildWhichIsA="(VelocityMotor,string,boolean)=>(any)",
    GetAttribute="(VelocityMotor,string)=>(any)",
    GetAttributeChangedSignal="(VelocityMotor,string)=>(any)",
    GetAttributes="(VelocityMotor)=>(any)",
    GetChildren="(VelocityMotor)=>(any)",
    GetDebugId="(VelocityMotor,number)=>(string)",
    GetDescendants="(VelocityMotor)=>(any)",
    GetFullName="(VelocityMotor)=>(string)",
    GetPropertyChangedSignal="(VelocityMotor,string)=>(any)",
    Hole="any",
    IsA="(VelocityMotor,string)=>(boolean)",
    IsAncestorOf="(VelocityMotor,any)=>(boolean)",
    IsAutoJoint="boolean",
    IsDescendantOf="(VelocityMotor,any)=>(boolean)",
    MaxVelocity="number",
    Name="string",
    Parent="any",
    Part0="any",
    Part1="any",
    Remove="(VelocityMotor)=>()",
    RobloxLocked="boolean",
    SetAttribute="(VelocityMotor,string,any)=>()",
    Tags="any",
    WaitForChild="(VelocityMotor,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(VelocityMotor)=>(any)",
    className="string",
    clone="(VelocityMotor)=>(any)",
    destroy="(VelocityMotor)=>()",
    findFirstChild="(VelocityMotor,string,boolean)=>(any)",
    getChildren="(VelocityMotor)=>(any)",
    isA="(VelocityMotor,string)=>(boolean)",
    isDescendantOf="(VelocityMotor,any)=>(boolean)",
    part1="any",
    remove="(VelocityMotor)=>()"}


, Visit={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Visit)=>()",
    Clone="(Visit)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Visit)=>()",
    FindFirstAncestor="(Visit,string)=>(any)",
    FindFirstAncestorOfClass="(Visit,string)=>(any)",
    FindFirstAncestorWhichIsA="(Visit,string)=>(any)",
    FindFirstChild="(Visit,string,boolean)=>(any)",
    FindFirstChildOfClass="(Visit,string)=>(any)",
    FindFirstChildWhichIsA="(Visit,string,boolean)=>(any)",
    GetAttribute="(Visit,string)=>(any)",
    GetAttributeChangedSignal="(Visit,string)=>(any)",
    GetAttributes="(Visit)=>(any)",
    GetChildren="(Visit)=>(any)",
    GetDebugId="(Visit,number)=>(string)",
    GetDescendants="(Visit)=>(any)",
    GetFullName="(Visit)=>(string)",
    GetPropertyChangedSignal="(Visit,string)=>(any)",
    IsA="(Visit,string)=>(boolean)",
    IsAncestorOf="(Visit,any)=>(boolean)",
    IsDescendantOf="(Visit,any)=>(boolean)",
    Name="string",
    Parent="any",
    Remove="(Visit)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Visit,string,any)=>()",
    Tags="any",
    WaitForChild="(Visit,string,number)=>(any)",
    archivable="boolean",
    childAdded="Event",
    children="(Visit)=>(any)",
    className="string",
    clone="(Visit)=>(any)",
    destroy="(Visit)=>()",
    findFirstChild="(Visit,string,boolean)=>(any)",
    getChildren="(Visit)=>(any)",
    isA="(Visit,string)=>(boolean)",
    isDescendantOf="(Visit,any)=>(boolean)",
    remove="(Visit)=>()"}


, WedgePart={
    AncestryChanged="Event",
    Anchored="boolean",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BackParamA="number",
    BackParamB="number",
    BackSurface="any",
    BackSurfaceInput="any",
    BottomParamA="number",
    BottomParamB="number",
    BottomSurface="any",
    BottomSurfaceInput="any",
    BreakJoints="(WedgePart)=>()",
    BrickColor="any",
    CFrame="CFrame",
    CanCollide="boolean",
    CanCollideWith="(WedgePart,any)=>(boolean)",
    CanSetNetworkOwnership="(WedgePart)=>(any)",
    CastShadow="boolean",
    CenterOfMass="Vector3",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(WedgePart)=>()",
    Clone="(WedgePart)=>(any)",
    CollisionGroupId="number",
    Color="Color3",
    Color3uint8="any",
    CustomPhysicalProperties="any",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(WedgePart)=>()",
    DraggingV1="boolean",
    Elasticity="number",
    FindFirstAncestor="(WedgePart,string)=>(any)",
    FindFirstAncestorOfClass="(WedgePart,string)=>(any)",
    FindFirstAncestorWhichIsA="(WedgePart,string)=>(any)",
    FindFirstChild="(WedgePart,string,boolean)=>(any)",
    FindFirstChildOfClass="(WedgePart,string)=>(any)",
    FindFirstChildWhichIsA="(WedgePart,string,boolean)=>(any)",
    FormFactor="any",
    Friction="number",
    FrontParamA="number",
    FrontParamB="number",
    FrontSurface="any",
    FrontSurfaceInput="any",
    GetAttribute="(WedgePart,string)=>(any)",
    GetAttributeChangedSignal="(WedgePart,string)=>(any)",
    GetAttributes="(WedgePart)=>(any)",
    GetChildren="(WedgePart)=>(any)",
    GetConnectedParts="(WedgePart,boolean)=>(any)",
    GetDebugId="(WedgePart,number)=>(string)",
    GetDescendants="(WedgePart)=>(any)",
    GetFullName="(WedgePart)=>(string)",
    GetJoints="(WedgePart)=>(any)",
    GetMass="(WedgePart)=>(number)",
    GetNetworkOwner="(WedgePart)=>(any)",
    GetNetworkOwnershipAuto="(WedgePart)=>(boolean)",
    GetPropertyChangedSignal="(WedgePart,string)=>(any)",
    GetRenderCFrame="(WedgePart)=>(CFrame)",
    GetRootPart="(WedgePart)=>(any)",
    GetTouchingParts="(WedgePart)=>(any)",
    IsA="(WedgePart,string)=>(boolean)",
    IsAncestorOf="(WedgePart,any)=>(boolean)",
    IsDescendantOf="(WedgePart,any)=>(boolean)",
    IsGrounded="(WedgePart)=>(boolean)",
    LeftParamA="number",
    LeftParamB="number",
    LeftSurface="any",
    LeftSurfaceInput="any",
    LocalSimulationTouched="Event",
    LocalTransparencyModifier="number",
    Locked="boolean",
    MakeJoints="(WedgePart)=>()",
    Massless="boolean",
    Material="any",
    Name="string",
    NetworkIsSleeping="boolean",
    NetworkOwnerChanged="Event",
    NetworkOwnerV3="any",
    NetworkOwnershipRule="any",
    Orientation="Vector3",
    OutfitChanged="Event",
    Parent="any",
    Position="Vector3",
    ReceiveAge="number",
    Reflectance="number",
    Remove="(WedgePart)=>()",
    Resize="(WedgePart,any,number)=>(boolean)",
    ResizeIncrement="number",
    ResizeableFaces="any",
    RightParamA="number",
    RightParamB="number",
    RightSurface="any",
    RightSurfaceInput="any",
    RobloxLocked="boolean",
    RootPriority="number",
    RotVelocity="Vector3",
    Rotation="Vector3",
    SetAttribute="(WedgePart,string,any)=>()",
    SetNetworkOwner="(WedgePart,any)=>()",
    SetNetworkOwnershipAuto="(WedgePart)=>()",
    Size="Vector3",
    SpecificGravity="number",
    StoppedTouching="Event",
    SubtractAsync="(WedgePart,any,any,any)=>(any)",
    Tags="any",
    TopParamA="number",
    TopParamB="number",
    TopSurface="any",
    TopSurfaceInput="any",
    TouchEnded="Event",
    Touched="Event",
    Transparency="number",
    UnionAsync="(WedgePart,any,any,any)=>(any)",
    Velocity="Vector3",
    WaitForChild="(WedgePart,string,number)=>(any)",
    archivable="boolean",
    breakJoints="(WedgePart)=>()",
    brickColor="any",
    childAdded="Event",
    children="(WedgePart)=>(any)",
    className="string",
    clone="(WedgePart)=>(any)",
    destroy="(WedgePart)=>()",
    findFirstChild="(WedgePart,string,boolean)=>(any)",
    formFactor="any",
    formFactorRaw="any",
    getChildren="(WedgePart)=>(any)",
    getMass="(WedgePart)=>(number)",
    isA="(WedgePart,string)=>(boolean)",
    isDescendantOf="(WedgePart,any)=>(boolean)",
    makeJoints="(WedgePart)=>()",
    remove="(WedgePart)=>()",
    resize="(WedgePart,any,number)=>(boolean)",
    siz="Vector3",
    size="Vector3",
    touched="Event"}


, Workspace={
    AllowThirdPartySales="boolean",
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BreakJoints="(Workspace,any)=>()",
    CalculateJumpPower="(Workspace,number,number)=>(number)",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(Workspace)=>()",
    Clone="(Workspace)=>(any)",
    CollisionGroups="string",
    CurrentCamera="any",
    DataCost="number",
    DataModelPlaceVersion="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(Workspace)=>()",
    DistributedGameTime="number",
    ExpSolverEnabled_Replicate="boolean",
    ExperimentalSolverIsEnabled="(Workspace)=>(boolean)",
    ExplicitAutoJoints="boolean",
    FallenPartsDestroyHeight="number",
    FilteringEnabled="boolean",
    FindFirstAncestor="(Workspace,string)=>(any)",
    FindFirstAncestorOfClass="(Workspace,string)=>(any)",
    FindFirstAncestorWhichIsA="(Workspace,string)=>(any)",
    FindFirstChild="(Workspace,string,boolean)=>(any)",
    FindFirstChildOfClass="(Workspace,string)=>(any)",
    FindFirstChildWhichIsA="(Workspace,string,boolean)=>(any)",
    FindPartOnRay="(Workspace,Ray,any,boolean,boolean)=>(any)",
    FindPartOnRayWithIgnoreList="(Workspace,Ray,any,boolean,boolean)=>(any)",
    FindPartOnRayWithWhitelist="(Workspace,Ray,any,boolean)=>(any)",
    FindPartsInRegion3="(Workspace,any,any,number)=>(any)",
    FindPartsInRegion3WithIgnoreList="(Workspace,any,any,number)=>(any)",
    FindPartsInRegion3WithWhiteList="(Workspace,any,any,number)=>(any)",
    GetAttribute="(Workspace,string)=>(any)",
    GetAttributeChangedSignal="(Workspace,string)=>(any)",
    GetAttributes="(Workspace)=>(any)",
    GetBoundingBox="(Workspace)=>(any)",
    GetChildren="(Workspace)=>(any)",
    GetDebugId="(Workspace,number)=>(string)",
    GetDescendants="(Workspace)=>(any)",
    GetExtentsSize="(Workspace)=>(Vector3)",
    GetFullName="(Workspace)=>(string)",
    GetModelCFrame="(Workspace)=>(CFrame)",
    GetModelSize="(Workspace)=>(Vector3)",
    GetNumAwakeParts="(Workspace)=>(number)",
    GetPhysicsThrottling="(Workspace)=>(number)",
    GetPrimaryPartCFrame="(Workspace)=>(CFrame)",
    GetPropertyChangedSignal="(Workspace,string)=>(any)",
    GetRealPhysicsFPS="(Workspace)=>(number)",
    Gravity="number",
    IsA="(Workspace,string)=>(boolean)",
    IsAncestorOf="(Workspace,any)=>(boolean)",
    IsDescendantOf="(Workspace,any)=>(boolean)",
    IsRegion3Empty="(Workspace,any,any)=>(boolean)",
    IsRegion3EmptyWithIgnoreList="(Workspace,any,any)=>(boolean)",
    JoinToOutsiders="(Workspace,any,any)=>()",
    MakeJoints="(Workspace,any)=>()",
    ModelComplete="Event",
    ModelInPrimary="CFrame",
    ModelIncomplete="Event",
    MoveTo="(Workspace,Vector3)=>()",
    Name="string",
    PGSIsEnabled="(Workspace)=>(boolean)",
    Parent="any",
    PrimaryPart="any",
    Remove="(Workspace)=>()",
    ResetOrientationToIdentity="(Workspace)=>()",
    RobloxLocked="boolean",
    SetAttribute="(Workspace,string,any)=>()",
    SetIdentityOrientation="(Workspace)=>()",
    SetPhysicsThrottleEnabled="(Workspace,boolean)=>()",
    SetPrimaryPartCFrame="(Workspace,CFrame)=>()",
    StreamingEnabled="boolean",
    StreamingMinRadius="number",
    StreamingPauseMode="any",
    StreamingTargetRadius="number",
    Tags="any",
    TemporaryLegacyPhysicsSolverOverride="boolean",
    TemporaryLegacyPhysicsSolverOverrideStreaming="boolean",
    Terrain="any",
    TerrainWeldsFixed="boolean",
    TranslateBy="(Workspace,Vector3)=>()",
    UnjoinFromOutsiders="(Workspace,any)=>()",
    WaitForChild="(Workspace,string,number)=>(any)",
    ZoomToExtents="(Workspace)=>()",
    archivable="boolean",
    breakJoints="(Workspace)=>()",
    childAdded="Event",
    children="(Workspace)=>(any)",
    className="string",
    clone="(Workspace)=>(any)",
    destroy="(Workspace)=>()",
    findFirstChild="(Workspace,string,boolean)=>(any)",
    findPartOnRay="(Workspace,Ray,any,boolean,boolean)=>(any)",
    findPartsInRegion3="(Workspace,any,any,number)=>(any)",
    getChildren="(Workspace)=>(any)",
    isA="(Workspace,string)=>(boolean)",
    isDescendantOf="(Workspace,any)=>(boolean)",
    makeJoints="(Workspace)=>()",
    move="(Workspace,Vector3)=>()",
    moveTo="(Workspace,Vector3)=>()",
    remove="(Workspace)=>()"}


, WorldRoot={
    AncestryChanged="Event",
    Archivable="boolean",
    AttributeChanged="Event",
    AttributesReplicate="string",
    AttributesSerialize="any",
    BreakJoints="(WorldRoot)=>()",
    Changed="Event",
    ChildAdded="Event",
    ChildRemoved="Event",
    ClassName="string",
    ClearAllChildren="(WorldRoot)=>()",
    Clone="(WorldRoot)=>(any)",
    DataCost="number",
    DescendantAdded="Event",
    DescendantRemoving="Event",
    Destroy="(WorldRoot)=>()",
    FindFirstAncestor="(WorldRoot,string)=>(any)",
    FindFirstAncestorOfClass="(WorldRoot,string)=>(any)",
    FindFirstAncestorWhichIsA="(WorldRoot,string)=>(any)",
    FindFirstChild="(WorldRoot,string,boolean)=>(any)",
    FindFirstChildOfClass="(WorldRoot,string)=>(any)",
    FindFirstChildWhichIsA="(WorldRoot,string,boolean)=>(any)",
    FindPartOnRay="(WorldRoot,Ray,any,boolean,boolean)=>(any)",
    FindPartOnRayWithIgnoreList="(WorldRoot,Ray,any,boolean,boolean)=>(any)",
    FindPartOnRayWithWhitelist="(WorldRoot,Ray,any,boolean)=>(any)",
    FindPartsInRegion3="(WorldRoot,any,any,number)=>(any)",
    FindPartsInRegion3WithIgnoreList="(WorldRoot,any,any,number)=>(any)",
    FindPartsInRegion3WithWhiteList="(WorldRoot,any,any,number)=>(any)",
    GetAttribute="(WorldRoot,string)=>(any)",
    GetAttributeChangedSignal="(WorldRoot,string)=>(any)",
    GetAttributes="(WorldRoot)=>(any)",
    GetBoundingBox="(WorldRoot)=>(any)",
    GetChildren="(WorldRoot)=>(any)",
    GetDebugId="(WorldRoot,number)=>(string)",
    GetDescendants="(WorldRoot)=>(any)",
    GetExtentsSize="(WorldRoot)=>(Vector3)",
    GetFullName="(WorldRoot)=>(string)",
    GetModelCFrame="(WorldRoot)=>(CFrame)",
    GetModelSize="(WorldRoot)=>(Vector3)",
    GetPrimaryPartCFrame="(WorldRoot)=>(CFrame)",
    GetPropertyChangedSignal="(WorldRoot,string)=>(any)",
    IsA="(WorldRoot,string)=>(boolean)",
    IsAncestorOf="(WorldRoot,any)=>(boolean)",
    IsDescendantOf="(WorldRoot,any)=>(boolean)",
    IsRegion3Empty="(WorldRoot,any,any)=>(boolean)",
    IsRegion3EmptyWithIgnoreList="(WorldRoot,any,any)=>(boolean)",
    MakeJoints="(WorldRoot)=>()",
    ModelComplete="Event",
    ModelInPrimary="CFrame",
    ModelIncomplete="Event",
    MoveTo="(WorldRoot,Vector3)=>()",
    Name="string",
    Parent="any",
    PrimaryPart="any",
    Remove="(WorldRoot)=>()",
    ResetOrientationToIdentity="(WorldRoot)=>()",
    RobloxLocked="boolean",
    SetAttribute="(WorldRoot,string,any)=>()",
    SetIdentityOrientation="(WorldRoot)=>()",
    SetPrimaryPartCFrame="(WorldRoot,CFrame)=>()",
    Tags="any",
    TranslateBy="(WorldRoot,Vector3)=>()",
    WaitForChild="(WorldRoot,string,number)=>(any)",
    archivable="boolean",
    breakJoints="(WorldRoot)=>()",
    childAdded="Event",
    children="(WorldRoot)=>(any)",
    className="string",
    clone="(WorldRoot)=>(any)",
    destroy="(WorldRoot)=>()",
    findFirstChild="(WorldRoot,string,boolean)=>(any)",
    findPartOnRay="(WorldRoot,Ray,any,boolean,boolean)=>(any)",
    findPartsInRegion3="(WorldRoot,any,any,number)=>(any)",
    getChildren="(WorldRoot)=>(any)",
    isA="(WorldRoot,string)=>(boolean)",
    isDescendantOf="(WorldRoot,any)=>(boolean)",
    makeJoints="(WorldRoot)=>()",
    move="(WorldRoot,Vector3)=>()",
    moveTo="(WorldRoot,Vector3)=>()",
    remove="(WorldRoot)=>()"}


, VoiceChatService={
    ClassName="any"}

}
